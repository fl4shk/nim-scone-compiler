addSym: sym.isSome: dot
addSym: sym.isSome: U
now doing checkDuplSym(): U
  0
  1
  sym.name: U
  sym.name="U" in mySymTbl.tbl? true
    {"U": @[0]}
    -> (inputFname: "test.scone", name: "U", kind: symGeneric, initValAst: none(AstNode), typeInfo: ...)
        (main: (inputFname: "test.scone", name: none(string), funcVar: false, ptrDim: 0, arrDim: 0, ast: nil), kind: tiToResolve, myToResolve: ())
addSym: sym.isSome: T
now doing checkDuplSym(): T
  0
  2
  sym.name: T
  sym.name="T" in mySymTbl.tbl? true
    {"U": @[0], "T": @[1]}
    -> (inputFname: "test.scone", name: "U", kind: symGeneric, initValAst: none(AstNode), typeInfo: ...)
        (main: (inputFname: "test.scone", name: none(string), funcVar: false, ptrDim: 0, arrDim: 0, ast: nil), kind: tiToResolve, myToResolve: ())
    -> (inputFname: "test.scone", name: "T", kind: symGeneric, initValAst: none(AstNode), typeInfo: ...)
        (main: (inputFname: "test.scone", name: none(string), funcVar: false, ptrDim: 0, arrDim: 0, ast: nil), kind: tiToResolve, myToResolve: ())
addSym: sym.isSome: T
now doing checkDuplSym(): T
  0
  3
  sym.name: T
  sym.name="T" in mySymTbl.tbl? true
    {"U": @[0], "T": @[1, 2]}
    -> (inputFname: "test.scone", name: "U", kind: symGeneric, initValAst: none(AstNode), typeInfo: ...)
        (main: (inputFname: "test.scone", name: none(string), funcVar: false, ptrDim: 0, arrDim: 0, ast: nil), kind: tiToResolve, myToResolve: ())
    -> (inputFname: "test.scone", name: "T", kind: symGeneric, initValAst: none(AstNode), typeInfo: ...)
        (main: (inputFname: "test.scone", name: none(string), funcVar: false, ptrDim: 0, arrDim: 0, ast: nil), kind: tiToResolve, myToResolve: ())
    -> (inputFname: "test.scone", name: "T", kind: symGeneric, initValAst: none(AstNode), typeInfo: ...)
        (main: (inputFname: "test.scone", name: none(string), funcVar: false, ptrDim: 0, arrDim: 0, ast: nil), kind: tiToResolve, myToResolve: ())
now doing checkDuplSym(): dot
  0
  3
  sym.name: T
  sym.name="T" in mySymTbl.tbl? true
    {"U": @[0], "T": @[1, 2]}
    -> (inputFname: "test.scone", name: "U", kind: symGeneric, initValAst: none(AstNode), typeInfo: ...)
        (main: (inputFname: "test.scone", name: none(string), funcVar: false, ptrDim: 0, arrDim: 0, ast: nil), kind: tiToResolve, myToResolve: ())
    -> (inputFname: "test.scone", name: "T", kind: symGeneric, initValAst: none(AstNode), typeInfo: ...)
        (main: (inputFname: "test.scone", name: none(string), funcVar: false, ptrDim: 0, arrDim: 0, ast: nil), kind: tiToResolve, myToResolve: ())
    -> (inputFname: "test.scone", name: "T", kind: symGeneric, initValAst: none(AstNode), typeInfo: ...)
        (main: (inputFname: "test.scone", name: none(string), funcVar: false, ptrDim: 0, arrDim: 0, ast: nil), kind: tiToResolve, myToResolve: ())
