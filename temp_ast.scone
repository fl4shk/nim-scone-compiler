checkDuplSym: symFuncDecl: dot symFuncDecl
here's a test: dot symFuncDecl
sym.name, in tbl? dot false
here's a test: dot symFuncDecl
sym.name, in tbl? dot false
testificate: false
(scopeAst: (AstDef
  ident (AstIdent "dot")
  genericDecl (AstGenericList mySeq [
    (AstIdent "U")
    (AstIdent "T")
  ])
  argDeclSeq [
    (AstVarEtcDeclMost
      ident (AstIdent "a")
      type (AstType
        kwVar true
        ptrDim 0
        child (AstNamedType
          ident (AstIdent "Vec2")
          genericImpl (AstGenericList mySeq [
            (AstType
              kwVar false
              ptrDim 0
              child (AstNamedType
                ident (AstIdent "T")
                genericImpl (AstGenericList mySeq [
                ])
              )
            )
          ])
        )
      )
    )
    (AstVarEtcDeclMost
      ident (AstIdent "b")
      type (AstType
        kwVar true
        ptrDim 0
        child (AstNamedType
          ident (AstIdent "Vec2")
          genericImpl (AstGenericList mySeq [
            (AstType
              kwVar false
              ptrDim 0
              child (AstNamedType
                ident (AstIdent "T")
                genericImpl (AstGenericList mySeq [
                ])
              )
            )
          ])
        )
      )
    )
  ]
  returnType (AstType
    kwVar false
    ptrDim 0
    child (AstNamedType
      ident (AstIdent "T")
      genericImpl (AstGenericList mySeq [
      ])
    )
  )
  stmtSeq [
    (AstConst
      child (AstVarEtcDeclMost
        ident (AstIdent "result")
        type (AstType
          kwVar false
          ptrDim 0
          child (AstNamedType
            ident (AstIdent "T")
            genericImpl (AstGenericList mySeq [
            ])
          )
        )
      )
      expr (AstBinop
        kind binopPlus
        left (AstBinop
          kind binopMul
          left (AstDot
            left (AstIdent "a")
            right (AstIdent "x")
          )
          right (AstDot
            left (AstIdent "b")
            right (AstIdent "x")
          )
        )
        right (AstBinop
          kind binopMul
          left (AstDot
            left (AstIdent "a")
            right (AstIdent "y")
          )
          right (AstDot
            left (AstIdent "b")
            right (AstIdent "y")
          )
        )
      )
    )
    (AstReturn optExpr (AstIdent "result"))
  ]
), sym: ..., tbl: {:}, parent: ..., childSeq: ...)
(scopeAst: (AstDef
  ident (AstIdent "dot")
  genericDecl (AstGenericList mySeq [
    (AstIdent "U")
    (AstIdent "T")
  ])
  argDeclSeq [
    (AstVarEtcDeclMost
      ident (AstIdent "a")
      type (AstType
        kwVar true
        ptrDim 0
        child (AstNamedType
          ident (AstIdent "Vec2")
          genericImpl (AstGenericList mySeq [
            (AstType
              kwVar false
              ptrDim 0
              child (AstNamedType
                ident (AstIdent "T")
                genericImpl (AstGenericList mySeq [
                ])
              )
            )
          ])
        )
      )
    )
    (AstVarEtcDeclMost
      ident (AstIdent "b")
      type (AstType
        kwVar true
        ptrDim 0
        child (AstNamedType
          ident (AstIdent "Vec2")
          genericImpl (AstGenericList mySeq [
            (AstType
              kwVar false
              ptrDim 0
              child (AstNamedType
                ident (AstIdent "T")
                genericImpl (AstGenericList mySeq [
                ])
              )
            )
          ])
        )
      )
    )
  ]
  returnType (AstType
    kwVar false
    ptrDim 0
    child (AstNamedType
      ident (AstIdent "T")
      genericImpl (AstGenericList mySeq [
      ])
    )
  )
  stmtSeq [
    (AstConst
      child (AstVarEtcDeclMost
        ident (AstIdent "result")
        type (AstType
          kwVar false
          ptrDim 0
          child (AstNamedType
            ident (AstIdent "T")
            genericImpl (AstGenericList mySeq [
            ])
          )
        )
      )
      expr (AstBinop
        kind binopPlus
        left (AstBinop
          kind binopMul
          left (AstDot
            left (AstIdent "a")
            right (AstIdent "x")
          )
          right (AstDot
            left (AstIdent "b")
            right (AstIdent "x")
          )
        )
        right (AstBinop
          kind binopMul
          left (AstDot
            left (AstIdent "a")
            right (AstIdent "y")
          )
          right (AstDot
            left (AstIdent "b")
            right (AstIdent "y")
          )
        )
      )
    )
    (AstReturn optExpr (AstIdent "result"))
  ]
), sym: ..., tbl: {"U": @[0]}, parent: ..., childSeq: ...)
checkDuplSym: symFuncDecl: plus symFuncDecl
here's a test: plus symFuncDecl
sym.name, in tbl? plus false
here's a test: plus symFuncDecl
sym.name, in tbl? plus false
testificate: false
(scopeAst: (AstDef
  ident (AstIdent "plus")
  genericDecl (AstGenericList mySeq [
    (AstIdent "T")
  ])
  argDeclSeq [
    (AstVarEtcDeclMost
      ident (AstIdent "a")
      type (AstType
        kwVar true
        ptrDim 0
        child (AstNamedType
          ident (AstIdent "Vec2")
          genericImpl (AstGenericList mySeq [
            (AstType
              kwVar false
              ptrDim 0
              child (AstNamedType
                ident (AstIdent "T")
                genericImpl (AstGenericList mySeq [
                ])
              )
            )
          ])
        )
      )
    )
    (AstVarEtcDeclMost
      ident (AstIdent "b")
      type (AstType
        kwVar true
        ptrDim 0
        child (AstNamedType
          ident (AstIdent "Vec2")
          genericImpl (AstGenericList mySeq [
            (AstType
              kwVar false
              ptrDim 0
              child (AstNamedType
                ident (AstIdent "T")
                genericImpl (AstGenericList mySeq [
                ])
              )
            )
          ])
        )
      )
    )
  ]
  returnType (AstType
    kwVar false
    ptrDim 0
    child (AstNamedType
      ident (AstIdent "Vec2")
      genericImpl (AstGenericList mySeq [
        (AstType
          kwVar false
          ptrDim 0
          child (AstNamedType
            ident (AstIdent "T")
            genericImpl (AstGenericList mySeq [
            ])
          )
        )
      ])
    )
  )
  stmtSeq [
    (AstVar
      child (AstVarEtcDeclMost
        ident (AstIdent "result")
        type (AstType
          kwVar false
          ptrDim 0
          child (AstNamedType
            ident (AstIdent "Vec2")
            genericImpl (AstGenericList mySeq [
              (AstType
                kwVar false
                ptrDim 0
                child (AstNamedType
                  ident (AstIdent "T")
                  genericImpl (AstGenericList mySeq [
                  ])
                )
              )
            ])
          )
        )
      )
      optExpr !isSome
    )
    (AstFor
      ident (AstIdent "idx")
      exprPre (AstU64Lit u64Val 0)
      exprPost (AstU64Lit u64Val 2)
      isUntil true
      stmtSeq [
        (AstAssignEtc
          kind assignEtcRegular
          left (AstFuncCall
            ident (AstIdent "at")
            genericImpl (AstGenericList mySeq [
            ])
            argImplSeq [
              (AstIdent "result")
              (AstIdent "idx")
            ]
          )
          right (AstBinop
            kind binopPlus
            left (AstFuncCall
              ident (AstIdent "at")
              genericImpl (AstGenericList mySeq [
              ])
              argImplSeq [
                (AstIdent "a")
                (AstIdent "idx")
              ]
            )
            right (AstFuncCall
              ident (AstIdent "at")
              genericImpl (AstGenericList mySeq [
              ])
              argImplSeq [
                (AstIdent "b")
                (AstIdent "idx")
              ]
            )
          )
        )
      ]
    )
  ]
), sym: ..., tbl: {:}, parent: ..., childSeq: ...)
checkDuplSym: symFuncDecl: at symFuncDecl
here's a test: at symFuncDecl
sym.name, in tbl? at false
here's a test: at symFuncDecl
sym.name, in tbl? at false
testificate: false
(scopeAst: (AstDef
  ident (AstIdent "at")
  genericDecl (AstGenericList mySeq [
    (AstIdent "T")
  ])
  argDeclSeq [
    (AstVarEtcDeclMost
      ident (AstIdent "self")
      type (AstType
        kwVar true
        ptrDim 0
        child (AstNamedType
          ident (AstIdent "Vec2")
          genericImpl (AstGenericList mySeq [
            (AstType
              kwVar false
              ptrDim 0
              child (AstNamedType
                ident (AstIdent "T")
                genericImpl (AstGenericList mySeq [
                ])
              )
            )
          ])
        )
      )
    )
    (AstVarEtcDeclMost
      ident (AstIdent "idx")
      type (AstType
        kwVar false
        ptrDim 0
        child (AstBasicType kind basicTypeU32)
      )
    )
  ]
  returnType (AstType
    kwVar true
    ptrDim 0
    child (AstNamedType
      ident (AstIdent "T")
      genericImpl (AstGenericList mySeq [
      ])
    )
  )
  stmtSeq [
    (AstIf
      expr (AstBinop
        kind binopCmpEq
        left (AstIdent "idx")
        right (AstU64Lit u64Val 0)
      )
      stmtSeq [
        (AstReturn optExpr (AstDot
          left (AstIdent "self")
          right (AstIdent "x")
        ))
      ]
      elifSeq [
      ]
      optElse (AstElse stmtSeq [
        (AstReturn optExpr (AstDot
          left (AstIdent "self")
          right (AstIdent "y")
        ))
      ])
    )
  ]
), sym: ..., tbl: {:}, parent: ..., childSeq: ...)
checkDuplSym: symFuncDecl: sum symFuncDecl
here's a test: sum symFuncDecl
sym.name, in tbl? sum false
here's a test: sum symFuncDecl
sym.name, in tbl? sum false
testificate: false
(scopeAst: (AstDef
  ident (AstIdent "sum")
  genericDecl (AstGenericList mySeq [
    (AstIdent "T")
  ])
  argDeclSeq [
    (AstVarEtcDeclMost
      ident (AstIdent "toSum")
      type (AstType
        kwVar true
        ptrDim 0
        child (AstArray
          dim (AstBinop
            kind binopMul
            left (AstU64Lit u64Val 8)
            right (AstU64Lit u64Val 3)
          )
          elemType (AstType
            kwVar false
            ptrDim 0
            child (AstNamedType
              ident (AstIdent "Vec2")
              genericImpl (AstGenericList mySeq [
                (AstType
                  kwVar false
                  ptrDim 0
                  child (AstNamedType
                    ident (AstIdent "T")
                    genericImpl (AstGenericList mySeq [
                    ])
                  )
                )
              ])
            )
          )
        )
      )
    )
  ]
  returnType (AstType
    kwVar false
    ptrDim 0
    child (AstNamedType
      ident (AstIdent "Vec2")
      genericImpl (AstGenericList mySeq [
        (AstType
          kwVar false
          ptrDim 0
          child (AstNamedType
            ident (AstIdent "T")
            genericImpl (AstGenericList mySeq [
            ])
          )
        )
      ])
    )
  )
  stmtSeq [
    (AstVar
      child (AstVarEtcDeclMost
        ident (AstIdent "result")
        type (AstType
          kwVar false
          ptrDim 0
          child (AstNamedType
            ident (AstIdent "Vec2")
            genericImpl (AstGenericList mySeq [
              (AstType
                kwVar false
                ptrDim 0
                child (AstNamedType
                  ident (AstIdent "T")
                  genericImpl (AstGenericList mySeq [
                  ])
                )
              )
            ])
          )
        )
      )
      optExpr !isSome
    )
    (AstFor
      ident (AstIdent "jdx")
      exprPre (AstU64Lit u64Val 0)
      exprPost (AstBinop
        kind binopMul
        left (AstU64Lit u64Val 8)
        right (AstU64Lit u64Val 3)
      )
      isUntil true
      stmtSeq [
        (AstIf
          expr (AstBinop
            kind binopCmpEq
            left (AstIdent "jdx")
            right (AstU64Lit u64Val 0)
          )
          stmtSeq [
            (AstFor
              ident (AstIdent "idx")
              exprPre (AstU64Lit u64Val 0)
              exprPost (AstU64Lit u64Val 2)
              isUntil true
              stmtSeq [
                (AstAssignEtc
                  kind assignEtcRegular
                  left (AstFuncCall
                    ident (AstIdent "at")
                    genericImpl (AstGenericList mySeq [
                    ])
                    argImplSeq [
                      (AstIdent "result")
                      (AstIdent "idx")
                    ]
                  )
                  right (AstFuncCall
                    ident (AstIdent "at")
                    genericImpl (AstGenericList mySeq [
                    ])
                    argImplSeq [
                      (AstFuncCall
                        ident (AstIdent "toSum")
                        genericImpl (AstGenericList mySeq [
                        ])
                        argImplSeq [
                          (AstU64Lit u64Val 0)
                        ]
                      )
                      (AstIdent "idx")
                    ]
                  )
                )
              ]
            )
          ]
          elifSeq [
          ]
          optElse (AstElse stmtSeq [
            (AstAssignEtc
              kind assignEtcRegular
              left (AstIdent "result")
              right (AstFuncCall
                ident (AstIdent "plus")
                genericImpl (AstGenericList mySeq [
                ])
                argImplSeq [
                  (AstIdent "result")
                  (AstFuncCall
                    ident (AstIdent "toSum")
                    genericImpl (AstGenericList mySeq [
                    ])
                    argImplSeq [
                      (AstIdent "jdx")
                    ]
                  )
                ]
              )
            )
          ])
        )
      ]
    )
  ]
), sym: ..., tbl: {:}, parent: ..., childSeq: ...)
nextSymTblPass(): 
----
----
    symbol: (inputFname: "test.scone", name: "dot", kind: symFuncDecl, initValAst: none(AstNode), typeInfo: ...)

      symbol: (inputFname: "test.scone", name: "U", kind: symGeneric, initValAst: none(AstNode), typeInfo: ...)

----
--------

      symbol: (inputFname: "test.scone", name: "T", kind: symGeneric, initValAst: none(AstNode), typeInfo: ...)

----
--------

----
--------

    symbol: (inputFname: "test.scone", name: "plus", kind: symFuncDecl, initValAst: none(AstNode), typeInfo: ...)

      symbol: (inputFname: "test.scone", name: "T", kind: symGeneric, initValAst: none(AstNode), typeInfo: ...)

----
--------

----
--------

    symbol: (inputFname: "test.scone", name: "at", kind: symFuncDecl, initValAst: none(AstNode), typeInfo: ...)

      symbol: (inputFname: "test.scone", name: "T", kind: symGeneric, initValAst: none(AstNode), typeInfo: ...)

----
--------

----
--------

    symbol: (inputFname: "test.scone", name: "sum", kind: symFuncDecl, initValAst: none(AstNode), typeInfo: ...)

      symbol: (inputFname: "test.scone", name: "T", kind: symGeneric, initValAst: none(AstNode), typeInfo: ...)

----
--------

----
--------

--------

--------


