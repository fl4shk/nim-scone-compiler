(AstSrcFile
  module (AstModule ident (AstIdent "myModule"))
  funcDeclSeq [
    (AstDef
      ident (AstIdent "dot")
      genericDecl (AstGenericList mySeq [
        (AstIdent "T")
      ])
      argDeclSeq [
        (AstVarEtcDeclMost
          ident (AstIdent "a")
          type (AstType
            kwVar true
            ptrDim 0
            child (AstNamedType
              ident (AstIdent "Vec2")
              genericImpl (AstGenericList mySeq [
                (AstType
                  kwVar false
                  ptrDim 0
                  child (AstNamedType
                    ident (AstIdent "T")
                    genericImpl (AstGenericList mySeq [
                    ])
                  )
                )
              ])
            )
          )
        )
        (AstVarEtcDeclMost
          ident (AstIdent "b")
          type (AstType
            kwVar true
            ptrDim 0
            child (AstNamedType
              ident (AstIdent "Vec2")
              genericImpl (AstGenericList mySeq [
                (AstType
                  kwVar false
                  ptrDim 0
                  child (AstNamedType
                    ident (AstIdent "T")
                    genericImpl (AstGenericList mySeq [
                    ])
                  )
                )
              ])
            )
          )
        )
      ]
      returnType (AstType
        kwVar false
        ptrDim 0
        child (AstNamedType
          ident (AstIdent "T")
          genericImpl (AstGenericList mySeq [
          ])
        )
      )
      stmtSeq [
        (AstConst
          child (AstVarEtcDeclMost
            ident (AstIdent "result")
            type (AstType
              kwVar false
              ptrDim 0
              child (AstNamedType
                ident (AstIdent "T")
                genericImpl (AstGenericList mySeq [
                ])
              )
            )
          )
          expr (AstBinop
            kind binopPlus
            left (AstBinop
              kind binopMul
              left (AstDot
                left (AstIdent "a")
                right (AstIdent "x")
              )
              right (AstDot
                left (AstIdent "b")
                right (AstIdent "x")
              )
            )
            right (AstBinop
              kind binopMul
              left (AstDot
                left (AstIdent "a")
                right (AstIdent "y")
              )
              right (AstDot
                left (AstIdent "b")
                right (AstIdent "y")
              )
            )
          )
        )
        (AstReturn optExpr (AstIdent "result"))
      ]
    )
    (AstDef
      ident (AstIdent "plus")
      genericDecl (AstGenericList mySeq [
        (AstIdent "T")
      ])
      argDeclSeq [
        (AstVarEtcDeclMost
          ident (AstIdent "a")
          type (AstType
            kwVar true
            ptrDim 0
            child (AstNamedType
              ident (AstIdent "Vec2")
              genericImpl (AstGenericList mySeq [
                (AstType
                  kwVar false
                  ptrDim 0
                  child (AstNamedType
                    ident (AstIdent "T")
                    genericImpl (AstGenericList mySeq [
                    ])
                  )
                )
              ])
            )
          )
        )
        (AstVarEtcDeclMost
          ident (AstIdent "b")
          type (AstType
            kwVar true
            ptrDim 0
            child (AstNamedType
              ident (AstIdent "Vec2")
              genericImpl (AstGenericList mySeq [
                (AstType
                  kwVar false
                  ptrDim 0
                  child (AstNamedType
                    ident (AstIdent "T")
                    genericImpl (AstGenericList mySeq [
                    ])
                  )
                )
              ])
            )
          )
        )
      ]
      returnType (AstType
        kwVar false
        ptrDim 0
        child (AstNamedType
          ident (AstIdent "Vec2")
          genericImpl (AstGenericList mySeq [
            (AstType
              kwVar false
              ptrDim 0
              child (AstNamedType
                ident (AstIdent "T")
                genericImpl (AstGenericList mySeq [
                ])
              )
            )
          ])
        )
      )
      stmtSeq [
        (AstVar
          child (AstVarEtcDeclMost
            ident (AstIdent "result")
            type (AstType
              kwVar false
              ptrDim 0
              child (AstNamedType
                ident (AstIdent "Vec2")
                genericImpl (AstGenericList mySeq [
                  (AstType
                    kwVar false
                    ptrDim 0
                    child (AstNamedType
                      ident (AstIdent "T")
                      genericImpl (AstGenericList mySeq [
                      ])
                    )
                  )
                ])
              )
            )
          )
          optExpr !isSome
        )
        (AstFor
          ident (AstIdent "idx")
          exprPre (AstU64Lit u64Val 0)
          exprPost (AstU64Lit u64Val 2)
          isUntil true
          stmtSeq [
            (AstAssignEtc
              kind assignEtcRegular
              left (AstFuncCall
                ident (AstIdent "at")
                genericImpl (AstGenericList mySeq [
                ])
                argImplSeq [
                  (AstIdent "result")
                  (AstIdent "idx")
                ]
              )
              right (AstBinop
                kind binopPlus
                left (AstFuncCall
                  ident (AstIdent "at")
                  genericImpl (AstGenericList mySeq [
                  ])
                  argImplSeq [
                    (AstIdent "a")
                    (AstIdent "idx")
                  ]
                )
                right (AstFuncCall
                  ident (AstIdent "at")
                  genericImpl (AstGenericList mySeq [
                  ])
                  argImplSeq [
                    (AstIdent "b")
                    (AstIdent "idx")
                  ]
                )
              )
            )
          ]
        )
      ]
    )
    (AstDef
      ident (AstIdent "at")
      genericDecl (AstGenericList mySeq [
        (AstIdent "T")
      ])
      argDeclSeq [
        (AstVarEtcDeclMost
          ident (AstIdent "self")
          type (AstType
            kwVar true
            ptrDim 0
            child (AstNamedType
              ident (AstIdent "Vec2")
              genericImpl (AstGenericList mySeq [
                (AstType
                  kwVar false
                  ptrDim 0
                  child (AstNamedType
                    ident (AstIdent "T")
                    genericImpl (AstGenericList mySeq [
                    ])
                  )
                )
              ])
            )
          )
        )
        (AstVarEtcDeclMost
          ident (AstIdent "idx")
          type (AstType
            kwVar false
            ptrDim 0
            child (AstBasicType kind basicTypeU32)
          )
        )
      ]
      returnType (AstType
        kwVar true
        ptrDim 0
        child (AstNamedType
          ident (AstIdent "T")
          genericImpl (AstGenericList mySeq [
          ])
        )
      )
      stmtSeq [
        (AstIf
          expr (AstBinop
            kind binopCmpEq
            left (AstIdent "idx")
            right (AstU64Lit u64Val 0)
          )
          stmtSeq [
            (AstReturn optExpr (AstDot
              left (AstIdent "self")
              right (AstIdent "x")
            ))
          ]
          elifSeq [
          ]
          optElse (AstElse stmtSeq [
            (AstReturn optExpr (AstDot
              left (AstIdent "self")
              right (AstIdent "y")
            ))
          ])
        )
      ]
    )
    (AstDef
      ident (AstIdent "sum")
      genericDecl (AstGenericList mySeq [
        (AstIdent "T")
      ])
      argDeclSeq [
        (AstVarEtcDeclMost
          ident (AstIdent "toSum")
          type (AstType
            kwVar true
            ptrDim 0
            child (AstArray
              dim (AstBinop
                kind binopMul
                left (AstU64Lit u64Val 8)
                right (AstU64Lit u64Val 3)
              )
              elemType (AstType
                kwVar false
                ptrDim 0
                child (AstNamedType
                  ident (AstIdent "Vec2")
                  genericImpl (AstGenericList mySeq [
                    (AstType
                      kwVar false
                      ptrDim 0
                      child (AstNamedType
                        ident (AstIdent "T")
                        genericImpl (AstGenericList mySeq [
                        ])
                      )
                    )
                  ])
                )
              )
            )
          )
        )
      ]
      returnType (AstType
        kwVar false
        ptrDim 0
        child (AstNamedType
          ident (AstIdent "Vec2")
          genericImpl (AstGenericList mySeq [
            (AstType
              kwVar false
              ptrDim 0
              child (AstNamedType
                ident (AstIdent "T")
                genericImpl (AstGenericList mySeq [
                ])
              )
            )
          ])
        )
      )
      stmtSeq [
        (AstVar
          child (AstVarEtcDeclMost
            ident (AstIdent "result")
            type (AstType
              kwVar false
              ptrDim 0
              child (AstNamedType
                ident (AstIdent "Vec2")
                genericImpl (AstGenericList mySeq [
                  (AstType
                    kwVar false
                    ptrDim 0
                    child (AstNamedType
                      ident (AstIdent "T")
                      genericImpl (AstGenericList mySeq [
                      ])
                    )
                  )
                ])
              )
            )
          )
          optExpr !isSome
        )
        (AstFor
          ident (AstIdent "jdx")
          exprPre (AstU64Lit u64Val 0)
          exprPost (AstBinop
            kind binopMul
            left (AstU64Lit u64Val 8)
            right (AstU64Lit u64Val 3)
          )
          isUntil true
          stmtSeq [
            (AstIf
              expr (AstBinop
                kind binopCmpEq
                left (AstIdent "jdx")
                right (AstU64Lit u64Val 0)
              )
              stmtSeq [
                (AstFor
                  ident (AstIdent "idx")
                  exprPre (AstU64Lit u64Val 0)
                  exprPost (AstU64Lit u64Val 2)
                  isUntil true
                  stmtSeq [
                    (AstAssignEtc
                      kind assignEtcRegular
                      left (AstFuncCall
                        ident (AstIdent "at")
                        genericImpl (AstGenericList mySeq [
                        ])
                        argImplSeq [
                          (AstIdent "result")
                          (AstIdent "idx")
                        ]
                      )
                      right (AstFuncCall
                        ident (AstIdent "at")
                        genericImpl (AstGenericList mySeq [
                        ])
                        argImplSeq [
                          (AstFuncCall
                            ident (AstIdent "toSum")
                            genericImpl (AstGenericList mySeq [
                            ])
                            argImplSeq [
                              (AstU64Lit u64Val 0)
                            ]
                          )
                          (AstIdent "idx")
                        ]
                      )
                    )
                  ]
                )
              ]
              elifSeq [
              ]
              optElse (AstElse stmtSeq [
                (AstAssignEtc
                  kind assignEtcRegular
                  left (AstIdent "result")
                  right (AstFuncCall
                    ident (AstIdent "plus")
                    genericImpl (AstGenericList mySeq [
                    ])
                    argImplSeq [
                      (AstIdent "result")
                      (AstFuncCall
                        ident (AstIdent "toSum")
                        genericImpl (AstGenericList mySeq [
                        ])
                        argImplSeq [
                          (AstIdent "jdx")
                        ]
                      )
                    ]
                  )
                )
              ])
            )
          ]
        )
      ]
    )
    (AstDef
      ident (AstIdent "times")
      genericDecl (AstGenericList mySeq [
        (AstIdent "T")
      ])
      argDeclSeq [
        (AstVarEtcDeclMost
          ident (AstIdent "a")
          type (AstType
            kwVar false
            ptrDim 0
            child (AstNamedType
              ident (AstIdent "T")
              genericImpl (AstGenericList mySeq [
              ])
            )
          )
        )
        (AstVarEtcDeclMost
          ident (AstIdent "b")
          type (AstType
            kwVar false
            ptrDim 0
            child (AstNamedType
              ident (AstIdent "T")
              genericImpl (AstGenericList mySeq [
              ])
            )
          )
        )
      ]
      returnType (AstType
        kwVar false
        ptrDim 0
        child (AstNamedType
          ident (AstIdent "T")
          genericImpl (AstGenericList mySeq [
          ])
        )
      )
      stmtSeq [
        (AstReturn optExpr (AstBinop
          kind binopMul
          left (AstIdent "a")
          right (AstIdent "b")
        ))
      ]
    )
    (AstDef
      ident (AstIdent "sum")
      genericDecl (AstGenericList mySeq [
        (AstIdent "T")
      ])
      argDeclSeq [
        (AstVarEtcDeclMost
          ident (AstIdent "toSum")
          type (AstType
            kwVar true
            ptrDim 0
            child (AstArray
              dim (AstBinop
                kind binopMul
                left (AstU64Lit u64Val 8)
                right (AstU64Lit u64Val 3)
              )
              elemType (AstType
                kwVar false
                ptrDim 0
                child (AstNamedType
                  ident (AstIdent "Vec2")
                  genericImpl (AstGenericList mySeq [
                    (AstType
                      kwVar false
                      ptrDim 0
                      child (AstNamedType
                        ident (AstIdent "T")
                        genericImpl (AstGenericList mySeq [
                        ])
                      )
                    )
                  ])
                )
              )
            )
          )
        )
      ]
      returnType (AstType
        kwVar false
        ptrDim 0
        child (AstNamedType
          ident (AstIdent "Vec2")
          genericImpl (AstGenericList mySeq [
            (AstType
              kwVar false
              ptrDim 0
              child (AstNamedType
                ident (AstIdent "T")
                genericImpl (AstGenericList mySeq [
                ])
              )
            )
          ])
        )
      )
      stmtSeq [
        (AstVar
          child (AstVarEtcDeclMost
            ident (AstIdent "result")
            type (AstType
              kwVar false
              ptrDim 0
              child (AstNamedType
                ident (AstIdent "Vec2")
                genericImpl (AstGenericList mySeq [
                  (AstType
                    kwVar false
                    ptrDim 0
                    child (AstNamedType
                      ident (AstIdent "T")
                      genericImpl (AstGenericList mySeq [
                      ])
                    )
                  )
                ])
              )
            )
          )
          optExpr !isSome
        )
        (AstFor
          ident (AstIdent "jdx")
          exprPre (AstU64Lit u64Val 0)
          exprPost (AstBinop
            kind binopMul
            left (AstU64Lit u64Val 8)
            right (AstU64Lit u64Val 3)
          )
          isUntil true
          stmtSeq [
            (AstIf
              expr (AstBinop
                kind binopCmpEq
                left (AstIdent "jdx")
                right (AstU64Lit u64Val 0)
              )
              stmtSeq [
                (AstFor
                  ident (AstIdent "idx")
                  exprPre (AstU64Lit u64Val 0)
                  exprPost (AstU64Lit u64Val 2)
                  isUntil true
                  stmtSeq [
                    (AstAssignEtc
                      kind assignEtcRegular
                      left (AstFuncCall
                        ident (AstIdent "at")
                        genericImpl (AstGenericList mySeq [
                        ])
                        argImplSeq [
                          (AstIdent "result")
                          (AstIdent "idx")
                        ]
                      )
                      right (AstFuncCall
                        ident (AstIdent "at")
                        genericImpl (AstGenericList mySeq [
                        ])
                        argImplSeq [
                          (AstFuncCall
                            ident (AstIdent "toSum")
                            genericImpl (AstGenericList mySeq [
                            ])
                            argImplSeq [
                              (AstU64Lit u64Val 0)
                            ]
                          )
                          (AstIdent "idx")
                        ]
                      )
                    )
                  ]
                )
              ]
              elifSeq [
              ]
              optElse (AstElse stmtSeq [
                (AstAssignEtc
                  kind assignEtcRegular
                  left (AstIdent "result")
                  right (AstFuncCall
                    ident (AstIdent "plus")
                    genericImpl (AstGenericList mySeq [
                    ])
                    argImplSeq [
                      (AstIdent "result")
                      (AstFuncCall
                        ident (AstIdent "toSum")
                        genericImpl (AstGenericList mySeq [
                        ])
                        argImplSeq [
                          (AstIdent "jdx")
                        ]
                      )
                    ]
                  )
                )
              ])
            )
          ]
        )
      ]
    )
  ]
  structDeclSeq [
    (AstStruct
      ident (AstIdent "Vec2")
      genericDecl (AstGenericList mySeq [
        (AstIdent "T")
      ])
      fieldSeq [
        (AstVarEtcDeclMost
          ident (AstIdent "x")
          type (AstType
            kwVar false
            ptrDim 0
            child (AstNamedType
              ident (AstIdent "T")
              genericImpl (AstGenericList mySeq [
              ])
            )
          )
        )
        (AstVarEtcDeclMost
          ident (AstIdent "y")
          type (AstType
            kwVar false
            ptrDim 0
            child (AstNamedType
              ident (AstIdent "T")
              genericImpl (AstGenericList mySeq [
              ])
            )
          )
        )
      ]
    )
  ]
)
nextSymTblPass(): 
----
----
    symbol: (inputFname: "test.scone", name: "dot", kind: symFuncDecl, initValAst: none(AstNode), typeInfo: ...)
    typeInfo: (main: (inputFname: "test.scone", name: none(string), funcVar: false, ptrDim: 0, arrDim: 0, ast: nil), kind: tiFunc, myFunc: (genericIdxSeq: @[], argIdxSeq: @[], returnType: 0))

      symbol: (inputFname: "test.scone", name: "T", kind: symGeneric, initValAst: none(AstNode), typeInfo: ...)
      typeInfo: (main: (inputFname: "test.scone", name: none(string), funcVar: false, ptrDim: 0, arrDim: 0, ast: nil), kind: tiToResolve, myToResolve: ())

----
--------

      symbol: (inputFname: "test.scone", name: "a", kind: symVar, initValAst: none(AstNode), typeInfo: ...)
      typeInfo: (main: (inputFname: "test.scone", name: some("Vec2"), funcVar: true, ptrDim: 0, arrDim: 0, ast: (AstNamedType
  ident (AstIdent "Vec2")
  genericImpl (AstGenericList mySeq [
    (AstType
      kwVar false
      ptrDim 0
      child (AstNamedType
        ident (AstIdent "T")
        genericImpl (AstGenericList mySeq [
        ])
      )
    )
  ])
)), kind: tiToResolve, myToResolve: ())

----
--------

      symbol: (inputFname: "test.scone", name: "b", kind: symVar, initValAst: none(AstNode), typeInfo: ...)
      typeInfo: (main: (inputFname: "test.scone", name: some("Vec2"), funcVar: true, ptrDim: 0, arrDim: 0, ast: (AstNamedType
  ident (AstIdent "Vec2")
  genericImpl (AstGenericList mySeq [
    (AstType
      kwVar false
      ptrDim 0
      child (AstNamedType
        ident (AstIdent "T")
        genericImpl (AstGenericList mySeq [
        ])
      )
    )
  ])
)), kind: tiToResolve, myToResolve: ())

----
--------

      symbol: (inputFname: "test.scone", name: "<result>", kind: symVar, initValAst: none(AstNode), typeInfo: ...)
      typeInfo: (main: (inputFname: "test.scone", name: some("T"), funcVar: false, ptrDim: 0, arrDim: 0, ast: (AstNamedType
  ident (AstIdent "T")
  genericImpl (AstGenericList mySeq [
  ])
)), kind: tiToResolve, myToResolve: ())

----
--------

----
--------

    symbol: (inputFname: "test.scone", name: "plus", kind: symFuncDecl, initValAst: none(AstNode), typeInfo: ...)
    typeInfo: (main: (inputFname: "test.scone", name: none(string), funcVar: false, ptrDim: 0, arrDim: 0, ast: nil), kind: tiFunc, myFunc: (genericIdxSeq: @[], argIdxSeq: @[], returnType: 0))

      symbol: (inputFname: "test.scone", name: "T", kind: symGeneric, initValAst: none(AstNode), typeInfo: ...)
      typeInfo: (main: (inputFname: "test.scone", name: none(string), funcVar: false, ptrDim: 0, arrDim: 0, ast: nil), kind: tiToResolve, myToResolve: ())

----
--------

      symbol: (inputFname: "test.scone", name: "a", kind: symVar, initValAst: none(AstNode), typeInfo: ...)
      typeInfo: (main: (inputFname: "test.scone", name: some("Vec2"), funcVar: true, ptrDim: 0, arrDim: 0, ast: (AstNamedType
  ident (AstIdent "Vec2")
  genericImpl (AstGenericList mySeq [
    (AstType
      kwVar false
      ptrDim 0
      child (AstNamedType
        ident (AstIdent "T")
        genericImpl (AstGenericList mySeq [
        ])
      )
    )
  ])
)), kind: tiToResolve, myToResolve: ())

----
--------

      symbol: (inputFname: "test.scone", name: "b", kind: symVar, initValAst: none(AstNode), typeInfo: ...)
      typeInfo: (main: (inputFname: "test.scone", name: some("Vec2"), funcVar: true, ptrDim: 0, arrDim: 0, ast: (AstNamedType
  ident (AstIdent "Vec2")
  genericImpl (AstGenericList mySeq [
    (AstType
      kwVar false
      ptrDim 0
      child (AstNamedType
        ident (AstIdent "T")
        genericImpl (AstGenericList mySeq [
        ])
      )
    )
  ])
)), kind: tiToResolve, myToResolve: ())

----
--------

      symbol: (inputFname: "test.scone", name: "<result>", kind: symVar, initValAst: none(AstNode), typeInfo: ...)
      typeInfo: (main: (inputFname: "test.scone", name: some("Vec2"), funcVar: false, ptrDim: 0, arrDim: 0, ast: (AstNamedType
  ident (AstIdent "Vec2")
  genericImpl (AstGenericList mySeq [
    (AstType
      kwVar false
      ptrDim 0
      child (AstNamedType
        ident (AstIdent "T")
        genericImpl (AstGenericList mySeq [
        ])
      )
    )
  ])
)), kind: tiToResolve, myToResolve: ())

----
--------

----
--------

    symbol: (inputFname: "test.scone", name: "at", kind: symFuncDecl, initValAst: none(AstNode), typeInfo: ...)
    typeInfo: (main: (inputFname: "test.scone", name: none(string), funcVar: false, ptrDim: 0, arrDim: 0, ast: nil), kind: tiFunc, myFunc: (genericIdxSeq: @[], argIdxSeq: @[], returnType: 0))

      symbol: (inputFname: "test.scone", name: "T", kind: symGeneric, initValAst: none(AstNode), typeInfo: ...)
      typeInfo: (main: (inputFname: "test.scone", name: none(string), funcVar: false, ptrDim: 0, arrDim: 0, ast: nil), kind: tiToResolve, myToResolve: ())

----
--------

      symbol: (inputFname: "test.scone", name: "self", kind: symVar, initValAst: none(AstNode), typeInfo: ...)
      typeInfo: (main: (inputFname: "test.scone", name: some("Vec2"), funcVar: true, ptrDim: 0, arrDim: 0, ast: (AstNamedType
  ident (AstIdent "Vec2")
  genericImpl (AstGenericList mySeq [
    (AstType
      kwVar false
      ptrDim 0
      child (AstNamedType
        ident (AstIdent "T")
        genericImpl (AstGenericList mySeq [
        ])
      )
    )
  ])
)), kind: tiToResolve, myToResolve: ())

----
--------

      symbol: (inputFname: "test.scone", name: "idx", kind: symVar, initValAst: none(AstNode), typeInfo: ...)
      typeInfo: (main: (inputFname: "test.scone", name: none(string), funcVar: false, ptrDim: 0, arrDim: 0, ast: (AstBasicType kind basicTypeU32)), kind: tiBasicType, myBasicType: (kind: basicTypeVoid))

----
--------

      symbol: (inputFname: "test.scone", name: "<result>", kind: symVar, initValAst: none(AstNode), typeInfo: ...)
      typeInfo: (main: (inputFname: "test.scone", name: some("T"), funcVar: true, ptrDim: 0, arrDim: 0, ast: (AstNamedType
  ident (AstIdent "T")
  genericImpl (AstGenericList mySeq [
  ])
)), kind: tiToResolve, myToResolve: ())

----
--------

----
--------

    symbol: (inputFname: "test.scone", name: "sum", kind: symFuncDecl, initValAst: none(AstNode), typeInfo: ...)
    typeInfo: (main: (inputFname: "test.scone", name: none(string), funcVar: false, ptrDim: 0, arrDim: 0, ast: nil), kind: tiFunc, myFunc: (genericIdxSeq: @[], argIdxSeq: @[], returnType: 0))

      symbol: (inputFname: "test.scone", name: "T", kind: symGeneric, initValAst: none(AstNode), typeInfo: ...)
      typeInfo: (main: (inputFname: "test.scone", name: none(string), funcVar: false, ptrDim: 0, arrDim: 0, ast: nil), kind: tiToResolve, myToResolve: ())

----
--------

      symbol: (inputFname: "test.scone", name: "toSum", kind: symVar, initValAst: none(AstNode), typeInfo: ...)
      typeInfo: (main: (inputFname: "test.scone", name: some("Vec2"), funcVar: true, ptrDim: 0, arrDim: 24, ast: (AstNamedType
  ident (AstIdent "Vec2")
  genericImpl (AstGenericList mySeq [
    (AstType
      kwVar false
      ptrDim 0
      child (AstNamedType
        ident (AstIdent "T")
        genericImpl (AstGenericList mySeq [
        ])
      )
    )
  ])
)), kind: tiToResolve, myToResolve: ())

----
--------

      symbol: (inputFname: "test.scone", name: "<result>", kind: symVar, initValAst: none(AstNode), typeInfo: ...)
      typeInfo: (main: (inputFname: "test.scone", name: some("Vec2"), funcVar: false, ptrDim: 0, arrDim: 0, ast: (AstNamedType
  ident (AstIdent "Vec2")
  genericImpl (AstGenericList mySeq [
    (AstType
      kwVar false
      ptrDim 0
      child (AstNamedType
        ident (AstIdent "T")
        genericImpl (AstGenericList mySeq [
        ])
      )
    )
  ])
)), kind: tiToResolve, myToResolve: ())

----
--------

----
--------

    symbol: (inputFname: "test.scone", name: "times", kind: symFuncDecl, initValAst: none(AstNode), typeInfo: ...)
    typeInfo: (main: (inputFname: "test.scone", name: none(string), funcVar: false, ptrDim: 0, arrDim: 0, ast: nil), kind: tiFunc, myFunc: (genericIdxSeq: @[], argIdxSeq: @[], returnType: 0))

      symbol: (inputFname: "test.scone", name: "T", kind: symGeneric, initValAst: none(AstNode), typeInfo: ...)
      typeInfo: (main: (inputFname: "test.scone", name: none(string), funcVar: false, ptrDim: 0, arrDim: 0, ast: nil), kind: tiToResolve, myToResolve: ())

----
--------

      symbol: (inputFname: "test.scone", name: "a", kind: symVar, initValAst: none(AstNode), typeInfo: ...)
      typeInfo: (main: (inputFname: "test.scone", name: some("T"), funcVar: false, ptrDim: 0, arrDim: 0, ast: (AstNamedType
  ident (AstIdent "T")
  genericImpl (AstGenericList mySeq [
  ])
)), kind: tiToResolve, myToResolve: ())

----
--------

      symbol: (inputFname: "test.scone", name: "b", kind: symVar, initValAst: none(AstNode), typeInfo: ...)
      typeInfo: (main: (inputFname: "test.scone", name: some("T"), funcVar: false, ptrDim: 0, arrDim: 0, ast: (AstNamedType
  ident (AstIdent "T")
  genericImpl (AstGenericList mySeq [
  ])
)), kind: tiToResolve, myToResolve: ())

----
--------

      symbol: (inputFname: "test.scone", name: "<result>", kind: symVar, initValAst: none(AstNode), typeInfo: ...)
      typeInfo: (main: (inputFname: "test.scone", name: some("T"), funcVar: false, ptrDim: 0, arrDim: 0, ast: (AstNamedType
  ident (AstIdent "T")
  genericImpl (AstGenericList mySeq [
  ])
)), kind: tiToResolve, myToResolve: ())

----
--------

----
--------

    symbol: (inputFname: "test.scone", name: "sum", kind: symFuncDecl, initValAst: none(AstNode), typeInfo: ...)
    typeInfo: (main: (inputFname: "test.scone", name: none(string), funcVar: false, ptrDim: 0, arrDim: 0, ast: nil), kind: tiFunc, myFunc: (genericIdxSeq: @[], argIdxSeq: @[], returnType: 0))

      symbol: (inputFname: "test.scone", name: "T", kind: symGeneric, initValAst: none(AstNode), typeInfo: ...)
      typeInfo: (main: (inputFname: "test.scone", name: none(string), funcVar: false, ptrDim: 0, arrDim: 0, ast: nil), kind: tiToResolve, myToResolve: ())

----
--------

      symbol: (inputFname: "test.scone", name: "toSum", kind: symVar, initValAst: none(AstNode), typeInfo: ...)
      typeInfo: (main: (inputFname: "test.scone", name: some("Vec2"), funcVar: true, ptrDim: 0, arrDim: 24, ast: (AstNamedType
  ident (AstIdent "Vec2")
  genericImpl (AstGenericList mySeq [
    (AstType
      kwVar false
      ptrDim 0
      child (AstNamedType
        ident (AstIdent "T")
        genericImpl (AstGenericList mySeq [
        ])
      )
    )
  ])
)), kind: tiToResolve, myToResolve: ())

----
--------

      symbol: (inputFname: "test.scone", name: "<result>", kind: symVar, initValAst: none(AstNode), typeInfo: ...)
      typeInfo: (main: (inputFname: "test.scone", name: some("Vec2"), funcVar: false, ptrDim: 0, arrDim: 0, ast: (AstNamedType
  ident (AstIdent "Vec2")
  genericImpl (AstGenericList mySeq [
    (AstType
      kwVar false
      ptrDim 0
      child (AstNamedType
        ident (AstIdent "T")
        genericImpl (AstGenericList mySeq [
        ])
      )
    )
  ])
)), kind: tiToResolve, myToResolve: ())

----
--------

----
--------

--------

--------


