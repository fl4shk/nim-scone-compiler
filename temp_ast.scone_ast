doAstSrcFile: pre mkScopeEtc
addChildSymTbl: childSeq.len(): 0
addChildSymTbl: post set parent: true 1
doAstSrcFile: post mkScopeEtc
addChildSymTbl: childSeq.len(): 0
addChildSymTbl: post set parent: true 1
addSym: sym: (inputFname: "test.scone", name: "Vec2", kind: symStructDecl, initValAst: none(AstNode), typeInfo: ...)
addSym: tinfo: (main: (inputFname: "test.scone", name: some("Vec2"), funcVar: false, ptrDim: 0, arrDim: 0, ast: nil), kind: tiStruct, myStruct: (genericIdxSeq: @[], fieldIdxSeq: @[]))
addsym: testificate: 0
addChildSymTbl: childSeq.len(): 0
addChildSymTbl: post set parent: true 1
addSym: sym: (inputFname: "test.scone", name: "T", kind: symGenericDecl, initValAst: none(AstNode), typeInfo: ...)
addSym: tinfo: (main: (inputFname: "test.scone", name: none(string), funcVar: false, ptrDim: 0, arrDim: 0, ast: nil), kind: tiToResolve, myToResolve: ())
addsym: testificate: 0
debug: 
curr.parent: (ast: (AstStruct
  ident (AstIdent "Vec2")
  genericDecl (AstGenericList mySeq [
    (AstIdent "T")
  ])
  fieldSeq [
    (AstVarEtcDeclMost
      ident (AstIdent "x")
      type (AstType
        kwVar false
        ptrDim 0
        child (AstNamedType
          ident (AstIdent "T")
          genericImpl (AstGenericList mySeq [
          ])
        )
      )
    )
    (AstVarEtcDeclMost
      ident (AstIdent "y")
      type (AstType
        kwVar false
        ptrDim 0
        child (AstNamedType
          ident (AstIdent "T")
          genericImpl (AstGenericList mySeq [
          ])
        )
      )
    )
  ]
), sym: ..., tbl: {"T": @[0]}, parent: ..., childSeq: ...)
curr: (ast: (AstIdent "T"), sym: ..., tbl: {:}, parent: ..., childSeq: ...) 0
argSym.get(): (inputFname: "test.scone", name: "T", kind: symGenericDecl, initValAst: none(AstNode), typeInfo: ...)
argSym.get().typeInfo: (main: (inputFname: "test.scone", name: none(string), funcVar: false, ptrDim: 0, arrDim: 0, ast: nil), kind: tiToResolve, myToResolve: ())
----
gotoParentSymTbl: parent != nil: true
testificate: 1
addChildSymTbl: childSeq.len(): 1
addChildSymTbl: post set parent: true 2
addSym: sym: (inputFname: "test.scone", name: "x", kind: symVar, initValAst: none(AstNode), typeInfo: ...)
addSym: tinfo: (main: (inputFname: "test.scone", name: some("T"), funcVar: false, ptrDim: 0, arrDim: 0, ast: (AstNamedType
  ident (AstIdent "T")
  genericImpl (AstGenericList mySeq [
  ])
)), kind: tiToResolve, myToResolve: ())
addsym: testificate: 1
debug: 
curr.parent: (ast: (AstStruct
  ident (AstIdent "Vec2")
  genericDecl (AstGenericList mySeq [
    (AstIdent "T")
  ])
  fieldSeq [
    (AstVarEtcDeclMost
      ident (AstIdent "x")
      type (AstType
        kwVar false
        ptrDim 0
        child (AstNamedType
          ident (AstIdent "T")
          genericImpl (AstGenericList mySeq [
          ])
        )
      )
    )
    (AstVarEtcDeclMost
      ident (AstIdent "y")
      type (AstType
        kwVar false
        ptrDim 0
        child (AstNamedType
          ident (AstIdent "T")
          genericImpl (AstGenericList mySeq [
          ])
        )
      )
    )
  ]
), sym: ..., tbl: {"T": @[0], "x": @[1]}, parent: ..., childSeq: ...)
curr: (ast: (AstIdent "x"), sym: ..., tbl: {:}, parent: ..., childSeq: ...) 0
argSym.get(): (inputFname: "test.scone", name: "x", kind: symVar, initValAst: none(AstNode), typeInfo: ...)
argSym.get().typeInfo: (main: (inputFname: "test.scone", name: some("T"), funcVar: false, ptrDim: 0, arrDim: 0, ast: (AstNamedType
  ident (AstIdent "T")
  genericImpl (AstGenericList mySeq [
  ])
)), kind: tiToResolve, myToResolve: ())
----
gotoParentSymTbl: parent != nil: true
addChildSymTbl: childSeq.len(): 2
addChildSymTbl: post set parent: true 3
addSym: sym: (inputFname: "test.scone", name: "y", kind: symVar, initValAst: none(AstNode), typeInfo: ...)
addSym: tinfo: (main: (inputFname: "test.scone", name: some("T"), funcVar: false, ptrDim: 0, arrDim: 0, ast: (AstNamedType
  ident (AstIdent "T")
  genericImpl (AstGenericList mySeq [
  ])
)), kind: tiToResolve, myToResolve: ())
addsym: testificate: 2
debug: 
curr.parent: (ast: (AstStruct
  ident (AstIdent "Vec2")
  genericDecl (AstGenericList mySeq [
    (AstIdent "T")
  ])
  fieldSeq [
    (AstVarEtcDeclMost
      ident (AstIdent "x")
      type (AstType
        kwVar false
        ptrDim 0
        child (AstNamedType
          ident (AstIdent "T")
          genericImpl (AstGenericList mySeq [
          ])
        )
      )
    )
    (AstVarEtcDeclMost
      ident (AstIdent "y")
      type (AstType
        kwVar false
        ptrDim 0
        child (AstNamedType
          ident (AstIdent "T")
          genericImpl (AstGenericList mySeq [
          ])
        )
      )
    )
  ]
), sym: ..., tbl: {"T": @[0], "x": @[1], "y": @[2]}, parent: ..., childSeq: ...)
curr: (ast: (AstIdent "y"), sym: ..., tbl: {:}, parent: ..., childSeq: ...) 0
argSym.get(): (inputFname: "test.scone", name: "y", kind: symVar, initValAst: none(AstNode), typeInfo: ...)
argSym.get().typeInfo: (main: (inputFname: "test.scone", name: some("T"), funcVar: false, ptrDim: 0, arrDim: 0, ast: (AstNamedType
  ident (AstIdent "T")
  genericImpl (AstGenericList mySeq [
  ])
)), kind: tiToResolve, myToResolve: ())
----
gotoParentSymTbl: parent != nil: true
debug: 
curr.parent: (ast: (AstSrcFile
  module (AstModule ident (AstIdent "myModule"))
  funcDeclSeq [
    (AstDef
      ident (AstIdent "dot")
      genericDecl (AstGenericList mySeq [
        (AstIdent "T")
      ])
      argDeclSeq [
        (AstVarEtcDeclMost
          ident (AstIdent "a")
          type (AstType
            kwVar true
            ptrDim 0
            child (AstNamedType
              ident (AstIdent "Vec2")
              genericImpl (AstGenericList mySeq [
                (AstType
                  kwVar false
                  ptrDim 0
                  child (AstNamedType
                    ident (AstIdent "T")
                    genericImpl (AstGenericList mySeq [
                    ])
                  )
                )
              ])
            )
          )
        )
        (AstVarEtcDeclMost
          ident (AstIdent "b")
          type (AstType
            kwVar true
            ptrDim 0
            child (AstNamedType
              ident (AstIdent "Vec2")
              genericImpl (AstGenericList mySeq [
                (AstType
                  kwVar false
                  ptrDim 0
                  child (AstNamedType
                    ident (AstIdent "T")
                    genericImpl (AstGenericList mySeq [
                    ])
                  )
                )
              ])
            )
          )
        )
      ]
      returnType (AstType
        kwVar false
        ptrDim 0
        child (AstNamedType
          ident (AstIdent "T")
          genericImpl (AstGenericList mySeq [
          ])
        )
      )
      stmtSeq [
        (AstConst
          child (AstVarEtcDeclMost
            ident (AstIdent "result")
            type (AstType
              kwVar false
              ptrDim 0
              child (AstNamedType
                ident (AstIdent "T")
                genericImpl (AstGenericList mySeq [
                ])
              )
            )
          )
          expr (AstBinop
            kind binopPlus
            left (AstBinop
              kind binopMul
              left (AstDot
                left (AstIdent "a")
                right (AstIdent "x")
              )
              right (AstDot
                left (AstIdent "b")
                right (AstIdent "x")
              )
            )
            right (AstBinop
              kind binopMul
              left (AstDot
                left (AstIdent "a")
                right (AstIdent "y")
              )
              right (AstDot
                left (AstIdent "b")
                right (AstIdent "y")
              )
            )
          )
        )
        (AstReturn optExpr (AstIdent "result"))
      ]
    )
    (AstDef
      ident (AstIdent "plus")
      genericDecl (AstGenericList mySeq [
        (AstIdent "T")
      ])
      argDeclSeq [
        (AstVarEtcDeclMost
          ident (AstIdent "a")
          type (AstType
            kwVar true
            ptrDim 0
            child (AstNamedType
              ident (AstIdent "T")
              genericImpl (AstGenericList mySeq [
              ])
            )
          )
        )
        (AstVarEtcDeclMost
          ident (AstIdent "b")
          type (AstType
            kwVar true
            ptrDim 0
            child (AstNamedType
              ident (AstIdent "T")
              genericImpl (AstGenericList mySeq [
              ])
            )
          )
        )
      ]
      returnType (AstType
        kwVar false
        ptrDim 0
        child (AstNamedType
          ident (AstIdent "T")
          genericImpl (AstGenericList mySeq [
          ])
        )
      )
      stmtSeq [
        (AstReturn optExpr (AstBinop
          kind binopPlus
          left (AstIdent "a")
          right (AstIdent "b")
        ))
      ]
    )
    (AstDef
      ident (AstIdent "plus")
      genericDecl (AstGenericList mySeq [
        (AstIdent "T")
      ])
      argDeclSeq [
        (AstVarEtcDeclMost
          ident (AstIdent "a")
          type (AstType
            kwVar true
            ptrDim 0
            child (AstNamedType
              ident (AstIdent "Vec2")
              genericImpl (AstGenericList mySeq [
                (AstType
                  kwVar false
                  ptrDim 0
                  child (AstNamedType
                    ident (AstIdent "T")
                    genericImpl (AstGenericList mySeq [
                    ])
                  )
                )
              ])
            )
          )
        )
        (AstVarEtcDeclMost
          ident (AstIdent "b")
          type (AstType
            kwVar true
            ptrDim 0
            child (AstNamedType
              ident (AstIdent "Vec2")
              genericImpl (AstGenericList mySeq [
                (AstType
                  kwVar false
                  ptrDim 0
                  child (AstNamedType
                    ident (AstIdent "T")
                    genericImpl (AstGenericList mySeq [
                    ])
                  )
                )
              ])
            )
          )
        )
      ]
      returnType (AstType
        kwVar false
        ptrDim 0
        child (AstNamedType
          ident (AstIdent "Vec2")
          genericImpl (AstGenericList mySeq [
            (AstType
              kwVar false
              ptrDim 0
              child (AstNamedType
                ident (AstIdent "T")
                genericImpl (AstGenericList mySeq [
                ])
              )
            )
          ])
        )
      )
      stmtSeq [
        (AstVar
          child (AstVarEtcDeclMost
            ident (AstIdent "result")
            type (AstType
              kwVar false
              ptrDim 0
              child (AstNamedType
                ident (AstIdent "Vec2")
                genericImpl (AstGenericList mySeq [
                  (AstType
                    kwVar false
                    ptrDim 0
                    child (AstNamedType
                      ident (AstIdent "T")
                      genericImpl (AstGenericList mySeq [
                      ])
                    )
                  )
                ])
              )
            )
          )
          optExpr !isSome
        )
        (AstFor
          ident (AstIdent "idx")
          exprPre (AstU64Lit u64Val 0)
          exprPost (AstU64Lit u64Val 2)
          isUntil true
          stmtSeq [
            (AstAssignEtc
              kind assignEtcRegular
              left (AstFuncCall
                ident (AstIdent "at")
                genericImpl (AstGenericList mySeq [
                ])
                argImplSeq [
                  (AstIdent "result")
                  (AstIdent "idx")
                ]
              )
              right (AstBinop
                kind binopPlus
                left (AstFuncCall
                  ident (AstIdent "at")
                  genericImpl (AstGenericList mySeq [
                  ])
                  argImplSeq [
                    (AstIdent "a")
                    (AstIdent "idx")
                  ]
                )
                right (AstFuncCall
                  ident (AstIdent "at")
                  genericImpl (AstGenericList mySeq [
                  ])
                  argImplSeq [
                    (AstIdent "b")
                    (AstIdent "idx")
                  ]
                )
              )
            )
          ]
        )
        (AstReturn optExpr (AstIdent "result"))
      ]
    )
    (AstDef
      ident (AstIdent "times")
      genericDecl (AstGenericList mySeq [
        (AstIdent "T")
      ])
      argDeclSeq [
        (AstVarEtcDeclMost
          ident (AstIdent "a")
          type (AstType
            kwVar false
            ptrDim 0
            child (AstNamedType
              ident (AstIdent "T")
              genericImpl (AstGenericList mySeq [
              ])
            )
          )
        )
        (AstVarEtcDeclMost
          ident (AstIdent "b")
          type (AstType
            kwVar false
            ptrDim 0
            child (AstNamedType
              ident (AstIdent "T")
              genericImpl (AstGenericList mySeq [
              ])
            )
          )
        )
      ]
      returnType (AstType
        kwVar false
        ptrDim 0
        child (AstNamedType
          ident (AstIdent "T")
          genericImpl (AstGenericList mySeq [
          ])
        )
      )
      stmtSeq [
        (AstReturn optExpr (AstBinop
          kind binopMul
          left (AstIdent "a")
          right (AstIdent "b")
        ))
      ]
    )
    (AstDef
      ident (AstIdent "times")
      genericDecl (AstGenericList mySeq [
        (AstIdent "T")
      ])
      argDeclSeq [
        (AstVarEtcDeclMost
          ident (AstIdent "a")
          type (AstType
            kwVar false
            ptrDim 0
            child (AstNamedType
              ident (AstIdent "Vec2")
              genericImpl (AstGenericList mySeq [
                (AstType
                  kwVar false
                  ptrDim 0
                  child (AstNamedType
                    ident (AstIdent "T")
                    genericImpl (AstGenericList mySeq [
                    ])
                  )
                )
              ])
            )
          )
        )
        (AstVarEtcDeclMost
          ident (AstIdent "scale")
          type (AstType
            kwVar false
            ptrDim 0
            child (AstNamedType
              ident (AstIdent "T")
              genericImpl (AstGenericList mySeq [
              ])
            )
          )
        )
      ]
      returnType (AstType
        kwVar false
        ptrDim 0
        child (AstNamedType
          ident (AstIdent "Vec2")
          genericImpl (AstGenericList mySeq [
            (AstType
              kwVar false
              ptrDim 0
              child (AstNamedType
                ident (AstIdent "T")
                genericImpl (AstGenericList mySeq [
                ])
              )
            )
          ])
        )
      )
      stmtSeq [
        (AstVar
          child (AstVarEtcDeclMost
            ident (AstIdent "result")
            type (AstType
              kwVar false
              ptrDim 0
              child (AstNamedType
                ident (AstIdent "Vec2")
                genericImpl (AstGenericList mySeq [
                  (AstType
                    kwVar false
                    ptrDim 0
                    child (AstNamedType
                      ident (AstIdent "T")
                      genericImpl (AstGenericList mySeq [
                      ])
                    )
                  )
                ])
              )
            )
          )
          optExpr !isSome
        )
        (AstFor
          ident (AstIdent "idx")
          exprPre (AstU64Lit u64Val 0)
          exprPost (AstU64Lit u64Val 2)
          isUntil true
          stmtSeq [
            (AstAssignEtc
              kind assignEtcRegular
              left (AstFuncCall
                ident (AstIdent "at")
                genericImpl (AstGenericList mySeq [
                ])
                argImplSeq [
                  (AstIdent "result")
                  (AstIdent "idx")
                ]
              )
              right (AstFuncCall
                ident (AstIdent "times")
                genericImpl (AstGenericList mySeq [
                ])
                argImplSeq [
                  (AstFuncCall
                    ident (AstIdent "at")
                    genericImpl (AstGenericList mySeq [
                    ])
                    argImplSeq [
                      (AstIdent "a")
                      (AstIdent "idx")
                    ]
                  )
                  (AstIdent "scale")
                ]
              )
            )
          ]
        )
        (AstReturn optExpr (AstIdent "result"))
      ]
    )
    (AstDef
      ident (AstIdent "at")
      genericDecl (AstGenericList mySeq [
        (AstIdent "T")
      ])
      argDeclSeq [
        (AstVarEtcDeclMost
          ident (AstIdent "self")
          type (AstType
            kwVar true
            ptrDim 0
            child (AstNamedType
              ident (AstIdent "Vec2")
              genericImpl (AstGenericList mySeq [
                (AstType
                  kwVar false
                  ptrDim 0
                  child (AstNamedType
                    ident (AstIdent "T")
                    genericImpl (AstGenericList mySeq [
                    ])
                  )
                )
              ])
            )
          )
        )
        (AstVarEtcDeclMost
          ident (AstIdent "idx")
          type (AstType
            kwVar false
            ptrDim 0
            child (AstBasicType kind basicTypeU32)
          )
        )
      ]
      returnType (AstType
        kwVar true
        ptrDim 0
        child (AstNamedType
          ident (AstIdent "T")
          genericImpl (AstGenericList mySeq [
          ])
        )
      )
      stmtSeq [
        (AstIf
          expr (AstBinop
            kind binopCmpEq
            left (AstIdent "idx")
            right (AstU64Lit u64Val 0)
          )
          stmtSeq [
            (AstReturn optExpr (AstDot
              left (AstIdent "self")
              right (AstIdent "x")
            ))
          ]
          elifSeq [
          ]
          optElse (AstElse stmtSeq [
            (AstReturn optExpr (AstDot
              left (AstIdent "self")
              right (AstIdent "y")
            ))
          ])
        )
      ]
    )
    (AstDef
      ident (AstIdent "sum")
      genericDecl (AstGenericList mySeq [
        (AstIdent "T")
      ])
      argDeclSeq [
        (AstVarEtcDeclMost
          ident (AstIdent "toSum")
          type (AstType
            kwVar true
            ptrDim 0
            child (AstArray
              dim (AstBinop
                kind binopMul
                left (AstU64Lit u64Val 8)
                right (AstU64Lit u64Val 3)
              )
              elemType (AstType
                kwVar false
                ptrDim 0
                child (AstNamedType
                  ident (AstIdent "Vec2")
                  genericImpl (AstGenericList mySeq [
                    (AstType
                      kwVar false
                      ptrDim 0
                      child (AstNamedType
                        ident (AstIdent "T")
                        genericImpl (AstGenericList mySeq [
                        ])
                      )
                    )
                  ])
                )
              )
            )
          )
        )
      ]
      returnType (AstType
        kwVar false
        ptrDim 0
        child (AstNamedType
          ident (AstIdent "Vec2")
          genericImpl (AstGenericList mySeq [
            (AstType
              kwVar false
              ptrDim 0
              child (AstNamedType
                ident (AstIdent "T")
                genericImpl (AstGenericList mySeq [
                ])
              )
            )
          ])
        )
      )
      stmtSeq [
        (AstVar
          child (AstVarEtcDeclMost
            ident (AstIdent "result")
            type (AstType
              kwVar false
              ptrDim 0
              child (AstNamedType
                ident (AstIdent "Vec2")
                genericImpl (AstGenericList mySeq [
                  (AstType
                    kwVar false
                    ptrDim 0
                    child (AstNamedType
                      ident (AstIdent "T")
                      genericImpl (AstGenericList mySeq [
                      ])
                    )
                  )
                ])
              )
            )
          )
          optExpr !isSome
        )
        (AstFor
          ident (AstIdent "jdx")
          exprPre (AstU64Lit u64Val 0)
          exprPost (AstBinop
            kind binopMul
            left (AstU64Lit u64Val 8)
            right (AstU64Lit u64Val 3)
          )
          isUntil true
          stmtSeq [
            (AstIf
              expr (AstBinop
                kind binopCmpEq
                left (AstIdent "jdx")
                right (AstU64Lit u64Val 0)
              )
              stmtSeq [
                (AstFor
                  ident (AstIdent "idx")
                  exprPre (AstU64Lit u64Val 0)
                  exprPost (AstU64Lit u64Val 2)
                  isUntil true
                  stmtSeq [
                    (AstAssignEtc
                      kind assignEtcRegular
                      left (AstFuncCall
                        ident (AstIdent "at")
                        genericImpl (AstGenericList mySeq [
                        ])
                        argImplSeq [
                          (AstIdent "result")
                          (AstIdent "idx")
                        ]
                      )
                      right (AstFuncCall
                        ident (AstIdent "at")
                        genericImpl (AstGenericList mySeq [
                        ])
                        argImplSeq [
                          (AstFuncCall
                            ident (AstIdent "toSum")
                            genericImpl (AstGenericList mySeq [
                            ])
                            argImplSeq [
                              (AstU64Lit u64Val 0)
                            ]
                          )
                          (AstIdent "idx")
                        ]
                      )
                    )
                  ]
                )
              ]
              elifSeq [
              ]
              optElse (AstElse stmtSeq [
                (AstAssignEtc
                  kind assignEtcRegular
                  left (AstIdent "result")
                  right (AstFuncCall
                    ident (AstIdent "plus")
                    genericImpl (AstGenericList mySeq [
                    ])
                    argImplSeq [
                      (AstIdent "result")
                      (AstFuncCall
                        ident (AstIdent "toSum")
                        genericImpl (AstGenericList mySeq [
                        ])
                        argImplSeq [
                          (AstIdent "jdx")
                        ]
                      )
                    ]
                  )
                )
              ])
            )
          ]
        )
        (AstReturn optExpr (AstIdent "result"))
      ]
    )
  ]
  structDeclSeq [
    (AstStruct
      ident (AstIdent "Vec2")
      genericDecl (AstGenericList mySeq [
        (AstIdent "T")
      ])
      fieldSeq [
        (AstVarEtcDeclMost
          ident (AstIdent "x")
          type (AstType
            kwVar false
            ptrDim 0
            child (AstNamedType
              ident (AstIdent "T")
              genericImpl (AstGenericList mySeq [
              ])
            )
          )
        )
        (AstVarEtcDeclMost
          ident (AstIdent "y")
          type (AstType
            kwVar false
            ptrDim 0
            child (AstNamedType
              ident (AstIdent "T")
              genericImpl (AstGenericList mySeq [
              ])
            )
          )
        )
      ]
    )
    (AstStruct
      ident (AstIdent "Vec2Ptr")
      genericDecl (AstGenericList mySeq [
        (AstIdent "T")
      ])
      fieldSeq [
        (AstVarEtcDeclMost
          ident (AstIdent "x")
          type (AstType
            kwVar false
            ptrDim 1
            child (AstNamedType
              ident (AstIdent "T")
              genericImpl (AstGenericList mySeq [
              ])
            )
          )
        )
        (AstVarEtcDeclMost
          ident (AstIdent "y")
          type (AstType
            kwVar false
            ptrDim 1
            child (AstNamedType
              ident (AstIdent "T")
              genericImpl (AstGenericList mySeq [
              ])
            )
          )
        )
      ]
    )
    (AstStruct
      ident (AstIdent "Vec3Arr3Vec2")
      genericDecl (AstGenericList mySeq [
        (AstIdent "T")
      ])
      fieldSeq [
        (AstVarEtcDeclMost
          ident (AstIdent "x")
          type (AstType
            kwVar false
            ptrDim 0
            child (AstArray
              dim (AstU64Lit u64Val 3)
              elemType (AstType
                kwVar false
                ptrDim 0
                child (AstNamedType
                  ident (AstIdent "Vec2")
                  genericImpl (AstGenericList mySeq [
                    (AstType
                      kwVar false
                      ptrDim 0
                      child (AstNamedType
                        ident (AstIdent "T")
                        genericImpl (AstGenericList mySeq [
                        ])
                      )
                    )
                  ])
                )
              )
            )
          )
        )
        (AstVarEtcDeclMost
          ident (AstIdent "y")
          type (AstType
            kwVar false
            ptrDim 0
            child (AstArray
              dim (AstU64Lit u64Val 3)
              elemType (AstType
                kwVar false
                ptrDim 0
                child (AstNamedType
                  ident (AstIdent "Vec2")
                  genericImpl (AstGenericList mySeq [
                    (AstType
                      kwVar false
                      ptrDim 0
                      child (AstNamedType
                        ident (AstIdent "T")
                        genericImpl (AstGenericList mySeq [
                        ])
                      )
                    )
                  ])
                )
              )
            )
          )
        )
        (AstVarEtcDeclMost
          ident (AstIdent "z")
          type (AstType
            kwVar false
            ptrDim 0
            child (AstArray
              dim (AstU64Lit u64Val 3)
              elemType (AstType
                kwVar false
                ptrDim 0
                child (AstNamedType
                  ident (AstIdent "Vec2")
                  genericImpl (AstGenericList mySeq [
                    (AstType
                      kwVar false
                      ptrDim 0
                      child (AstNamedType
                        ident (AstIdent "T")
                        genericImpl (AstGenericList mySeq [
                        ])
                      )
                    )
                  ])
                )
              )
            )
          )
        )
      ]
    )
  ]
), sym: ..., tbl: {"Vec2": @[0]}, parent: ..., childSeq: ...)
curr: (ast: (AstStruct
  ident (AstIdent "Vec2")
  genericDecl (AstGenericList mySeq [
    (AstIdent "T")
  ])
  fieldSeq [
    (AstVarEtcDeclMost
      ident (AstIdent "x")
      type (AstType
        kwVar false
        ptrDim 0
        child (AstNamedType
          ident (AstIdent "T")
          genericImpl (AstGenericList mySeq [
          ])
        )
      )
    )
    (AstVarEtcDeclMost
      ident (AstIdent "y")
      type (AstType
        kwVar false
        ptrDim 0
        child (AstNamedType
          ident (AstIdent "T")
          genericImpl (AstGenericList mySeq [
          ])
        )
      )
    )
  ]
), sym: ..., tbl: {"T": @[0], "x": @[1], "y": @[2]}, parent: ..., childSeq: ...) 3
argSym.get(): (inputFname: "test.scone", name: "Vec2", kind: symStructDecl, initValAst: none(AstNode), typeInfo: ...)
argSym.get().typeInfo: (main: (inputFname: "test.scone", name: some("Vec2"), funcVar: false, ptrDim: 0, arrDim: 0, ast: nil), kind: tiStruct, myStruct: (genericIdxSeq: @[], fieldIdxSeq: @[]))
----
gotoParentSymTbl: parent != nil: true
addChildSymTbl: childSeq.len(): 1
addChildSymTbl: post set parent: true 2
addSym: sym: (inputFname: "test.scone", name: "Vec2Ptr", kind: symStructDecl, initValAst: none(AstNode), typeInfo: ...)
addSym: tinfo: (main: (inputFname: "test.scone", name: some("Vec2Ptr"), funcVar: false, ptrDim: 0, arrDim: 0, ast: nil), kind: tiStruct, myStruct: (genericIdxSeq: @[], fieldIdxSeq: @[]))
addsym: testificate: 1
addChildSymTbl: childSeq.len(): 0
addChildSymTbl: post set parent: true 1
addSym: sym: (inputFname: "test.scone", name: "T", kind: symGenericDecl, initValAst: none(AstNode), typeInfo: ...)
addSym: tinfo: (main: (inputFname: "test.scone", name: none(string), funcVar: false, ptrDim: 0, arrDim: 0, ast: nil), kind: tiToResolve, myToResolve: ())
addsym: testificate: 0
debug: 
curr.parent: (ast: (AstStruct
  ident (AstIdent "Vec2Ptr")
  genericDecl (AstGenericList mySeq [
    (AstIdent "T")
  ])
  fieldSeq [
    (AstVarEtcDeclMost
      ident (AstIdent "x")
      type (AstType
        kwVar false
        ptrDim 1
        child (AstNamedType
          ident (AstIdent "T")
          genericImpl (AstGenericList mySeq [
          ])
        )
      )
    )
    (AstVarEtcDeclMost
      ident (AstIdent "y")
      type (AstType
        kwVar false
        ptrDim 1
        child (AstNamedType
          ident (AstIdent "T")
          genericImpl (AstGenericList mySeq [
          ])
        )
      )
    )
  ]
), sym: ..., tbl: {"T": @[0]}, parent: ..., childSeq: ...)
curr: (ast: (AstIdent "T"), sym: ..., tbl: {:}, parent: ..., childSeq: ...) 0
argSym.get(): (inputFname: "test.scone", name: "T", kind: symGenericDecl, initValAst: none(AstNode), typeInfo: ...)
argSym.get().typeInfo: (main: (inputFname: "test.scone", name: none(string), funcVar: false, ptrDim: 0, arrDim: 0, ast: nil), kind: tiToResolve, myToResolve: ())
----
gotoParentSymTbl: parent != nil: true
testificate: 2
addChildSymTbl: childSeq.len(): 1
addChildSymTbl: post set parent: true 2
addSym: sym: (inputFname: "test.scone", name: "x", kind: symVar, initValAst: none(AstNode), typeInfo: ...)
addSym: tinfo: (main: (inputFname: "test.scone", name: some("T"), funcVar: false, ptrDim: 1, arrDim: 0, ast: (AstNamedType
  ident (AstIdent "T")
  genericImpl (AstGenericList mySeq [
  ])
)), kind: tiToResolve, myToResolve: ())
addsym: testificate: 1
debug: 
curr.parent: (ast: (AstStruct
  ident (AstIdent "Vec2Ptr")
  genericDecl (AstGenericList mySeq [
    (AstIdent "T")
  ])
  fieldSeq [
    (AstVarEtcDeclMost
      ident (AstIdent "x")
      type (AstType
        kwVar false
        ptrDim 1
        child (AstNamedType
          ident (AstIdent "T")
          genericImpl (AstGenericList mySeq [
          ])
        )
      )
    )
    (AstVarEtcDeclMost
      ident (AstIdent "y")
      type (AstType
        kwVar false
        ptrDim 1
        child (AstNamedType
          ident (AstIdent "T")
          genericImpl (AstGenericList mySeq [
          ])
        )
      )
    )
  ]
), sym: ..., tbl: {"T": @[0], "x": @[1]}, parent: ..., childSeq: ...)
curr: (ast: (AstIdent "x"), sym: ..., tbl: {:}, parent: ..., childSeq: ...) 0
argSym.get(): (inputFname: "test.scone", name: "x", kind: symVar, initValAst: none(AstNode), typeInfo: ...)
argSym.get().typeInfo: (main: (inputFname: "test.scone", name: some("T"), funcVar: false, ptrDim: 1, arrDim: 0, ast: (AstNamedType
  ident (AstIdent "T")
  genericImpl (AstGenericList mySeq [
  ])
)), kind: tiToResolve, myToResolve: ())
----
gotoParentSymTbl: parent != nil: true
addChildSymTbl: childSeq.len(): 2
addChildSymTbl: post set parent: true 3
addSym: sym: (inputFname: "test.scone", name: "y", kind: symVar, initValAst: none(AstNode), typeInfo: ...)
addSym: tinfo: (main: (inputFname: "test.scone", name: some("T"), funcVar: false, ptrDim: 1, arrDim: 0, ast: (AstNamedType
  ident (AstIdent "T")
  genericImpl (AstGenericList mySeq [
  ])
)), kind: tiToResolve, myToResolve: ())
addsym: testificate: 2
debug: 
curr.parent: (ast: (AstStruct
  ident (AstIdent "Vec2Ptr")
  genericDecl (AstGenericList mySeq [
    (AstIdent "T")
  ])
  fieldSeq [
    (AstVarEtcDeclMost
      ident (AstIdent "x")
      type (AstType
        kwVar false
        ptrDim 1
        child (AstNamedType
          ident (AstIdent "T")
          genericImpl (AstGenericList mySeq [
          ])
        )
      )
    )
    (AstVarEtcDeclMost
      ident (AstIdent "y")
      type (AstType
        kwVar false
        ptrDim 1
        child (AstNamedType
          ident (AstIdent "T")
          genericImpl (AstGenericList mySeq [
          ])
        )
      )
    )
  ]
), sym: ..., tbl: {"T": @[0], "x": @[1], "y": @[2]}, parent: ..., childSeq: ...)
curr: (ast: (AstIdent "y"), sym: ..., tbl: {:}, parent: ..., childSeq: ...) 0
argSym.get(): (inputFname: "test.scone", name: "y", kind: symVar, initValAst: none(AstNode), typeInfo: ...)
argSym.get().typeInfo: (main: (inputFname: "test.scone", name: some("T"), funcVar: false, ptrDim: 1, arrDim: 0, ast: (AstNamedType
  ident (AstIdent "T")
  genericImpl (AstGenericList mySeq [
  ])
)), kind: tiToResolve, myToResolve: ())
----
gotoParentSymTbl: parent != nil: true
debug: 
curr.parent: (ast: (AstSrcFile
  module (AstModule ident (AstIdent "myModule"))
  funcDeclSeq [
    (AstDef
      ident (AstIdent "dot")
      genericDecl (AstGenericList mySeq [
        (AstIdent "T")
      ])
      argDeclSeq [
        (AstVarEtcDeclMost
          ident (AstIdent "a")
          type (AstType
            kwVar true
            ptrDim 0
            child (AstNamedType
              ident (AstIdent "Vec2")
              genericImpl (AstGenericList mySeq [
                (AstType
                  kwVar false
                  ptrDim 0
                  child (AstNamedType
                    ident (AstIdent "T")
                    genericImpl (AstGenericList mySeq [
                    ])
                  )
                )
              ])
            )
          )
        )
        (AstVarEtcDeclMost
          ident (AstIdent "b")
          type (AstType
            kwVar true
            ptrDim 0
            child (AstNamedType
              ident (AstIdent "Vec2")
              genericImpl (AstGenericList mySeq [
                (AstType
                  kwVar false
                  ptrDim 0
                  child (AstNamedType
                    ident (AstIdent "T")
                    genericImpl (AstGenericList mySeq [
                    ])
                  )
                )
              ])
            )
          )
        )
      ]
      returnType (AstType
        kwVar false
        ptrDim 0
        child (AstNamedType
          ident (AstIdent "T")
          genericImpl (AstGenericList mySeq [
          ])
        )
      )
      stmtSeq [
        (AstConst
          child (AstVarEtcDeclMost
            ident (AstIdent "result")
            type (AstType
              kwVar false
              ptrDim 0
              child (AstNamedType
                ident (AstIdent "T")
                genericImpl (AstGenericList mySeq [
                ])
              )
            )
          )
          expr (AstBinop
            kind binopPlus
            left (AstBinop
              kind binopMul
              left (AstDot
                left (AstIdent "a")
                right (AstIdent "x")
              )
              right (AstDot
                left (AstIdent "b")
                right (AstIdent "x")
              )
            )
            right (AstBinop
              kind binopMul
              left (AstDot
                left (AstIdent "a")
                right (AstIdent "y")
              )
              right (AstDot
                left (AstIdent "b")
                right (AstIdent "y")
              )
            )
          )
        )
        (AstReturn optExpr (AstIdent "result"))
      ]
    )
    (AstDef
      ident (AstIdent "plus")
      genericDecl (AstGenericList mySeq [
        (AstIdent "T")
      ])
      argDeclSeq [
        (AstVarEtcDeclMost
          ident (AstIdent "a")
          type (AstType
            kwVar true
            ptrDim 0
            child (AstNamedType
              ident (AstIdent "T")
              genericImpl (AstGenericList mySeq [
              ])
            )
          )
        )
        (AstVarEtcDeclMost
          ident (AstIdent "b")
          type (AstType
            kwVar true
            ptrDim 0
            child (AstNamedType
              ident (AstIdent "T")
              genericImpl (AstGenericList mySeq [
              ])
            )
          )
        )
      ]
      returnType (AstType
        kwVar false
        ptrDim 0
        child (AstNamedType
          ident (AstIdent "T")
          genericImpl (AstGenericList mySeq [
          ])
        )
      )
      stmtSeq [
        (AstReturn optExpr (AstBinop
          kind binopPlus
          left (AstIdent "a")
          right (AstIdent "b")
        ))
      ]
    )
    (AstDef
      ident (AstIdent "plus")
      genericDecl (AstGenericList mySeq [
        (AstIdent "T")
      ])
      argDeclSeq [
        (AstVarEtcDeclMost
          ident (AstIdent "a")
          type (AstType
            kwVar true
            ptrDim 0
            child (AstNamedType
              ident (AstIdent "Vec2")
              genericImpl (AstGenericList mySeq [
                (AstType
                  kwVar false
                  ptrDim 0
                  child (AstNamedType
                    ident (AstIdent "T")
                    genericImpl (AstGenericList mySeq [
                    ])
                  )
                )
              ])
            )
          )
        )
        (AstVarEtcDeclMost
          ident (AstIdent "b")
          type (AstType
            kwVar true
            ptrDim 0
            child (AstNamedType
              ident (AstIdent "Vec2")
              genericImpl (AstGenericList mySeq [
                (AstType
                  kwVar false
                  ptrDim 0
                  child (AstNamedType
                    ident (AstIdent "T")
                    genericImpl (AstGenericList mySeq [
                    ])
                  )
                )
              ])
            )
          )
        )
      ]
      returnType (AstType
        kwVar false
        ptrDim 0
        child (AstNamedType
          ident (AstIdent "Vec2")
          genericImpl (AstGenericList mySeq [
            (AstType
              kwVar false
              ptrDim 0
              child (AstNamedType
                ident (AstIdent "T")
                genericImpl (AstGenericList mySeq [
                ])
              )
            )
          ])
        )
      )
      stmtSeq [
        (AstVar
          child (AstVarEtcDeclMost
            ident (AstIdent "result")
            type (AstType
              kwVar false
              ptrDim 0
              child (AstNamedType
                ident (AstIdent "Vec2")
                genericImpl (AstGenericList mySeq [
                  (AstType
                    kwVar false
                    ptrDim 0
                    child (AstNamedType
                      ident (AstIdent "T")
                      genericImpl (AstGenericList mySeq [
                      ])
                    )
                  )
                ])
              )
            )
          )
          optExpr !isSome
        )
        (AstFor
          ident (AstIdent "idx")
          exprPre (AstU64Lit u64Val 0)
          exprPost (AstU64Lit u64Val 2)
          isUntil true
          stmtSeq [
            (AstAssignEtc
              kind assignEtcRegular
              left (AstFuncCall
                ident (AstIdent "at")
                genericImpl (AstGenericList mySeq [
                ])
                argImplSeq [
                  (AstIdent "result")
                  (AstIdent "idx")
                ]
              )
              right (AstBinop
                kind binopPlus
                left (AstFuncCall
                  ident (AstIdent "at")
                  genericImpl (AstGenericList mySeq [
                  ])
                  argImplSeq [
                    (AstIdent "a")
                    (AstIdent "idx")
                  ]
                )
                right (AstFuncCall
                  ident (AstIdent "at")
                  genericImpl (AstGenericList mySeq [
                  ])
                  argImplSeq [
                    (AstIdent "b")
                    (AstIdent "idx")
                  ]
                )
              )
            )
          ]
        )
        (AstReturn optExpr (AstIdent "result"))
      ]
    )
    (AstDef
      ident (AstIdent "times")
      genericDecl (AstGenericList mySeq [
        (AstIdent "T")
      ])
      argDeclSeq [
        (AstVarEtcDeclMost
          ident (AstIdent "a")
          type (AstType
            kwVar false
            ptrDim 0
            child (AstNamedType
              ident (AstIdent "T")
              genericImpl (AstGenericList mySeq [
              ])
            )
          )
        )
        (AstVarEtcDeclMost
          ident (AstIdent "b")
          type (AstType
            kwVar false
            ptrDim 0
            child (AstNamedType
              ident (AstIdent "T")
              genericImpl (AstGenericList mySeq [
              ])
            )
          )
        )
      ]
      returnType (AstType
        kwVar false
        ptrDim 0
        child (AstNamedType
          ident (AstIdent "T")
          genericImpl (AstGenericList mySeq [
          ])
        )
      )
      stmtSeq [
        (AstReturn optExpr (AstBinop
          kind binopMul
          left (AstIdent "a")
          right (AstIdent "b")
        ))
      ]
    )
    (AstDef
      ident (AstIdent "times")
      genericDecl (AstGenericList mySeq [
        (AstIdent "T")
      ])
      argDeclSeq [
        (AstVarEtcDeclMost
          ident (AstIdent "a")
          type (AstType
            kwVar false
            ptrDim 0
            child (AstNamedType
              ident (AstIdent "Vec2")
              genericImpl (AstGenericList mySeq [
                (AstType
                  kwVar false
                  ptrDim 0
                  child (AstNamedType
                    ident (AstIdent "T")
                    genericImpl (AstGenericList mySeq [
                    ])
                  )
                )
              ])
            )
          )
        )
        (AstVarEtcDeclMost
          ident (AstIdent "scale")
          type (AstType
            kwVar false
            ptrDim 0
            child (AstNamedType
              ident (AstIdent "T")
              genericImpl (AstGenericList mySeq [
              ])
            )
          )
        )
      ]
      returnType (AstType
        kwVar false
        ptrDim 0
        child (AstNamedType
          ident (AstIdent "Vec2")
          genericImpl (AstGenericList mySeq [
            (AstType
              kwVar false
              ptrDim 0
              child (AstNamedType
                ident (AstIdent "T")
                genericImpl (AstGenericList mySeq [
                ])
              )
            )
          ])
        )
      )
      stmtSeq [
        (AstVar
          child (AstVarEtcDeclMost
            ident (AstIdent "result")
            type (AstType
              kwVar false
              ptrDim 0
              child (AstNamedType
                ident (AstIdent "Vec2")
                genericImpl (AstGenericList mySeq [
                  (AstType
                    kwVar false
                    ptrDim 0
                    child (AstNamedType
                      ident (AstIdent "T")
                      genericImpl (AstGenericList mySeq [
                      ])
                    )
                  )
                ])
              )
            )
          )
          optExpr !isSome
        )
        (AstFor
          ident (AstIdent "idx")
          exprPre (AstU64Lit u64Val 0)
          exprPost (AstU64Lit u64Val 2)
          isUntil true
          stmtSeq [
            (AstAssignEtc
              kind assignEtcRegular
              left (AstFuncCall
                ident (AstIdent "at")
                genericImpl (AstGenericList mySeq [
                ])
                argImplSeq [
                  (AstIdent "result")
                  (AstIdent "idx")
                ]
              )
              right (AstFuncCall
                ident (AstIdent "times")
                genericImpl (AstGenericList mySeq [
                ])
                argImplSeq [
                  (AstFuncCall
                    ident (AstIdent "at")
                    genericImpl (AstGenericList mySeq [
                    ])
                    argImplSeq [
                      (AstIdent "a")
                      (AstIdent "idx")
                    ]
                  )
                  (AstIdent "scale")
                ]
              )
            )
          ]
        )
        (AstReturn optExpr (AstIdent "result"))
      ]
    )
    (AstDef
      ident (AstIdent "at")
      genericDecl (AstGenericList mySeq [
        (AstIdent "T")
      ])
      argDeclSeq [
        (AstVarEtcDeclMost
          ident (AstIdent "self")
          type (AstType
            kwVar true
            ptrDim 0
            child (AstNamedType
              ident (AstIdent "Vec2")
              genericImpl (AstGenericList mySeq [
                (AstType
                  kwVar false
                  ptrDim 0
                  child (AstNamedType
                    ident (AstIdent "T")
                    genericImpl (AstGenericList mySeq [
                    ])
                  )
                )
              ])
            )
          )
        )
        (AstVarEtcDeclMost
          ident (AstIdent "idx")
          type (AstType
            kwVar false
            ptrDim 0
            child (AstBasicType kind basicTypeU32)
          )
        )
      ]
      returnType (AstType
        kwVar true
        ptrDim 0
        child (AstNamedType
          ident (AstIdent "T")
          genericImpl (AstGenericList mySeq [
          ])
        )
      )
      stmtSeq [
        (AstIf
          expr (AstBinop
            kind binopCmpEq
            left (AstIdent "idx")
            right (AstU64Lit u64Val 0)
          )
          stmtSeq [
            (AstReturn optExpr (AstDot
              left (AstIdent "self")
              right (AstIdent "x")
            ))
          ]
          elifSeq [
          ]
          optElse (AstElse stmtSeq [
            (AstReturn optExpr (AstDot
              left (AstIdent "self")
              right (AstIdent "y")
            ))
          ])
        )
      ]
    )
    (AstDef
      ident (AstIdent "sum")
      genericDecl (AstGenericList mySeq [
        (AstIdent "T")
      ])
      argDeclSeq [
        (AstVarEtcDeclMost
          ident (AstIdent "toSum")
          type (AstType
            kwVar true
            ptrDim 0
            child (AstArray
              dim (AstBinop
                kind binopMul
                left (AstU64Lit u64Val 8)
                right (AstU64Lit u64Val 3)
              )
              elemType (AstType
                kwVar false
                ptrDim 0
                child (AstNamedType
                  ident (AstIdent "Vec2")
                  genericImpl (AstGenericList mySeq [
                    (AstType
                      kwVar false
                      ptrDim 0
                      child (AstNamedType
                        ident (AstIdent "T")
                        genericImpl (AstGenericList mySeq [
                        ])
                      )
                    )
                  ])
                )
              )
            )
          )
        )
      ]
      returnType (AstType
        kwVar false
        ptrDim 0
        child (AstNamedType
          ident (AstIdent "Vec2")
          genericImpl (AstGenericList mySeq [
            (AstType
              kwVar false
              ptrDim 0
              child (AstNamedType
                ident (AstIdent "T")
                genericImpl (AstGenericList mySeq [
                ])
              )
            )
          ])
        )
      )
      stmtSeq [
        (AstVar
          child (AstVarEtcDeclMost
            ident (AstIdent "result")
            type (AstType
              kwVar false
              ptrDim 0
              child (AstNamedType
                ident (AstIdent "Vec2")
                genericImpl (AstGenericList mySeq [
                  (AstType
                    kwVar false
                    ptrDim 0
                    child (AstNamedType
                      ident (AstIdent "T")
                      genericImpl (AstGenericList mySeq [
                      ])
                    )
                  )
                ])
              )
            )
          )
          optExpr !isSome
        )
        (AstFor
          ident (AstIdent "jdx")
          exprPre (AstU64Lit u64Val 0)
          exprPost (AstBinop
            kind binopMul
            left (AstU64Lit u64Val 8)
            right (AstU64Lit u64Val 3)
          )
          isUntil true
          stmtSeq [
            (AstIf
              expr (AstBinop
                kind binopCmpEq
                left (AstIdent "jdx")
                right (AstU64Lit u64Val 0)
              )
              stmtSeq [
                (AstFor
                  ident (AstIdent "idx")
                  exprPre (AstU64Lit u64Val 0)
                  exprPost (AstU64Lit u64Val 2)
                  isUntil true
                  stmtSeq [
                    (AstAssignEtc
                      kind assignEtcRegular
                      left (AstFuncCall
                        ident (AstIdent "at")
                        genericImpl (AstGenericList mySeq [
                        ])
                        argImplSeq [
                          (AstIdent "result")
                          (AstIdent "idx")
                        ]
                      )
                      right (AstFuncCall
                        ident (AstIdent "at")
                        genericImpl (AstGenericList mySeq [
                        ])
                        argImplSeq [
                          (AstFuncCall
                            ident (AstIdent "toSum")
                            genericImpl (AstGenericList mySeq [
                            ])
                            argImplSeq [
                              (AstU64Lit u64Val 0)
                            ]
                          )
                          (AstIdent "idx")
                        ]
                      )
                    )
                  ]
                )
              ]
              elifSeq [
              ]
              optElse (AstElse stmtSeq [
                (AstAssignEtc
                  kind assignEtcRegular
                  left (AstIdent "result")
                  right (AstFuncCall
                    ident (AstIdent "plus")
                    genericImpl (AstGenericList mySeq [
                    ])
                    argImplSeq [
                      (AstIdent "result")
                      (AstFuncCall
                        ident (AstIdent "toSum")
                        genericImpl (AstGenericList mySeq [
                        ])
                        argImplSeq [
                          (AstIdent "jdx")
                        ]
                      )
                    ]
                  )
                )
              ])
            )
          ]
        )
        (AstReturn optExpr (AstIdent "result"))
      ]
    )
  ]
  structDeclSeq [
    (AstStruct
      ident (AstIdent "Vec2")
      genericDecl (AstGenericList mySeq [
        (AstIdent "T")
      ])
      fieldSeq [
        (AstVarEtcDeclMost
          ident (AstIdent "x")
          type (AstType
            kwVar false
            ptrDim 0
            child (AstNamedType
              ident (AstIdent "T")
              genericImpl (AstGenericList mySeq [
              ])
            )
          )
        )
        (AstVarEtcDeclMost
          ident (AstIdent "y")
          type (AstType
            kwVar false
            ptrDim 0
            child (AstNamedType
              ident (AstIdent "T")
              genericImpl (AstGenericList mySeq [
              ])
            )
          )
        )
      ]
    )
    (AstStruct
      ident (AstIdent "Vec2Ptr")
      genericDecl (AstGenericList mySeq [
        (AstIdent "T")
      ])
      fieldSeq [
        (AstVarEtcDeclMost
          ident (AstIdent "x")
          type (AstType
            kwVar false
            ptrDim 1
            child (AstNamedType
              ident (AstIdent "T")
              genericImpl (AstGenericList mySeq [
              ])
            )
          )
        )
        (AstVarEtcDeclMost
          ident (AstIdent "y")
          type (AstType
            kwVar false
            ptrDim 1
            child (AstNamedType
              ident (AstIdent "T")
              genericImpl (AstGenericList mySeq [
              ])
            )
          )
        )
      ]
    )
    (AstStruct
      ident (AstIdent "Vec3Arr3Vec2")
      genericDecl (AstGenericList mySeq [
        (AstIdent "T")
      ])
      fieldSeq [
        (AstVarEtcDeclMost
          ident (AstIdent "x")
          type (AstType
            kwVar false
            ptrDim 0
            child (AstArray
              dim (AstU64Lit u64Val 3)
              elemType (AstType
                kwVar false
                ptrDim 0
                child (AstNamedType
                  ident (AstIdent "Vec2")
                  genericImpl (AstGenericList mySeq [
                    (AstType
                      kwVar false
                      ptrDim 0
                      child (AstNamedType
                        ident (AstIdent "T")
                        genericImpl (AstGenericList mySeq [
                        ])
                      )
                    )
                  ])
                )
              )
            )
          )
        )
        (AstVarEtcDeclMost
          ident (AstIdent "y")
          type (AstType
            kwVar false
            ptrDim 0
            child (AstArray
              dim (AstU64Lit u64Val 3)
              elemType (AstType
                kwVar false
                ptrDim 0
                child (AstNamedType
                  ident (AstIdent "Vec2")
                  genericImpl (AstGenericList mySeq [
                    (AstType
                      kwVar false
                      ptrDim 0
                      child (AstNamedType
                        ident (AstIdent "T")
                        genericImpl (AstGenericList mySeq [
                        ])
                      )
                    )
                  ])
                )
              )
            )
          )
        )
        (AstVarEtcDeclMost
          ident (AstIdent "z")
          type (AstType
            kwVar false
            ptrDim 0
            child (AstArray
              dim (AstU64Lit u64Val 3)
              elemType (AstType
                kwVar false
                ptrDim 0
                child (AstNamedType
                  ident (AstIdent "Vec2")
                  genericImpl (AstGenericList mySeq [
                    (AstType
                      kwVar false
                      ptrDim 0
                      child (AstNamedType
                        ident (AstIdent "T")
                        genericImpl (AstGenericList mySeq [
                        ])
                      )
                    )
                  ])
                )
              )
            )
          )
        )
      ]
    )
  ]
), sym: ..., tbl: {"Vec2": @[0], "Vec2Ptr": @[1]}, parent: ..., childSeq: ...)
curr: (ast: (AstStruct
  ident (AstIdent "Vec2Ptr")
  genericDecl (AstGenericList mySeq [
    (AstIdent "T")
  ])
  fieldSeq [
    (AstVarEtcDeclMost
      ident (AstIdent "x")
      type (AstType
        kwVar false
        ptrDim 1
        child (AstNamedType
          ident (AstIdent "T")
          genericImpl (AstGenericList mySeq [
          ])
        )
      )
    )
    (AstVarEtcDeclMost
      ident (AstIdent "y")
      type (AstType
        kwVar false
        ptrDim 1
        child (AstNamedType
          ident (AstIdent "T")
          genericImpl (AstGenericList mySeq [
          ])
        )
      )
    )
  ]
), sym: ..., tbl: {"T": @[0], "x": @[1], "y": @[2]}, parent: ..., childSeq: ...) 3
argSym.get(): (inputFname: "test.scone", name: "Vec2Ptr", kind: symStructDecl, initValAst: none(AstNode), typeInfo: ...)
argSym.get().typeInfo: (main: (inputFname: "test.scone", name: some("Vec2Ptr"), funcVar: false, ptrDim: 0, arrDim: 0, ast: nil), kind: tiStruct, myStruct: (genericIdxSeq: @[], fieldIdxSeq: @[]))
----
gotoParentSymTbl: parent != nil: true
addChildSymTbl: childSeq.len(): 2
addChildSymTbl: post set parent: true 3
addSym: sym: (inputFname: "test.scone", name: "Vec3Arr3Vec2", kind: symStructDecl, initValAst: none(AstNode), typeInfo: ...)
addSym: tinfo: (main: (inputFname: "test.scone", name: some("Vec3Arr3Vec2"), funcVar: false, ptrDim: 0, arrDim: 0, ast: nil), kind: tiStruct, myStruct: (genericIdxSeq: @[], fieldIdxSeq: @[]))
addsym: testificate: 2
addChildSymTbl: childSeq.len(): 0
addChildSymTbl: post set parent: true 1
addSym: sym: (inputFname: "test.scone", name: "T", kind: symGenericDecl, initValAst: none(AstNode), typeInfo: ...)
addSym: tinfo: (main: (inputFname: "test.scone", name: none(string), funcVar: false, ptrDim: 0, arrDim: 0, ast: nil), kind: tiToResolve, myToResolve: ())
addsym: testificate: 0
debug: 
curr.parent: (ast: (AstStruct
  ident (AstIdent "Vec3Arr3Vec2")
  genericDecl (AstGenericList mySeq [
    (AstIdent "T")
  ])
  fieldSeq [
    (AstVarEtcDeclMost
      ident (AstIdent "x")
      type (AstType
        kwVar false
        ptrDim 0
        child (AstArray
          dim (AstU64Lit u64Val 3)
          elemType (AstType
            kwVar false
            ptrDim 0
            child (AstNamedType
              ident (AstIdent "Vec2")
              genericImpl (AstGenericList mySeq [
                (AstType
                  kwVar false
                  ptrDim 0
                  child (AstNamedType
                    ident (AstIdent "T")
                    genericImpl (AstGenericList mySeq [
                    ])
                  )
                )
              ])
            )
          )
        )
      )
    )
    (AstVarEtcDeclMost
      ident (AstIdent "y")
      type (AstType
        kwVar false
        ptrDim 0
        child (AstArray
          dim (AstU64Lit u64Val 3)
          elemType (AstType
            kwVar false
            ptrDim 0
            child (AstNamedType
              ident (AstIdent "Vec2")
              genericImpl (AstGenericList mySeq [
                (AstType
                  kwVar false
                  ptrDim 0
                  child (AstNamedType
                    ident (AstIdent "T")
                    genericImpl (AstGenericList mySeq [
                    ])
                  )
                )
              ])
            )
          )
        )
      )
    )
    (AstVarEtcDeclMost
      ident (AstIdent "z")
      type (AstType
        kwVar false
        ptrDim 0
        child (AstArray
          dim (AstU64Lit u64Val 3)
          elemType (AstType
            kwVar false
            ptrDim 0
            child (AstNamedType
              ident (AstIdent "Vec2")
              genericImpl (AstGenericList mySeq [
                (AstType
                  kwVar false
                  ptrDim 0
                  child (AstNamedType
                    ident (AstIdent "T")
                    genericImpl (AstGenericList mySeq [
                    ])
                  )
                )
              ])
            )
          )
        )
      )
    )
  ]
), sym: ..., tbl: {"T": @[0]}, parent: ..., childSeq: ...)
curr: (ast: (AstIdent "T"), sym: ..., tbl: {:}, parent: ..., childSeq: ...) 0
argSym.get(): (inputFname: "test.scone", name: "T", kind: symGenericDecl, initValAst: none(AstNode), typeInfo: ...)
argSym.get().typeInfo: (main: (inputFname: "test.scone", name: none(string), funcVar: false, ptrDim: 0, arrDim: 0, ast: nil), kind: tiToResolve, myToResolve: ())
----
gotoParentSymTbl: parent != nil: true
testificate: 3
addChildSymTbl: childSeq.len(): 1
addChildSymTbl: post set parent: true 2
addSym: sym: (inputFname: "test.scone", name: "x", kind: symVar, initValAst: none(AstNode), typeInfo: ...)
addSym: tinfo: (main: (inputFname: "test.scone", name: some("Vec2"), funcVar: false, ptrDim: 0, arrDim: 3, ast: (AstNamedType
  ident (AstIdent "Vec2")
  genericImpl (AstGenericList mySeq [
    (AstType
      kwVar false
      ptrDim 0
      child (AstNamedType
        ident (AstIdent "T")
        genericImpl (AstGenericList mySeq [
        ])
      )
    )
  ])
)), kind: tiToResolve, myToResolve: ())
addsym: testificate: 1
debug: 
curr.parent: (ast: (AstStruct
  ident (AstIdent "Vec3Arr3Vec2")
  genericDecl (AstGenericList mySeq [
    (AstIdent "T")
  ])
  fieldSeq [
    (AstVarEtcDeclMost
      ident (AstIdent "x")
      type (AstType
        kwVar false
        ptrDim 0
        child (AstArray
          dim (AstU64Lit u64Val 3)
          elemType (AstType
            kwVar false
            ptrDim 0
            child (AstNamedType
              ident (AstIdent "Vec2")
              genericImpl (AstGenericList mySeq [
                (AstType
                  kwVar false
                  ptrDim 0
                  child (AstNamedType
                    ident (AstIdent "T")
                    genericImpl (AstGenericList mySeq [
                    ])
                  )
                )
              ])
            )
          )
        )
      )
    )
    (AstVarEtcDeclMost
      ident (AstIdent "y")
      type (AstType
        kwVar false
        ptrDim 0
        child (AstArray
          dim (AstU64Lit u64Val 3)
          elemType (AstType
            kwVar false
            ptrDim 0
            child (AstNamedType
              ident (AstIdent "Vec2")
              genericImpl (AstGenericList mySeq [
                (AstType
                  kwVar false
                  ptrDim 0
                  child (AstNamedType
                    ident (AstIdent "T")
                    genericImpl (AstGenericList mySeq [
                    ])
                  )
                )
              ])
            )
          )
        )
      )
    )
    (AstVarEtcDeclMost
      ident (AstIdent "z")
      type (AstType
        kwVar false
        ptrDim 0
        child (AstArray
          dim (AstU64Lit u64Val 3)
          elemType (AstType
            kwVar false
            ptrDim 0
            child (AstNamedType
              ident (AstIdent "Vec2")
              genericImpl (AstGenericList mySeq [
                (AstType
                  kwVar false
                  ptrDim 0
                  child (AstNamedType
                    ident (AstIdent "T")
                    genericImpl (AstGenericList mySeq [
                    ])
                  )
                )
              ])
            )
          )
        )
      )
    )
  ]
), sym: ..., tbl: {"T": @[0], "x": @[1]}, parent: ..., childSeq: ...)
curr: (ast: (AstIdent "x"), sym: ..., tbl: {:}, parent: ..., childSeq: ...) 0
argSym.get(): (inputFname: "test.scone", name: "x", kind: symVar, initValAst: none(AstNode), typeInfo: ...)
argSym.get().typeInfo: (main: (inputFname: "test.scone", name: some("Vec2"), funcVar: false, ptrDim: 0, arrDim: 3, ast: (AstNamedType
  ident (AstIdent "Vec2")
  genericImpl (AstGenericList mySeq [
    (AstType
      kwVar false
      ptrDim 0
      child (AstNamedType
        ident (AstIdent "T")
        genericImpl (AstGenericList mySeq [
        ])
      )
    )
  ])
)), kind: tiToResolve, myToResolve: ())
----
gotoParentSymTbl: parent != nil: true
addChildSymTbl: childSeq.len(): 2
addChildSymTbl: post set parent: true 3
addSym: sym: (inputFname: "test.scone", name: "y", kind: symVar, initValAst: none(AstNode), typeInfo: ...)
addSym: tinfo: (main: (inputFname: "test.scone", name: some("Vec2"), funcVar: false, ptrDim: 0, arrDim: 3, ast: (AstNamedType
  ident (AstIdent "Vec2")
  genericImpl (AstGenericList mySeq [
    (AstType
      kwVar false
      ptrDim 0
      child (AstNamedType
        ident (AstIdent "T")
        genericImpl (AstGenericList mySeq [
        ])
      )
    )
  ])
)), kind: tiToResolve, myToResolve: ())
addsym: testificate: 2
debug: 
curr.parent: (ast: (AstStruct
  ident (AstIdent "Vec3Arr3Vec2")
  genericDecl (AstGenericList mySeq [
    (AstIdent "T")
  ])
  fieldSeq [
    (AstVarEtcDeclMost
      ident (AstIdent "x")
      type (AstType
        kwVar false
        ptrDim 0
        child (AstArray
          dim (AstU64Lit u64Val 3)
          elemType (AstType
            kwVar false
            ptrDim 0
            child (AstNamedType
              ident (AstIdent "Vec2")
              genericImpl (AstGenericList mySeq [
                (AstType
                  kwVar false
                  ptrDim 0
                  child (AstNamedType
                    ident (AstIdent "T")
                    genericImpl (AstGenericList mySeq [
                    ])
                  )
                )
              ])
            )
          )
        )
      )
    )
    (AstVarEtcDeclMost
      ident (AstIdent "y")
      type (AstType
        kwVar false
        ptrDim 0
        child (AstArray
          dim (AstU64Lit u64Val 3)
          elemType (AstType
            kwVar false
            ptrDim 0
            child (AstNamedType
              ident (AstIdent "Vec2")
              genericImpl (AstGenericList mySeq [
                (AstType
                  kwVar false
                  ptrDim 0
                  child (AstNamedType
                    ident (AstIdent "T")
                    genericImpl (AstGenericList mySeq [
                    ])
                  )
                )
              ])
            )
          )
        )
      )
    )
    (AstVarEtcDeclMost
      ident (AstIdent "z")
      type (AstType
        kwVar false
        ptrDim 0
        child (AstArray
          dim (AstU64Lit u64Val 3)
          elemType (AstType
            kwVar false
            ptrDim 0
            child (AstNamedType
              ident (AstIdent "Vec2")
              genericImpl (AstGenericList mySeq [
                (AstType
                  kwVar false
                  ptrDim 0
                  child (AstNamedType
                    ident (AstIdent "T")
                    genericImpl (AstGenericList mySeq [
                    ])
                  )
                )
              ])
            )
          )
        )
      )
    )
  ]
), sym: ..., tbl: {"T": @[0], "x": @[1], "y": @[2]}, parent: ..., childSeq: ...)
curr: (ast: (AstIdent "y"), sym: ..., tbl: {:}, parent: ..., childSeq: ...) 0
argSym.get(): (inputFname: "test.scone", name: "y", kind: symVar, initValAst: none(AstNode), typeInfo: ...)
argSym.get().typeInfo: (main: (inputFname: "test.scone", name: some("Vec2"), funcVar: false, ptrDim: 0, arrDim: 3, ast: (AstNamedType
  ident (AstIdent "Vec2")
  genericImpl (AstGenericList mySeq [
    (AstType
      kwVar false
      ptrDim 0
      child (AstNamedType
        ident (AstIdent "T")
        genericImpl (AstGenericList mySeq [
        ])
      )
    )
  ])
)), kind: tiToResolve, myToResolve: ())
----
gotoParentSymTbl: parent != nil: true
addChildSymTbl: childSeq.len(): 3
addChildSymTbl: post set parent: true 4
addSym: sym: (inputFname: "test.scone", name: "z", kind: symVar, initValAst: none(AstNode), typeInfo: ...)
addSym: tinfo: (main: (inputFname: "test.scone", name: some("Vec2"), funcVar: false, ptrDim: 0, arrDim: 3, ast: (AstNamedType
  ident (AstIdent "Vec2")
  genericImpl (AstGenericList mySeq [
    (AstType
      kwVar false
      ptrDim 0
      child (AstNamedType
        ident (AstIdent "T")
        genericImpl (AstGenericList mySeq [
        ])
      )
    )
  ])
)), kind: tiToResolve, myToResolve: ())
addsym: testificate: 3
debug: 
curr.parent: (ast: (AstStruct
  ident (AstIdent "Vec3Arr3Vec2")
  genericDecl (AstGenericList mySeq [
    (AstIdent "T")
  ])
  fieldSeq [
    (AstVarEtcDeclMost
      ident (AstIdent "x")
      type (AstType
        kwVar false
        ptrDim 0
        child (AstArray
          dim (AstU64Lit u64Val 3)
          elemType (AstType
            kwVar false
            ptrDim 0
            child (AstNamedType
              ident (AstIdent "Vec2")
              genericImpl (AstGenericList mySeq [
                (AstType
                  kwVar false
                  ptrDim 0
                  child (AstNamedType
                    ident (AstIdent "T")
                    genericImpl (AstGenericList mySeq [
                    ])
                  )
                )
              ])
            )
          )
        )
      )
    )
    (AstVarEtcDeclMost
      ident (AstIdent "y")
      type (AstType
        kwVar false
        ptrDim 0
        child (AstArray
          dim (AstU64Lit u64Val 3)
          elemType (AstType
            kwVar false
            ptrDim 0
            child (AstNamedType
              ident (AstIdent "Vec2")
              genericImpl (AstGenericList mySeq [
                (AstType
                  kwVar false
                  ptrDim 0
                  child (AstNamedType
                    ident (AstIdent "T")
                    genericImpl (AstGenericList mySeq [
                    ])
                  )
                )
              ])
            )
          )
        )
      )
    )
    (AstVarEtcDeclMost
      ident (AstIdent "z")
      type (AstType
        kwVar false
        ptrDim 0
        child (AstArray
          dim (AstU64Lit u64Val 3)
          elemType (AstType
            kwVar false
            ptrDim 0
            child (AstNamedType
              ident (AstIdent "Vec2")
              genericImpl (AstGenericList mySeq [
                (AstType
                  kwVar false
                  ptrDim 0
                  child (AstNamedType
                    ident (AstIdent "T")
                    genericImpl (AstGenericList mySeq [
                    ])
                  )
                )
              ])
            )
          )
        )
      )
    )
  ]
), sym: ..., tbl: {"T": @[0], "x": @[1], "y": @[2], "z": @[3]}, parent: ..., childSeq: ...)
curr: (ast: (AstIdent "z"), sym: ..., tbl: {:}, parent: ..., childSeq: ...) 0
argSym.get(): (inputFname: "test.scone", name: "z", kind: symVar, initValAst: none(AstNode), typeInfo: ...)
argSym.get().typeInfo: (main: (inputFname: "test.scone", name: some("Vec2"), funcVar: false, ptrDim: 0, arrDim: 3, ast: (AstNamedType
  ident (AstIdent "Vec2")
  genericImpl (AstGenericList mySeq [
    (AstType
      kwVar false
      ptrDim 0
      child (AstNamedType
        ident (AstIdent "T")
        genericImpl (AstGenericList mySeq [
        ])
      )
    )
  ])
)), kind: tiToResolve, myToResolve: ())
----
gotoParentSymTbl: parent != nil: true
debug: 
curr.parent: (ast: (AstSrcFile
  module (AstModule ident (AstIdent "myModule"))
  funcDeclSeq [
    (AstDef
      ident (AstIdent "dot")
      genericDecl (AstGenericList mySeq [
        (AstIdent "T")
      ])
      argDeclSeq [
        (AstVarEtcDeclMost
          ident (AstIdent "a")
          type (AstType
            kwVar true
            ptrDim 0
            child (AstNamedType
              ident (AstIdent "Vec2")
              genericImpl (AstGenericList mySeq [
                (AstType
                  kwVar false
                  ptrDim 0
                  child (AstNamedType
                    ident (AstIdent "T")
                    genericImpl (AstGenericList mySeq [
                    ])
                  )
                )
              ])
            )
          )
        )
        (AstVarEtcDeclMost
          ident (AstIdent "b")
          type (AstType
            kwVar true
            ptrDim 0
            child (AstNamedType
              ident (AstIdent "Vec2")
              genericImpl (AstGenericList mySeq [
                (AstType
                  kwVar false
                  ptrDim 0
                  child (AstNamedType
                    ident (AstIdent "T")
                    genericImpl (AstGenericList mySeq [
                    ])
                  )
                )
              ])
            )
          )
        )
      ]
      returnType (AstType
        kwVar false
        ptrDim 0
        child (AstNamedType
          ident (AstIdent "T")
          genericImpl (AstGenericList mySeq [
          ])
        )
      )
      stmtSeq [
        (AstConst
          child (AstVarEtcDeclMost
            ident (AstIdent "result")
            type (AstType
              kwVar false
              ptrDim 0
              child (AstNamedType
                ident (AstIdent "T")
                genericImpl (AstGenericList mySeq [
                ])
              )
            )
          )
          expr (AstBinop
            kind binopPlus
            left (AstBinop
              kind binopMul
              left (AstDot
                left (AstIdent "a")
                right (AstIdent "x")
              )
              right (AstDot
                left (AstIdent "b")
                right (AstIdent "x")
              )
            )
            right (AstBinop
              kind binopMul
              left (AstDot
                left (AstIdent "a")
                right (AstIdent "y")
              )
              right (AstDot
                left (AstIdent "b")
                right (AstIdent "y")
              )
            )
          )
        )
        (AstReturn optExpr (AstIdent "result"))
      ]
    )
    (AstDef
      ident (AstIdent "plus")
      genericDecl (AstGenericList mySeq [
        (AstIdent "T")
      ])
      argDeclSeq [
        (AstVarEtcDeclMost
          ident (AstIdent "a")
          type (AstType
            kwVar true
            ptrDim 0
            child (AstNamedType
              ident (AstIdent "T")
              genericImpl (AstGenericList mySeq [
              ])
            )
          )
        )
        (AstVarEtcDeclMost
          ident (AstIdent "b")
          type (AstType
            kwVar true
            ptrDim 0
            child (AstNamedType
              ident (AstIdent "T")
              genericImpl (AstGenericList mySeq [
              ])
            )
          )
        )
      ]
      returnType (AstType
        kwVar false
        ptrDim 0
        child (AstNamedType
          ident (AstIdent "T")
          genericImpl (AstGenericList mySeq [
          ])
        )
      )
      stmtSeq [
        (AstReturn optExpr (AstBinop
          kind binopPlus
          left (AstIdent "a")
          right (AstIdent "b")
        ))
      ]
    )
    (AstDef
      ident (AstIdent "plus")
      genericDecl (AstGenericList mySeq [
        (AstIdent "T")
      ])
      argDeclSeq [
        (AstVarEtcDeclMost
          ident (AstIdent "a")
          type (AstType
            kwVar true
            ptrDim 0
            child (AstNamedType
              ident (AstIdent "Vec2")
              genericImpl (AstGenericList mySeq [
                (AstType
                  kwVar false
                  ptrDim 0
                  child (AstNamedType
                    ident (AstIdent "T")
                    genericImpl (AstGenericList mySeq [
                    ])
                  )
                )
              ])
            )
          )
        )
        (AstVarEtcDeclMost
          ident (AstIdent "b")
          type (AstType
            kwVar true
            ptrDim 0
            child (AstNamedType
              ident (AstIdent "Vec2")
              genericImpl (AstGenericList mySeq [
                (AstType
                  kwVar false
                  ptrDim 0
                  child (AstNamedType
                    ident (AstIdent "T")
                    genericImpl (AstGenericList mySeq [
                    ])
                  )
                )
              ])
            )
          )
        )
      ]
      returnType (AstType
        kwVar false
        ptrDim 0
        child (AstNamedType
          ident (AstIdent "Vec2")
          genericImpl (AstGenericList mySeq [
            (AstType
              kwVar false
              ptrDim 0
              child (AstNamedType
                ident (AstIdent "T")
                genericImpl (AstGenericList mySeq [
                ])
              )
            )
          ])
        )
      )
      stmtSeq [
        (AstVar
          child (AstVarEtcDeclMost
            ident (AstIdent "result")
            type (AstType
              kwVar false
              ptrDim 0
              child (AstNamedType
                ident (AstIdent "Vec2")
                genericImpl (AstGenericList mySeq [
                  (AstType
                    kwVar false
                    ptrDim 0
                    child (AstNamedType
                      ident (AstIdent "T")
                      genericImpl (AstGenericList mySeq [
                      ])
                    )
                  )
                ])
              )
            )
          )
          optExpr !isSome
        )
        (AstFor
          ident (AstIdent "idx")
          exprPre (AstU64Lit u64Val 0)
          exprPost (AstU64Lit u64Val 2)
          isUntil true
          stmtSeq [
            (AstAssignEtc
              kind assignEtcRegular
              left (AstFuncCall
                ident (AstIdent "at")
                genericImpl (AstGenericList mySeq [
                ])
                argImplSeq [
                  (AstIdent "result")
                  (AstIdent "idx")
                ]
              )
              right (AstBinop
                kind binopPlus
                left (AstFuncCall
                  ident (AstIdent "at")
                  genericImpl (AstGenericList mySeq [
                  ])
                  argImplSeq [
                    (AstIdent "a")
                    (AstIdent "idx")
                  ]
                )
                right (AstFuncCall
                  ident (AstIdent "at")
                  genericImpl (AstGenericList mySeq [
                  ])
                  argImplSeq [
                    (AstIdent "b")
                    (AstIdent "idx")
                  ]
                )
              )
            )
          ]
        )
        (AstReturn optExpr (AstIdent "result"))
      ]
    )
    (AstDef
      ident (AstIdent "times")
      genericDecl (AstGenericList mySeq [
        (AstIdent "T")
      ])
      argDeclSeq [
        (AstVarEtcDeclMost
          ident (AstIdent "a")
          type (AstType
            kwVar false
            ptrDim 0
            child (AstNamedType
              ident (AstIdent "T")
              genericImpl (AstGenericList mySeq [
              ])
            )
          )
        )
        (AstVarEtcDeclMost
          ident (AstIdent "b")
          type (AstType
            kwVar false
            ptrDim 0
            child (AstNamedType
              ident (AstIdent "T")
              genericImpl (AstGenericList mySeq [
              ])
            )
          )
        )
      ]
      returnType (AstType
        kwVar false
        ptrDim 0
        child (AstNamedType
          ident (AstIdent "T")
          genericImpl (AstGenericList mySeq [
          ])
        )
      )
      stmtSeq [
        (AstReturn optExpr (AstBinop
          kind binopMul
          left (AstIdent "a")
          right (AstIdent "b")
        ))
      ]
    )
    (AstDef
      ident (AstIdent "times")
      genericDecl (AstGenericList mySeq [
        (AstIdent "T")
      ])
      argDeclSeq [
        (AstVarEtcDeclMost
          ident (AstIdent "a")
          type (AstType
            kwVar false
            ptrDim 0
            child (AstNamedType
              ident (AstIdent "Vec2")
              genericImpl (AstGenericList mySeq [
                (AstType
                  kwVar false
                  ptrDim 0
                  child (AstNamedType
                    ident (AstIdent "T")
                    genericImpl (AstGenericList mySeq [
                    ])
                  )
                )
              ])
            )
          )
        )
        (AstVarEtcDeclMost
          ident (AstIdent "scale")
          type (AstType
            kwVar false
            ptrDim 0
            child (AstNamedType
              ident (AstIdent "T")
              genericImpl (AstGenericList mySeq [
              ])
            )
          )
        )
      ]
      returnType (AstType
        kwVar false
        ptrDim 0
        child (AstNamedType
          ident (AstIdent "Vec2")
          genericImpl (AstGenericList mySeq [
            (AstType
              kwVar false
              ptrDim 0
              child (AstNamedType
                ident (AstIdent "T")
                genericImpl (AstGenericList mySeq [
                ])
              )
            )
          ])
        )
      )
      stmtSeq [
        (AstVar
          child (AstVarEtcDeclMost
            ident (AstIdent "result")
            type (AstType
              kwVar false
              ptrDim 0
              child (AstNamedType
                ident (AstIdent "Vec2")
                genericImpl (AstGenericList mySeq [
                  (AstType
                    kwVar false
                    ptrDim 0
                    child (AstNamedType
                      ident (AstIdent "T")
                      genericImpl (AstGenericList mySeq [
                      ])
                    )
                  )
                ])
              )
            )
          )
          optExpr !isSome
        )
        (AstFor
          ident (AstIdent "idx")
          exprPre (AstU64Lit u64Val 0)
          exprPost (AstU64Lit u64Val 2)
          isUntil true
          stmtSeq [
            (AstAssignEtc
              kind assignEtcRegular
              left (AstFuncCall
                ident (AstIdent "at")
                genericImpl (AstGenericList mySeq [
                ])
                argImplSeq [
                  (AstIdent "result")
                  (AstIdent "idx")
                ]
              )
              right (AstFuncCall
                ident (AstIdent "times")
                genericImpl (AstGenericList mySeq [
                ])
                argImplSeq [
                  (AstFuncCall
                    ident (AstIdent "at")
                    genericImpl (AstGenericList mySeq [
                    ])
                    argImplSeq [
                      (AstIdent "a")
                      (AstIdent "idx")
                    ]
                  )
                  (AstIdent "scale")
                ]
              )
            )
          ]
        )
        (AstReturn optExpr (AstIdent "result"))
      ]
    )
    (AstDef
      ident (AstIdent "at")
      genericDecl (AstGenericList mySeq [
        (AstIdent "T")
      ])
      argDeclSeq [
        (AstVarEtcDeclMost
          ident (AstIdent "self")
          type (AstType
            kwVar true
            ptrDim 0
            child (AstNamedType
              ident (AstIdent "Vec2")
              genericImpl (AstGenericList mySeq [
                (AstType
                  kwVar false
                  ptrDim 0
                  child (AstNamedType
                    ident (AstIdent "T")
                    genericImpl (AstGenericList mySeq [
                    ])
                  )
                )
              ])
            )
          )
        )
        (AstVarEtcDeclMost
          ident (AstIdent "idx")
          type (AstType
            kwVar false
            ptrDim 0
            child (AstBasicType kind basicTypeU32)
          )
        )
      ]
      returnType (AstType
        kwVar true
        ptrDim 0
        child (AstNamedType
          ident (AstIdent "T")
          genericImpl (AstGenericList mySeq [
          ])
        )
      )
      stmtSeq [
        (AstIf
          expr (AstBinop
            kind binopCmpEq
            left (AstIdent "idx")
            right (AstU64Lit u64Val 0)
          )
          stmtSeq [
            (AstReturn optExpr (AstDot
              left (AstIdent "self")
              right (AstIdent "x")
            ))
          ]
          elifSeq [
          ]
          optElse (AstElse stmtSeq [
            (AstReturn optExpr (AstDot
              left (AstIdent "self")
              right (AstIdent "y")
            ))
          ])
        )
      ]
    )
    (AstDef
      ident (AstIdent "sum")
      genericDecl (AstGenericList mySeq [
        (AstIdent "T")
      ])
      argDeclSeq [
        (AstVarEtcDeclMost
          ident (AstIdent "toSum")
          type (AstType
            kwVar true
            ptrDim 0
            child (AstArray
              dim (AstBinop
                kind binopMul
                left (AstU64Lit u64Val 8)
                right (AstU64Lit u64Val 3)
              )
              elemType (AstType
                kwVar false
                ptrDim 0
                child (AstNamedType
                  ident (AstIdent "Vec2")
                  genericImpl (AstGenericList mySeq [
                    (AstType
                      kwVar false
                      ptrDim 0
                      child (AstNamedType
                        ident (AstIdent "T")
                        genericImpl (AstGenericList mySeq [
                        ])
                      )
                    )
                  ])
                )
              )
            )
          )
        )
      ]
      returnType (AstType
        kwVar false
        ptrDim 0
        child (AstNamedType
          ident (AstIdent "Vec2")
          genericImpl (AstGenericList mySeq [
            (AstType
              kwVar false
              ptrDim 0
              child (AstNamedType
                ident (AstIdent "T")
                genericImpl (AstGenericList mySeq [
                ])
              )
            )
          ])
        )
      )
      stmtSeq [
        (AstVar
          child (AstVarEtcDeclMost
            ident (AstIdent "result")
            type (AstType
              kwVar false
              ptrDim 0
              child (AstNamedType
                ident (AstIdent "Vec2")
                genericImpl (AstGenericList mySeq [
                  (AstType
                    kwVar false
                    ptrDim 0
                    child (AstNamedType
                      ident (AstIdent "T")
                      genericImpl (AstGenericList mySeq [
                      ])
                    )
                  )
                ])
              )
            )
          )
          optExpr !isSome
        )
        (AstFor
          ident (AstIdent "jdx")
          exprPre (AstU64Lit u64Val 0)
          exprPost (AstBinop
            kind binopMul
            left (AstU64Lit u64Val 8)
            right (AstU64Lit u64Val 3)
          )
          isUntil true
          stmtSeq [
            (AstIf
              expr (AstBinop
                kind binopCmpEq
                left (AstIdent "jdx")
                right (AstU64Lit u64Val 0)
              )
              stmtSeq [
                (AstFor
                  ident (AstIdent "idx")
                  exprPre (AstU64Lit u64Val 0)
                  exprPost (AstU64Lit u64Val 2)
                  isUntil true
                  stmtSeq [
                    (AstAssignEtc
                      kind assignEtcRegular
                      left (AstFuncCall
                        ident (AstIdent "at")
                        genericImpl (AstGenericList mySeq [
                        ])
                        argImplSeq [
                          (AstIdent "result")
                          (AstIdent "idx")
                        ]
                      )
                      right (AstFuncCall
                        ident (AstIdent "at")
                        genericImpl (AstGenericList mySeq [
                        ])
                        argImplSeq [
                          (AstFuncCall
                            ident (AstIdent "toSum")
                            genericImpl (AstGenericList mySeq [
                            ])
                            argImplSeq [
                              (AstU64Lit u64Val 0)
                            ]
                          )
                          (AstIdent "idx")
                        ]
                      )
                    )
                  ]
                )
              ]
              elifSeq [
              ]
              optElse (AstElse stmtSeq [
                (AstAssignEtc
                  kind assignEtcRegular
                  left (AstIdent "result")
                  right (AstFuncCall
                    ident (AstIdent "plus")
                    genericImpl (AstGenericList mySeq [
                    ])
                    argImplSeq [
                      (AstIdent "result")
                      (AstFuncCall
                        ident (AstIdent "toSum")
                        genericImpl (AstGenericList mySeq [
                        ])
                        argImplSeq [
                          (AstIdent "jdx")
                        ]
                      )
                    ]
                  )
                )
              ])
            )
          ]
        )
        (AstReturn optExpr (AstIdent "result"))
      ]
    )
  ]
  structDeclSeq [
    (AstStruct
      ident (AstIdent "Vec2")
      genericDecl (AstGenericList mySeq [
        (AstIdent "T")
      ])
      fieldSeq [
        (AstVarEtcDeclMost
          ident (AstIdent "x")
          type (AstType
            kwVar false
            ptrDim 0
            child (AstNamedType
              ident (AstIdent "T")
              genericImpl (AstGenericList mySeq [
              ])
            )
          )
        )
        (AstVarEtcDeclMost
          ident (AstIdent "y")
          type (AstType
            kwVar false
            ptrDim 0
            child (AstNamedType
              ident (AstIdent "T")
              genericImpl (AstGenericList mySeq [
              ])
            )
          )
        )
      ]
    )
    (AstStruct
      ident (AstIdent "Vec2Ptr")
      genericDecl (AstGenericList mySeq [
        (AstIdent "T")
      ])
      fieldSeq [
        (AstVarEtcDeclMost
          ident (AstIdent "x")
          type (AstType
            kwVar false
            ptrDim 1
            child (AstNamedType
              ident (AstIdent "T")
              genericImpl (AstGenericList mySeq [
              ])
            )
          )
        )
        (AstVarEtcDeclMost
          ident (AstIdent "y")
          type (AstType
            kwVar false
            ptrDim 1
            child (AstNamedType
              ident (AstIdent "T")
              genericImpl (AstGenericList mySeq [
              ])
            )
          )
        )
      ]
    )
    (AstStruct
      ident (AstIdent "Vec3Arr3Vec2")
      genericDecl (AstGenericList mySeq [
        (AstIdent "T")
      ])
      fieldSeq [
        (AstVarEtcDeclMost
          ident (AstIdent "x")
          type (AstType
            kwVar false
            ptrDim 0
            child (AstArray
              dim (AstU64Lit u64Val 3)
              elemType (AstType
                kwVar false
                ptrDim 0
                child (AstNamedType
                  ident (AstIdent "Vec2")
                  genericImpl (AstGenericList mySeq [
                    (AstType
                      kwVar false
                      ptrDim 0
                      child (AstNamedType
                        ident (AstIdent "T")
                        genericImpl (AstGenericList mySeq [
                        ])
                      )
                    )
                  ])
                )
              )
            )
          )
        )
        (AstVarEtcDeclMost
          ident (AstIdent "y")
          type (AstType
            kwVar false
            ptrDim 0
            child (AstArray
              dim (AstU64Lit u64Val 3)
              elemType (AstType
                kwVar false
                ptrDim 0
                child (AstNamedType
                  ident (AstIdent "Vec2")
                  genericImpl (AstGenericList mySeq [
                    (AstType
                      kwVar false
                      ptrDim 0
                      child (AstNamedType
                        ident (AstIdent "T")
                        genericImpl (AstGenericList mySeq [
                        ])
                      )
                    )
                  ])
                )
              )
            )
          )
        )
        (AstVarEtcDeclMost
          ident (AstIdent "z")
          type (AstType
            kwVar false
            ptrDim 0
            child (AstArray
              dim (AstU64Lit u64Val 3)
              elemType (AstType
                kwVar false
                ptrDim 0
                child (AstNamedType
                  ident (AstIdent "Vec2")
                  genericImpl (AstGenericList mySeq [
                    (AstType
                      kwVar false
                      ptrDim 0
                      child (AstNamedType
                        ident (AstIdent "T")
                        genericImpl (AstGenericList mySeq [
                        ])
                      )
                    )
                  ])
                )
              )
            )
          )
        )
      ]
    )
  ]
), sym: ..., tbl: {"Vec2": @[0], "Vec2Ptr": @[1], "Vec3Arr3Vec2": @[2]}, parent: ..., childSeq: ...)
curr: (ast: (AstStruct
  ident (AstIdent "Vec3Arr3Vec2")
  genericDecl (AstGenericList mySeq [
    (AstIdent "T")
  ])
  fieldSeq [
    (AstVarEtcDeclMost
      ident (AstIdent "x")
      type (AstType
        kwVar false
        ptrDim 0
        child (AstArray
          dim (AstU64Lit u64Val 3)
          elemType (AstType
            kwVar false
            ptrDim 0
            child (AstNamedType
              ident (AstIdent "Vec2")
              genericImpl (AstGenericList mySeq [
                (AstType
                  kwVar false
                  ptrDim 0
                  child (AstNamedType
                    ident (AstIdent "T")
                    genericImpl (AstGenericList mySeq [
                    ])
                  )
                )
              ])
            )
          )
        )
      )
    )
    (AstVarEtcDeclMost
      ident (AstIdent "y")
      type (AstType
        kwVar false
        ptrDim 0
        child (AstArray
          dim (AstU64Lit u64Val 3)
          elemType (AstType
            kwVar false
            ptrDim 0
            child (AstNamedType
              ident (AstIdent "Vec2")
              genericImpl (AstGenericList mySeq [
                (AstType
                  kwVar false
                  ptrDim 0
                  child (AstNamedType
                    ident (AstIdent "T")
                    genericImpl (AstGenericList mySeq [
                    ])
                  )
                )
              ])
            )
          )
        )
      )
    )
    (AstVarEtcDeclMost
      ident (AstIdent "z")
      type (AstType
        kwVar false
        ptrDim 0
        child (AstArray
          dim (AstU64Lit u64Val 3)
          elemType (AstType
            kwVar false
            ptrDim 0
            child (AstNamedType
              ident (AstIdent "Vec2")
              genericImpl (AstGenericList mySeq [
                (AstType
                  kwVar false
                  ptrDim 0
                  child (AstNamedType
                    ident (AstIdent "T")
                    genericImpl (AstGenericList mySeq [
                    ])
                  )
                )
              ])
            )
          )
        )
      )
    )
  ]
), sym: ..., tbl: {"T": @[0], "x": @[1], "y": @[2], "z": @[3]}, parent: ..., childSeq: ...) 4
argSym.get(): (inputFname: "test.scone", name: "Vec3Arr3Vec2", kind: symStructDecl, initValAst: none(AstNode), typeInfo: ...)
argSym.get().typeInfo: (main: (inputFname: "test.scone", name: some("Vec3Arr3Vec2"), funcVar: false, ptrDim: 0, arrDim: 0, ast: nil), kind: tiStruct, myStruct: (genericIdxSeq: @[], fieldIdxSeq: @[]))
----
gotoParentSymTbl: parent != nil: true
addChildSymTbl: childSeq.len(): 3
addChildSymTbl: post set parent: true 4
addSym: sym: (inputFname: "test.scone", name: "dot", kind: symFuncDecl, initValAst: none(AstNode), typeInfo: ...)
addSym: tinfo: (main: (inputFname: "test.scone", name: none(string), funcVar: false, ptrDim: 0, arrDim: 0, ast: nil), kind: tiFunc, myFunc: (genericIdxSeq: @[], argIdxSeq: @[], returnTypeIdx: 0))
addsym: testificate: 3
addChildSymTbl: childSeq.len(): 0
addChildSymTbl: post set parent: true 1
addSym: sym: (inputFname: "test.scone", name: "T", kind: symGenericDecl, initValAst: none(AstNode), typeInfo: ...)
addSym: tinfo: (main: (inputFname: "test.scone", name: none(string), funcVar: false, ptrDim: 0, arrDim: 0, ast: nil), kind: tiToResolve, myToResolve: ())
addsym: testificate: 0
debug: 
curr.parent: (ast: (AstDef
  ident (AstIdent "dot")
  genericDecl (AstGenericList mySeq [
    (AstIdent "T")
  ])
  argDeclSeq [
    (AstVarEtcDeclMost
      ident (AstIdent "a")
      type (AstType
        kwVar true
        ptrDim 0
        child (AstNamedType
          ident (AstIdent "Vec2")
          genericImpl (AstGenericList mySeq [
            (AstType
              kwVar false
              ptrDim 0
              child (AstNamedType
                ident (AstIdent "T")
                genericImpl (AstGenericList mySeq [
                ])
              )
            )
          ])
        )
      )
    )
    (AstVarEtcDeclMost
      ident (AstIdent "b")
      type (AstType
        kwVar true
        ptrDim 0
        child (AstNamedType
          ident (AstIdent "Vec2")
          genericImpl (AstGenericList mySeq [
            (AstType
              kwVar false
              ptrDim 0
              child (AstNamedType
                ident (AstIdent "T")
                genericImpl (AstGenericList mySeq [
                ])
              )
            )
          ])
        )
      )
    )
  ]
  returnType (AstType
    kwVar false
    ptrDim 0
    child (AstNamedType
      ident (AstIdent "T")
      genericImpl (AstGenericList mySeq [
      ])
    )
  )
  stmtSeq [
    (AstConst
      child (AstVarEtcDeclMost
        ident (AstIdent "result")
        type (AstType
          kwVar false
          ptrDim 0
          child (AstNamedType
            ident (AstIdent "T")
            genericImpl (AstGenericList mySeq [
            ])
          )
        )
      )
      expr (AstBinop
        kind binopPlus
        left (AstBinop
          kind binopMul
          left (AstDot
            left (AstIdent "a")
            right (AstIdent "x")
          )
          right (AstDot
            left (AstIdent "b")
            right (AstIdent "x")
          )
        )
        right (AstBinop
          kind binopMul
          left (AstDot
            left (AstIdent "a")
            right (AstIdent "y")
          )
          right (AstDot
            left (AstIdent "b")
            right (AstIdent "y")
          )
        )
      )
    )
    (AstReturn optExpr (AstIdent "result"))
  ]
), sym: ..., tbl: {"T": @[0]}, parent: ..., childSeq: ...)
curr: (ast: (AstIdent "T"), sym: ..., tbl: {:}, parent: ..., childSeq: ...) 0
argSym.get(): (inputFname: "test.scone", name: "T", kind: symGenericDecl, initValAst: none(AstNode), typeInfo: ...)
argSym.get().typeInfo: (main: (inputFname: "test.scone", name: none(string), funcVar: false, ptrDim: 0, arrDim: 0, ast: nil), kind: tiToResolve, myToResolve: ())
----
gotoParentSymTbl: parent != nil: true
addChildSymTbl: childSeq.len(): 1
addChildSymTbl: post set parent: true 2
addSym: sym: (inputFname: "test.scone", name: "a", kind: symVar, initValAst: none(AstNode), typeInfo: ...)
addSym: tinfo: (main: (inputFname: "test.scone", name: some("Vec2"), funcVar: true, ptrDim: 0, arrDim: 0, ast: (AstNamedType
  ident (AstIdent "Vec2")
  genericImpl (AstGenericList mySeq [
    (AstType
      kwVar false
      ptrDim 0
      child (AstNamedType
        ident (AstIdent "T")
        genericImpl (AstGenericList mySeq [
        ])
      )
    )
  ])
)), kind: tiToResolve, myToResolve: ())
addsym: testificate: 1
debug: 
curr.parent: (ast: (AstDef
  ident (AstIdent "dot")
  genericDecl (AstGenericList mySeq [
    (AstIdent "T")
  ])
  argDeclSeq [
    (AstVarEtcDeclMost
      ident (AstIdent "a")
      type (AstType
        kwVar true
        ptrDim 0
        child (AstNamedType
          ident (AstIdent "Vec2")
          genericImpl (AstGenericList mySeq [
            (AstType
              kwVar false
              ptrDim 0
              child (AstNamedType
                ident (AstIdent "T")
                genericImpl (AstGenericList mySeq [
                ])
              )
            )
          ])
        )
      )
    )
    (AstVarEtcDeclMost
      ident (AstIdent "b")
      type (AstType
        kwVar true
        ptrDim 0
        child (AstNamedType
          ident (AstIdent "Vec2")
          genericImpl (AstGenericList mySeq [
            (AstType
              kwVar false
              ptrDim 0
              child (AstNamedType
                ident (AstIdent "T")
                genericImpl (AstGenericList mySeq [
                ])
              )
            )
          ])
        )
      )
    )
  ]
  returnType (AstType
    kwVar false
    ptrDim 0
    child (AstNamedType
      ident (AstIdent "T")
      genericImpl (AstGenericList mySeq [
      ])
    )
  )
  stmtSeq [
    (AstConst
      child (AstVarEtcDeclMost
        ident (AstIdent "result")
        type (AstType
          kwVar false
          ptrDim 0
          child (AstNamedType
            ident (AstIdent "T")
            genericImpl (AstGenericList mySeq [
            ])
          )
        )
      )
      expr (AstBinop
        kind binopPlus
        left (AstBinop
          kind binopMul
          left (AstDot
            left (AstIdent "a")
            right (AstIdent "x")
          )
          right (AstDot
            left (AstIdent "b")
            right (AstIdent "x")
          )
        )
        right (AstBinop
          kind binopMul
          left (AstDot
            left (AstIdent "a")
            right (AstIdent "y")
          )
          right (AstDot
            left (AstIdent "b")
            right (AstIdent "y")
          )
        )
      )
    )
    (AstReturn optExpr (AstIdent "result"))
  ]
), sym: ..., tbl: {"T": @[0], "a": @[1]}, parent: ..., childSeq: ...)
curr: (ast: (AstIdent "a"), sym: ..., tbl: {:}, parent: ..., childSeq: ...) 0
argSym.get(): (inputFname: "test.scone", name: "a", kind: symVar, initValAst: none(AstNode), typeInfo: ...)
argSym.get().typeInfo: (main: (inputFname: "test.scone", name: some("Vec2"), funcVar: true, ptrDim: 0, arrDim: 0, ast: (AstNamedType
  ident (AstIdent "Vec2")
  genericImpl (AstGenericList mySeq [
    (AstType
      kwVar false
      ptrDim 0
      child (AstNamedType
        ident (AstIdent "T")
        genericImpl (AstGenericList mySeq [
        ])
      )
    )
  ])
)), kind: tiToResolve, myToResolve: ())
----
gotoParentSymTbl: parent != nil: true
addChildSymTbl: childSeq.len(): 2
addChildSymTbl: post set parent: true 3
addSym: sym: (inputFname: "test.scone", name: "b", kind: symVar, initValAst: none(AstNode), typeInfo: ...)
addSym: tinfo: (main: (inputFname: "test.scone", name: some("Vec2"), funcVar: true, ptrDim: 0, arrDim: 0, ast: (AstNamedType
  ident (AstIdent "Vec2")
  genericImpl (AstGenericList mySeq [
    (AstType
      kwVar false
      ptrDim 0
      child (AstNamedType
        ident (AstIdent "T")
        genericImpl (AstGenericList mySeq [
        ])
      )
    )
  ])
)), kind: tiToResolve, myToResolve: ())
addsym: testificate: 2
debug: 
curr.parent: (ast: (AstDef
  ident (AstIdent "dot")
  genericDecl (AstGenericList mySeq [
    (AstIdent "T")
  ])
  argDeclSeq [
    (AstVarEtcDeclMost
      ident (AstIdent "a")
      type (AstType
        kwVar true
        ptrDim 0
        child (AstNamedType
          ident (AstIdent "Vec2")
          genericImpl (AstGenericList mySeq [
            (AstType
              kwVar false
              ptrDim 0
              child (AstNamedType
                ident (AstIdent "T")
                genericImpl (AstGenericList mySeq [
                ])
              )
            )
          ])
        )
      )
    )
    (AstVarEtcDeclMost
      ident (AstIdent "b")
      type (AstType
        kwVar true
        ptrDim 0
        child (AstNamedType
          ident (AstIdent "Vec2")
          genericImpl (AstGenericList mySeq [
            (AstType
              kwVar false
              ptrDim 0
              child (AstNamedType
                ident (AstIdent "T")
                genericImpl (AstGenericList mySeq [
                ])
              )
            )
          ])
        )
      )
    )
  ]
  returnType (AstType
    kwVar false
    ptrDim 0
    child (AstNamedType
      ident (AstIdent "T")
      genericImpl (AstGenericList mySeq [
      ])
    )
  )
  stmtSeq [
    (AstConst
      child (AstVarEtcDeclMost
        ident (AstIdent "result")
        type (AstType
          kwVar false
          ptrDim 0
          child (AstNamedType
            ident (AstIdent "T")
            genericImpl (AstGenericList mySeq [
            ])
          )
        )
      )
      expr (AstBinop
        kind binopPlus
        left (AstBinop
          kind binopMul
          left (AstDot
            left (AstIdent "a")
            right (AstIdent "x")
          )
          right (AstDot
            left (AstIdent "b")
            right (AstIdent "x")
          )
        )
        right (AstBinop
          kind binopMul
          left (AstDot
            left (AstIdent "a")
            right (AstIdent "y")
          )
          right (AstDot
            left (AstIdent "b")
            right (AstIdent "y")
          )
        )
      )
    )
    (AstReturn optExpr (AstIdent "result"))
  ]
), sym: ..., tbl: {"T": @[0], "a": @[1], "b": @[2]}, parent: ..., childSeq: ...)
curr: (ast: (AstIdent "b"), sym: ..., tbl: {:}, parent: ..., childSeq: ...) 0
argSym.get(): (inputFname: "test.scone", name: "b", kind: symVar, initValAst: none(AstNode), typeInfo: ...)
argSym.get().typeInfo: (main: (inputFname: "test.scone", name: some("Vec2"), funcVar: true, ptrDim: 0, arrDim: 0, ast: (AstNamedType
  ident (AstIdent "Vec2")
  genericImpl (AstGenericList mySeq [
    (AstType
      kwVar false
      ptrDim 0
      child (AstNamedType
        ident (AstIdent "T")
        genericImpl (AstGenericList mySeq [
        ])
      )
    )
  ])
)), kind: tiToResolve, myToResolve: ())
----
gotoParentSymTbl: parent != nil: true
addChildSymTbl: childSeq.len(): 3
addChildSymTbl: post set parent: true 4
addSym: sym: (inputFname: "test.scone", name: "<result>", kind: symVar, initValAst: none(AstNode), typeInfo: ...)
addSym: tinfo: (main: (inputFname: "test.scone", name: some("T"), funcVar: false, ptrDim: 0, arrDim: 0, ast: (AstNamedType
  ident (AstIdent "T")
  genericImpl (AstGenericList mySeq [
  ])
)), kind: tiToResolve, myToResolve: ())
addsym: testificate: 3
debug: 
curr.parent: (ast: (AstDef
  ident (AstIdent "dot")
  genericDecl (AstGenericList mySeq [
    (AstIdent "T")
  ])
  argDeclSeq [
    (AstVarEtcDeclMost
      ident (AstIdent "a")
      type (AstType
        kwVar true
        ptrDim 0
        child (AstNamedType
          ident (AstIdent "Vec2")
          genericImpl (AstGenericList mySeq [
            (AstType
              kwVar false
              ptrDim 0
              child (AstNamedType
                ident (AstIdent "T")
                genericImpl (AstGenericList mySeq [
                ])
              )
            )
          ])
        )
      )
    )
    (AstVarEtcDeclMost
      ident (AstIdent "b")
      type (AstType
        kwVar true
        ptrDim 0
        child (AstNamedType
          ident (AstIdent "Vec2")
          genericImpl (AstGenericList mySeq [
            (AstType
              kwVar false
              ptrDim 0
              child (AstNamedType
                ident (AstIdent "T")
                genericImpl (AstGenericList mySeq [
                ])
              )
            )
          ])
        )
      )
    )
  ]
  returnType (AstType
    kwVar false
    ptrDim 0
    child (AstNamedType
      ident (AstIdent "T")
      genericImpl (AstGenericList mySeq [
      ])
    )
  )
  stmtSeq [
    (AstConst
      child (AstVarEtcDeclMost
        ident (AstIdent "result")
        type (AstType
          kwVar false
          ptrDim 0
          child (AstNamedType
            ident (AstIdent "T")
            genericImpl (AstGenericList mySeq [
            ])
          )
        )
      )
      expr (AstBinop
        kind binopPlus
        left (AstBinop
          kind binopMul
          left (AstDot
            left (AstIdent "a")
            right (AstIdent "x")
          )
          right (AstDot
            left (AstIdent "b")
            right (AstIdent "x")
          )
        )
        right (AstBinop
          kind binopMul
          left (AstDot
            left (AstIdent "a")
            right (AstIdent "y")
          )
          right (AstDot
            left (AstIdent "b")
            right (AstIdent "y")
          )
        )
      )
    )
    (AstReturn optExpr (AstIdent "result"))
  ]
), sym: ..., tbl: {"T": @[0], "a": @[1], "b": @[2], "<result>": @[3]}, parent: ..., childSeq: ...)
curr: (ast: (AstType
  kwVar false
  ptrDim 0
  child (AstNamedType
    ident (AstIdent "T")
    genericImpl (AstGenericList mySeq [
    ])
  )
), sym: ..., tbl: {:}, parent: ..., childSeq: ...) 0
argSym.get(): (inputFname: "test.scone", name: "<result>", kind: symVar, initValAst: none(AstNode), typeInfo: ...)
argSym.get().typeInfo: (main: (inputFname: "test.scone", name: some("T"), funcVar: false, ptrDim: 0, arrDim: 0, ast: (AstNamedType
  ident (AstIdent "T")
  genericImpl (AstGenericList mySeq [
  ])
)), kind: tiToResolve, myToResolve: ())
----
gotoParentSymTbl: parent != nil: true
debug: 
curr.parent: (ast: (AstSrcFile
  module (AstModule ident (AstIdent "myModule"))
  funcDeclSeq [
    (AstDef
      ident (AstIdent "dot")
      genericDecl (AstGenericList mySeq [
        (AstIdent "T")
      ])
      argDeclSeq [
        (AstVarEtcDeclMost
          ident (AstIdent "a")
          type (AstType
            kwVar true
            ptrDim 0
            child (AstNamedType
              ident (AstIdent "Vec2")
              genericImpl (AstGenericList mySeq [
                (AstType
                  kwVar false
                  ptrDim 0
                  child (AstNamedType
                    ident (AstIdent "T")
                    genericImpl (AstGenericList mySeq [
                    ])
                  )
                )
              ])
            )
          )
        )
        (AstVarEtcDeclMost
          ident (AstIdent "b")
          type (AstType
            kwVar true
            ptrDim 0
            child (AstNamedType
              ident (AstIdent "Vec2")
              genericImpl (AstGenericList mySeq [
                (AstType
                  kwVar false
                  ptrDim 0
                  child (AstNamedType
                    ident (AstIdent "T")
                    genericImpl (AstGenericList mySeq [
                    ])
                  )
                )
              ])
            )
          )
        )
      ]
      returnType (AstType
        kwVar false
        ptrDim 0
        child (AstNamedType
          ident (AstIdent "T")
          genericImpl (AstGenericList mySeq [
          ])
        )
      )
      stmtSeq [
        (AstConst
          child (AstVarEtcDeclMost
            ident (AstIdent "result")
            type (AstType
              kwVar false
              ptrDim 0
              child (AstNamedType
                ident (AstIdent "T")
                genericImpl (AstGenericList mySeq [
                ])
              )
            )
          )
          expr (AstBinop
            kind binopPlus
            left (AstBinop
              kind binopMul
              left (AstDot
                left (AstIdent "a")
                right (AstIdent "x")
              )
              right (AstDot
                left (AstIdent "b")
                right (AstIdent "x")
              )
            )
            right (AstBinop
              kind binopMul
              left (AstDot
                left (AstIdent "a")
                right (AstIdent "y")
              )
              right (AstDot
                left (AstIdent "b")
                right (AstIdent "y")
              )
            )
          )
        )
        (AstReturn optExpr (AstIdent "result"))
      ]
    )
    (AstDef
      ident (AstIdent "plus")
      genericDecl (AstGenericList mySeq [
        (AstIdent "T")
      ])
      argDeclSeq [
        (AstVarEtcDeclMost
          ident (AstIdent "a")
          type (AstType
            kwVar true
            ptrDim 0
            child (AstNamedType
              ident (AstIdent "T")
              genericImpl (AstGenericList mySeq [
              ])
            )
          )
        )
        (AstVarEtcDeclMost
          ident (AstIdent "b")
          type (AstType
            kwVar true
            ptrDim 0
            child (AstNamedType
              ident (AstIdent "T")
              genericImpl (AstGenericList mySeq [
              ])
            )
          )
        )
      ]
      returnType (AstType
        kwVar false
        ptrDim 0
        child (AstNamedType
          ident (AstIdent "T")
          genericImpl (AstGenericList mySeq [
          ])
        )
      )
      stmtSeq [
        (AstReturn optExpr (AstBinop
          kind binopPlus
          left (AstIdent "a")
          right (AstIdent "b")
        ))
      ]
    )
    (AstDef
      ident (AstIdent "plus")
      genericDecl (AstGenericList mySeq [
        (AstIdent "T")
      ])
      argDeclSeq [
        (AstVarEtcDeclMost
          ident (AstIdent "a")
          type (AstType
            kwVar true
            ptrDim 0
            child (AstNamedType
              ident (AstIdent "Vec2")
              genericImpl (AstGenericList mySeq [
                (AstType
                  kwVar false
                  ptrDim 0
                  child (AstNamedType
                    ident (AstIdent "T")
                    genericImpl (AstGenericList mySeq [
                    ])
                  )
                )
              ])
            )
          )
        )
        (AstVarEtcDeclMost
          ident (AstIdent "b")
          type (AstType
            kwVar true
            ptrDim 0
            child (AstNamedType
              ident (AstIdent "Vec2")
              genericImpl (AstGenericList mySeq [
                (AstType
                  kwVar false
                  ptrDim 0
                  child (AstNamedType
                    ident (AstIdent "T")
                    genericImpl (AstGenericList mySeq [
                    ])
                  )
                )
              ])
            )
          )
        )
      ]
      returnType (AstType
        kwVar false
        ptrDim 0
        child (AstNamedType
          ident (AstIdent "Vec2")
          genericImpl (AstGenericList mySeq [
            (AstType
              kwVar false
              ptrDim 0
              child (AstNamedType
                ident (AstIdent "T")
                genericImpl (AstGenericList mySeq [
                ])
              )
            )
          ])
        )
      )
      stmtSeq [
        (AstVar
          child (AstVarEtcDeclMost
            ident (AstIdent "result")
            type (AstType
              kwVar false
              ptrDim 0
              child (AstNamedType
                ident (AstIdent "Vec2")
                genericImpl (AstGenericList mySeq [
                  (AstType
                    kwVar false
                    ptrDim 0
                    child (AstNamedType
                      ident (AstIdent "T")
                      genericImpl (AstGenericList mySeq [
                      ])
                    )
                  )
                ])
              )
            )
          )
          optExpr !isSome
        )
        (AstFor
          ident (AstIdent "idx")
          exprPre (AstU64Lit u64Val 0)
          exprPost (AstU64Lit u64Val 2)
          isUntil true
          stmtSeq [
            (AstAssignEtc
              kind assignEtcRegular
              left (AstFuncCall
                ident (AstIdent "at")
                genericImpl (AstGenericList mySeq [
                ])
                argImplSeq [
                  (AstIdent "result")
                  (AstIdent "idx")
                ]
              )
              right (AstBinop
                kind binopPlus
                left (AstFuncCall
                  ident (AstIdent "at")
                  genericImpl (AstGenericList mySeq [
                  ])
                  argImplSeq [
                    (AstIdent "a")
                    (AstIdent "idx")
                  ]
                )
                right (AstFuncCall
                  ident (AstIdent "at")
                  genericImpl (AstGenericList mySeq [
                  ])
                  argImplSeq [
                    (AstIdent "b")
                    (AstIdent "idx")
                  ]
                )
              )
            )
          ]
        )
        (AstReturn optExpr (AstIdent "result"))
      ]
    )
    (AstDef
      ident (AstIdent "times")
      genericDecl (AstGenericList mySeq [
        (AstIdent "T")
      ])
      argDeclSeq [
        (AstVarEtcDeclMost
          ident (AstIdent "a")
          type (AstType
            kwVar false
            ptrDim 0
            child (AstNamedType
              ident (AstIdent "T")
              genericImpl (AstGenericList mySeq [
              ])
            )
          )
        )
        (AstVarEtcDeclMost
          ident (AstIdent "b")
          type (AstType
            kwVar false
            ptrDim 0
            child (AstNamedType
              ident (AstIdent "T")
              genericImpl (AstGenericList mySeq [
              ])
            )
          )
        )
      ]
      returnType (AstType
        kwVar false
        ptrDim 0
        child (AstNamedType
          ident (AstIdent "T")
          genericImpl (AstGenericList mySeq [
          ])
        )
      )
      stmtSeq [
        (AstReturn optExpr (AstBinop
          kind binopMul
          left (AstIdent "a")
          right (AstIdent "b")
        ))
      ]
    )
    (AstDef
      ident (AstIdent "times")
      genericDecl (AstGenericList mySeq [
        (AstIdent "T")
      ])
      argDeclSeq [
        (AstVarEtcDeclMost
          ident (AstIdent "a")
          type (AstType
            kwVar false
            ptrDim 0
            child (AstNamedType
              ident (AstIdent "Vec2")
              genericImpl (AstGenericList mySeq [
                (AstType
                  kwVar false
                  ptrDim 0
                  child (AstNamedType
                    ident (AstIdent "T")
                    genericImpl (AstGenericList mySeq [
                    ])
                  )
                )
              ])
            )
          )
        )
        (AstVarEtcDeclMost
          ident (AstIdent "scale")
          type (AstType
            kwVar false
            ptrDim 0
            child (AstNamedType
              ident (AstIdent "T")
              genericImpl (AstGenericList mySeq [
              ])
            )
          )
        )
      ]
      returnType (AstType
        kwVar false
        ptrDim 0
        child (AstNamedType
          ident (AstIdent "Vec2")
          genericImpl (AstGenericList mySeq [
            (AstType
              kwVar false
              ptrDim 0
              child (AstNamedType
                ident (AstIdent "T")
                genericImpl (AstGenericList mySeq [
                ])
              )
            )
          ])
        )
      )
      stmtSeq [
        (AstVar
          child (AstVarEtcDeclMost
            ident (AstIdent "result")
            type (AstType
              kwVar false
              ptrDim 0
              child (AstNamedType
                ident (AstIdent "Vec2")
                genericImpl (AstGenericList mySeq [
                  (AstType
                    kwVar false
                    ptrDim 0
                    child (AstNamedType
                      ident (AstIdent "T")
                      genericImpl (AstGenericList mySeq [
                      ])
                    )
                  )
                ])
              )
            )
          )
          optExpr !isSome
        )
        (AstFor
          ident (AstIdent "idx")
          exprPre (AstU64Lit u64Val 0)
          exprPost (AstU64Lit u64Val 2)
          isUntil true
          stmtSeq [
            (AstAssignEtc
              kind assignEtcRegular
              left (AstFuncCall
                ident (AstIdent "at")
                genericImpl (AstGenericList mySeq [
                ])
                argImplSeq [
                  (AstIdent "result")
                  (AstIdent "idx")
                ]
              )
              right (AstFuncCall
                ident (AstIdent "times")
                genericImpl (AstGenericList mySeq [
                ])
                argImplSeq [
                  (AstFuncCall
                    ident (AstIdent "at")
                    genericImpl (AstGenericList mySeq [
                    ])
                    argImplSeq [
                      (AstIdent "a")
                      (AstIdent "idx")
                    ]
                  )
                  (AstIdent "scale")
                ]
              )
            )
          ]
        )
        (AstReturn optExpr (AstIdent "result"))
      ]
    )
    (AstDef
      ident (AstIdent "at")
      genericDecl (AstGenericList mySeq [
        (AstIdent "T")
      ])
      argDeclSeq [
        (AstVarEtcDeclMost
          ident (AstIdent "self")
          type (AstType
            kwVar true
            ptrDim 0
            child (AstNamedType
              ident (AstIdent "Vec2")
              genericImpl (AstGenericList mySeq [
                (AstType
                  kwVar false
                  ptrDim 0
                  child (AstNamedType
                    ident (AstIdent "T")
                    genericImpl (AstGenericList mySeq [
                    ])
                  )
                )
              ])
            )
          )
        )
        (AstVarEtcDeclMost
          ident (AstIdent "idx")
          type (AstType
            kwVar false
            ptrDim 0
            child (AstBasicType kind basicTypeU32)
          )
        )
      ]
      returnType (AstType
        kwVar true
        ptrDim 0
        child (AstNamedType
          ident (AstIdent "T")
          genericImpl (AstGenericList mySeq [
          ])
        )
      )
      stmtSeq [
        (AstIf
          expr (AstBinop
            kind binopCmpEq
            left (AstIdent "idx")
            right (AstU64Lit u64Val 0)
          )
          stmtSeq [
            (AstReturn optExpr (AstDot
              left (AstIdent "self")
              right (AstIdent "x")
            ))
          ]
          elifSeq [
          ]
          optElse (AstElse stmtSeq [
            (AstReturn optExpr (AstDot
              left (AstIdent "self")
              right (AstIdent "y")
            ))
          ])
        )
      ]
    )
    (AstDef
      ident (AstIdent "sum")
      genericDecl (AstGenericList mySeq [
        (AstIdent "T")
      ])
      argDeclSeq [
        (AstVarEtcDeclMost
          ident (AstIdent "toSum")
          type (AstType
            kwVar true
            ptrDim 0
            child (AstArray
              dim (AstBinop
                kind binopMul
                left (AstU64Lit u64Val 8)
                right (AstU64Lit u64Val 3)
              )
              elemType (AstType
                kwVar false
                ptrDim 0
                child (AstNamedType
                  ident (AstIdent "Vec2")
                  genericImpl (AstGenericList mySeq [
                    (AstType
                      kwVar false
                      ptrDim 0
                      child (AstNamedType
                        ident (AstIdent "T")
                        genericImpl (AstGenericList mySeq [
                        ])
                      )
                    )
                  ])
                )
              )
            )
          )
        )
      ]
      returnType (AstType
        kwVar false
        ptrDim 0
        child (AstNamedType
          ident (AstIdent "Vec2")
          genericImpl (AstGenericList mySeq [
            (AstType
              kwVar false
              ptrDim 0
              child (AstNamedType
                ident (AstIdent "T")
                genericImpl (AstGenericList mySeq [
                ])
              )
            )
          ])
        )
      )
      stmtSeq [
        (AstVar
          child (AstVarEtcDeclMost
            ident (AstIdent "result")
            type (AstType
              kwVar false
              ptrDim 0
              child (AstNamedType
                ident (AstIdent "Vec2")
                genericImpl (AstGenericList mySeq [
                  (AstType
                    kwVar false
                    ptrDim 0
                    child (AstNamedType
                      ident (AstIdent "T")
                      genericImpl (AstGenericList mySeq [
                      ])
                    )
                  )
                ])
              )
            )
          )
          optExpr !isSome
        )
        (AstFor
          ident (AstIdent "jdx")
          exprPre (AstU64Lit u64Val 0)
          exprPost (AstBinop
            kind binopMul
            left (AstU64Lit u64Val 8)
            right (AstU64Lit u64Val 3)
          )
          isUntil true
          stmtSeq [
            (AstIf
              expr (AstBinop
                kind binopCmpEq
                left (AstIdent "jdx")
                right (AstU64Lit u64Val 0)
              )
              stmtSeq [
                (AstFor
                  ident (AstIdent "idx")
                  exprPre (AstU64Lit u64Val 0)
                  exprPost (AstU64Lit u64Val 2)
                  isUntil true
                  stmtSeq [
                    (AstAssignEtc
                      kind assignEtcRegular
                      left (AstFuncCall
                        ident (AstIdent "at")
                        genericImpl (AstGenericList mySeq [
                        ])
                        argImplSeq [
                          (AstIdent "result")
                          (AstIdent "idx")
                        ]
                      )
                      right (AstFuncCall
                        ident (AstIdent "at")
                        genericImpl (AstGenericList mySeq [
                        ])
                        argImplSeq [
                          (AstFuncCall
                            ident (AstIdent "toSum")
                            genericImpl (AstGenericList mySeq [
                            ])
                            argImplSeq [
                              (AstU64Lit u64Val 0)
                            ]
                          )
                          (AstIdent "idx")
                        ]
                      )
                    )
                  ]
                )
              ]
              elifSeq [
              ]
              optElse (AstElse stmtSeq [
                (AstAssignEtc
                  kind assignEtcRegular
                  left (AstIdent "result")
                  right (AstFuncCall
                    ident (AstIdent "plus")
                    genericImpl (AstGenericList mySeq [
                    ])
                    argImplSeq [
                      (AstIdent "result")
                      (AstFuncCall
                        ident (AstIdent "toSum")
                        genericImpl (AstGenericList mySeq [
                        ])
                        argImplSeq [
                          (AstIdent "jdx")
                        ]
                      )
                    ]
                  )
                )
              ])
            )
          ]
        )
        (AstReturn optExpr (AstIdent "result"))
      ]
    )
  ]
  structDeclSeq [
    (AstStruct
      ident (AstIdent "Vec2")
      genericDecl (AstGenericList mySeq [
        (AstIdent "T")
      ])
      fieldSeq [
        (AstVarEtcDeclMost
          ident (AstIdent "x")
          type (AstType
            kwVar false
            ptrDim 0
            child (AstNamedType
              ident (AstIdent "T")
              genericImpl (AstGenericList mySeq [
              ])
            )
          )
        )
        (AstVarEtcDeclMost
          ident (AstIdent "y")
          type (AstType
            kwVar false
            ptrDim 0
            child (AstNamedType
              ident (AstIdent "T")
              genericImpl (AstGenericList mySeq [
              ])
            )
          )
        )
      ]
    )
    (AstStruct
      ident (AstIdent "Vec2Ptr")
      genericDecl (AstGenericList mySeq [
        (AstIdent "T")
      ])
      fieldSeq [
        (AstVarEtcDeclMost
          ident (AstIdent "x")
          type (AstType
            kwVar false
            ptrDim 1
            child (AstNamedType
              ident (AstIdent "T")
              genericImpl (AstGenericList mySeq [
              ])
            )
          )
        )
        (AstVarEtcDeclMost
          ident (AstIdent "y")
          type (AstType
            kwVar false
            ptrDim 1
            child (AstNamedType
              ident (AstIdent "T")
              genericImpl (AstGenericList mySeq [
              ])
            )
          )
        )
      ]
    )
    (AstStruct
      ident (AstIdent "Vec3Arr3Vec2")
      genericDecl (AstGenericList mySeq [
        (AstIdent "T")
      ])
      fieldSeq [
        (AstVarEtcDeclMost
          ident (AstIdent "x")
          type (AstType
            kwVar false
            ptrDim 0
            child (AstArray
              dim (AstU64Lit u64Val 3)
              elemType (AstType
                kwVar false
                ptrDim 0
                child (AstNamedType
                  ident (AstIdent "Vec2")
                  genericImpl (AstGenericList mySeq [
                    (AstType
                      kwVar false
                      ptrDim 0
                      child (AstNamedType
                        ident (AstIdent "T")
                        genericImpl (AstGenericList mySeq [
                        ])
                      )
                    )
                  ])
                )
              )
            )
          )
        )
        (AstVarEtcDeclMost
          ident (AstIdent "y")
          type (AstType
            kwVar false
            ptrDim 0
            child (AstArray
              dim (AstU64Lit u64Val 3)
              elemType (AstType
                kwVar false
                ptrDim 0
                child (AstNamedType
                  ident (AstIdent "Vec2")
                  genericImpl (AstGenericList mySeq [
                    (AstType
                      kwVar false
                      ptrDim 0
                      child (AstNamedType
                        ident (AstIdent "T")
                        genericImpl (AstGenericList mySeq [
                        ])
                      )
                    )
                  ])
                )
              )
            )
          )
        )
        (AstVarEtcDeclMost
          ident (AstIdent "z")
          type (AstType
            kwVar false
            ptrDim 0
            child (AstArray
              dim (AstU64Lit u64Val 3)
              elemType (AstType
                kwVar false
                ptrDim 0
                child (AstNamedType
                  ident (AstIdent "Vec2")
                  genericImpl (AstGenericList mySeq [
                    (AstType
                      kwVar false
                      ptrDim 0
                      child (AstNamedType
                        ident (AstIdent "T")
                        genericImpl (AstGenericList mySeq [
                        ])
                      )
                    )
                  ])
                )
              )
            )
          )
        )
      ]
    )
  ]
), sym: ..., tbl: {"Vec2": @[0], "Vec2Ptr": @[1], "Vec3Arr3Vec2": @[2], "dot": @[3]}, parent: ..., childSeq: ...)
curr: (ast: (AstDef
  ident (AstIdent "dot")
  genericDecl (AstGenericList mySeq [
    (AstIdent "T")
  ])
  argDeclSeq [
    (AstVarEtcDeclMost
      ident (AstIdent "a")
      type (AstType
        kwVar true
        ptrDim 0
        child (AstNamedType
          ident (AstIdent "Vec2")
          genericImpl (AstGenericList mySeq [
            (AstType
              kwVar false
              ptrDim 0
              child (AstNamedType
                ident (AstIdent "T")
                genericImpl (AstGenericList mySeq [
                ])
              )
            )
          ])
        )
      )
    )
    (AstVarEtcDeclMost
      ident (AstIdent "b")
      type (AstType
        kwVar true
        ptrDim 0
        child (AstNamedType
          ident (AstIdent "Vec2")
          genericImpl (AstGenericList mySeq [
            (AstType
              kwVar false
              ptrDim 0
              child (AstNamedType
                ident (AstIdent "T")
                genericImpl (AstGenericList mySeq [
                ])
              )
            )
          ])
        )
      )
    )
  ]
  returnType (AstType
    kwVar false
    ptrDim 0
    child (AstNamedType
      ident (AstIdent "T")
      genericImpl (AstGenericList mySeq [
      ])
    )
  )
  stmtSeq [
    (AstConst
      child (AstVarEtcDeclMost
        ident (AstIdent "result")
        type (AstType
          kwVar false
          ptrDim 0
          child (AstNamedType
            ident (AstIdent "T")
            genericImpl (AstGenericList mySeq [
            ])
          )
        )
      )
      expr (AstBinop
        kind binopPlus
        left (AstBinop
          kind binopMul
          left (AstDot
            left (AstIdent "a")
            right (AstIdent "x")
          )
          right (AstDot
            left (AstIdent "b")
            right (AstIdent "x")
          )
        )
        right (AstBinop
          kind binopMul
          left (AstDot
            left (AstIdent "a")
            right (AstIdent "y")
          )
          right (AstDot
            left (AstIdent "b")
            right (AstIdent "y")
          )
        )
      )
    )
    (AstReturn optExpr (AstIdent "result"))
  ]
), sym: ..., tbl: {"T": @[0], "a": @[1], "b": @[2], "<result>": @[3]}, parent: ..., childSeq: ...) 4
argSym.get(): (inputFname: "test.scone", name: "dot", kind: symFuncDecl, initValAst: none(AstNode), typeInfo: ...)
argSym.get().typeInfo: (main: (inputFname: "test.scone", name: none(string), funcVar: false, ptrDim: 0, arrDim: 0, ast: nil), kind: tiFunc, myFunc: (genericIdxSeq: @[], argIdxSeq: @[1, 2], returnTypeIdx: 3))
----
gotoParentSymTbl: parent != nil: true
addChildSymTbl: childSeq.len(): 4
addChildSymTbl: post set parent: true 5
addSym: sym: (inputFname: "test.scone", name: "plus", kind: symFuncDecl, initValAst: none(AstNode), typeInfo: ...)
addSym: tinfo: (main: (inputFname: "test.scone", name: none(string), funcVar: false, ptrDim: 0, arrDim: 0, ast: nil), kind: tiFunc, myFunc: (genericIdxSeq: @[], argIdxSeq: @[], returnTypeIdx: 0))
addsym: testificate: 4
addChildSymTbl: childSeq.len(): 0
addChildSymTbl: post set parent: true 1
addSym: sym: (inputFname: "test.scone", name: "T", kind: symGenericDecl, initValAst: none(AstNode), typeInfo: ...)
addSym: tinfo: (main: (inputFname: "test.scone", name: none(string), funcVar: false, ptrDim: 0, arrDim: 0, ast: nil), kind: tiToResolve, myToResolve: ())
addsym: testificate: 0
debug: 
curr.parent: (ast: (AstDef
  ident (AstIdent "plus")
  genericDecl (AstGenericList mySeq [
    (AstIdent "T")
  ])
  argDeclSeq [
    (AstVarEtcDeclMost
      ident (AstIdent "a")
      type (AstType
        kwVar true
        ptrDim 0
        child (AstNamedType
          ident (AstIdent "T")
          genericImpl (AstGenericList mySeq [
          ])
        )
      )
    )
    (AstVarEtcDeclMost
      ident (AstIdent "b")
      type (AstType
        kwVar true
        ptrDim 0
        child (AstNamedType
          ident (AstIdent "T")
          genericImpl (AstGenericList mySeq [
          ])
        )
      )
    )
  ]
  returnType (AstType
    kwVar false
    ptrDim 0
    child (AstNamedType
      ident (AstIdent "T")
      genericImpl (AstGenericList mySeq [
      ])
    )
  )
  stmtSeq [
    (AstReturn optExpr (AstBinop
      kind binopPlus
      left (AstIdent "a")
      right (AstIdent "b")
    ))
  ]
), sym: ..., tbl: {"T": @[0]}, parent: ..., childSeq: ...)
curr: (ast: (AstIdent "T"), sym: ..., tbl: {:}, parent: ..., childSeq: ...) 0
argSym.get(): (inputFname: "test.scone", name: "T", kind: symGenericDecl, initValAst: none(AstNode), typeInfo: ...)
argSym.get().typeInfo: (main: (inputFname: "test.scone", name: none(string), funcVar: false, ptrDim: 0, arrDim: 0, ast: nil), kind: tiToResolve, myToResolve: ())
----
gotoParentSymTbl: parent != nil: true
addChildSymTbl: childSeq.len(): 1
addChildSymTbl: post set parent: true 2
addSym: sym: (inputFname: "test.scone", name: "a", kind: symVar, initValAst: none(AstNode), typeInfo: ...)
addSym: tinfo: (main: (inputFname: "test.scone", name: some("T"), funcVar: true, ptrDim: 0, arrDim: 0, ast: (AstNamedType
  ident (AstIdent "T")
  genericImpl (AstGenericList mySeq [
  ])
)), kind: tiToResolve, myToResolve: ())
addsym: testificate: 1
debug: 
curr.parent: (ast: (AstDef
  ident (AstIdent "plus")
  genericDecl (AstGenericList mySeq [
    (AstIdent "T")
  ])
  argDeclSeq [
    (AstVarEtcDeclMost
      ident (AstIdent "a")
      type (AstType
        kwVar true
        ptrDim 0
        child (AstNamedType
          ident (AstIdent "T")
          genericImpl (AstGenericList mySeq [
          ])
        )
      )
    )
    (AstVarEtcDeclMost
      ident (AstIdent "b")
      type (AstType
        kwVar true
        ptrDim 0
        child (AstNamedType
          ident (AstIdent "T")
          genericImpl (AstGenericList mySeq [
          ])
        )
      )
    )
  ]
  returnType (AstType
    kwVar false
    ptrDim 0
    child (AstNamedType
      ident (AstIdent "T")
      genericImpl (AstGenericList mySeq [
      ])
    )
  )
  stmtSeq [
    (AstReturn optExpr (AstBinop
      kind binopPlus
      left (AstIdent "a")
      right (AstIdent "b")
    ))
  ]
), sym: ..., tbl: {"T": @[0], "a": @[1]}, parent: ..., childSeq: ...)
curr: (ast: (AstIdent "a"), sym: ..., tbl: {:}, parent: ..., childSeq: ...) 0
argSym.get(): (inputFname: "test.scone", name: "a", kind: symVar, initValAst: none(AstNode), typeInfo: ...)
argSym.get().typeInfo: (main: (inputFname: "test.scone", name: some("T"), funcVar: true, ptrDim: 0, arrDim: 0, ast: (AstNamedType
  ident (AstIdent "T")
  genericImpl (AstGenericList mySeq [
  ])
)), kind: tiToResolve, myToResolve: ())
----
gotoParentSymTbl: parent != nil: true
addChildSymTbl: childSeq.len(): 2
addChildSymTbl: post set parent: true 3
addSym: sym: (inputFname: "test.scone", name: "b", kind: symVar, initValAst: none(AstNode), typeInfo: ...)
addSym: tinfo: (main: (inputFname: "test.scone", name: some("T"), funcVar: true, ptrDim: 0, arrDim: 0, ast: (AstNamedType
  ident (AstIdent "T")
  genericImpl (AstGenericList mySeq [
  ])
)), kind: tiToResolve, myToResolve: ())
addsym: testificate: 2
debug: 
curr.parent: (ast: (AstDef
  ident (AstIdent "plus")
  genericDecl (AstGenericList mySeq [
    (AstIdent "T")
  ])
  argDeclSeq [
    (AstVarEtcDeclMost
      ident (AstIdent "a")
      type (AstType
        kwVar true
        ptrDim 0
        child (AstNamedType
          ident (AstIdent "T")
          genericImpl (AstGenericList mySeq [
          ])
        )
      )
    )
    (AstVarEtcDeclMost
      ident (AstIdent "b")
      type (AstType
        kwVar true
        ptrDim 0
        child (AstNamedType
          ident (AstIdent "T")
          genericImpl (AstGenericList mySeq [
          ])
        )
      )
    )
  ]
  returnType (AstType
    kwVar false
    ptrDim 0
    child (AstNamedType
      ident (AstIdent "T")
      genericImpl (AstGenericList mySeq [
      ])
    )
  )
  stmtSeq [
    (AstReturn optExpr (AstBinop
      kind binopPlus
      left (AstIdent "a")
      right (AstIdent "b")
    ))
  ]
), sym: ..., tbl: {"T": @[0], "a": @[1], "b": @[2]}, parent: ..., childSeq: ...)
curr: (ast: (AstIdent "b"), sym: ..., tbl: {:}, parent: ..., childSeq: ...) 0
argSym.get(): (inputFname: "test.scone", name: "b", kind: symVar, initValAst: none(AstNode), typeInfo: ...)
argSym.get().typeInfo: (main: (inputFname: "test.scone", name: some("T"), funcVar: true, ptrDim: 0, arrDim: 0, ast: (AstNamedType
  ident (AstIdent "T")
  genericImpl (AstGenericList mySeq [
  ])
)), kind: tiToResolve, myToResolve: ())
----
gotoParentSymTbl: parent != nil: true
addChildSymTbl: childSeq.len(): 3
addChildSymTbl: post set parent: true 4
addSym: sym: (inputFname: "test.scone", name: "<result>", kind: symVar, initValAst: none(AstNode), typeInfo: ...)
addSym: tinfo: (main: (inputFname: "test.scone", name: some("T"), funcVar: false, ptrDim: 0, arrDim: 0, ast: (AstNamedType
  ident (AstIdent "T")
  genericImpl (AstGenericList mySeq [
  ])
)), kind: tiToResolve, myToResolve: ())
addsym: testificate: 3
debug: 
curr.parent: (ast: (AstDef
  ident (AstIdent "plus")
  genericDecl (AstGenericList mySeq [
    (AstIdent "T")
  ])
  argDeclSeq [
    (AstVarEtcDeclMost
      ident (AstIdent "a")
      type (AstType
        kwVar true
        ptrDim 0
        child (AstNamedType
          ident (AstIdent "T")
          genericImpl (AstGenericList mySeq [
          ])
        )
      )
    )
    (AstVarEtcDeclMost
      ident (AstIdent "b")
      type (AstType
        kwVar true
        ptrDim 0
        child (AstNamedType
          ident (AstIdent "T")
          genericImpl (AstGenericList mySeq [
          ])
        )
      )
    )
  ]
  returnType (AstType
    kwVar false
    ptrDim 0
    child (AstNamedType
      ident (AstIdent "T")
      genericImpl (AstGenericList mySeq [
      ])
    )
  )
  stmtSeq [
    (AstReturn optExpr (AstBinop
      kind binopPlus
      left (AstIdent "a")
      right (AstIdent "b")
    ))
  ]
), sym: ..., tbl: {"T": @[0], "a": @[1], "b": @[2], "<result>": @[3]}, parent: ..., childSeq: ...)
curr: (ast: (AstType
  kwVar false
  ptrDim 0
  child (AstNamedType
    ident (AstIdent "T")
    genericImpl (AstGenericList mySeq [
    ])
  )
), sym: ..., tbl: {:}, parent: ..., childSeq: ...) 0
argSym.get(): (inputFname: "test.scone", name: "<result>", kind: symVar, initValAst: none(AstNode), typeInfo: ...)
argSym.get().typeInfo: (main: (inputFname: "test.scone", name: some("T"), funcVar: false, ptrDim: 0, arrDim: 0, ast: (AstNamedType
  ident (AstIdent "T")
  genericImpl (AstGenericList mySeq [
  ])
)), kind: tiToResolve, myToResolve: ())
----
gotoParentSymTbl: parent != nil: true
debug: 
curr.parent: (ast: (AstSrcFile
  module (AstModule ident (AstIdent "myModule"))
  funcDeclSeq [
    (AstDef
      ident (AstIdent "dot")
      genericDecl (AstGenericList mySeq [
        (AstIdent "T")
      ])
      argDeclSeq [
        (AstVarEtcDeclMost
          ident (AstIdent "a")
          type (AstType
            kwVar true
            ptrDim 0
            child (AstNamedType
              ident (AstIdent "Vec2")
              genericImpl (AstGenericList mySeq [
                (AstType
                  kwVar false
                  ptrDim 0
                  child (AstNamedType
                    ident (AstIdent "T")
                    genericImpl (AstGenericList mySeq [
                    ])
                  )
                )
              ])
            )
          )
        )
        (AstVarEtcDeclMost
          ident (AstIdent "b")
          type (AstType
            kwVar true
            ptrDim 0
            child (AstNamedType
              ident (AstIdent "Vec2")
              genericImpl (AstGenericList mySeq [
                (AstType
                  kwVar false
                  ptrDim 0
                  child (AstNamedType
                    ident (AstIdent "T")
                    genericImpl (AstGenericList mySeq [
                    ])
                  )
                )
              ])
            )
          )
        )
      ]
      returnType (AstType
        kwVar false
        ptrDim 0
        child (AstNamedType
          ident (AstIdent "T")
          genericImpl (AstGenericList mySeq [
          ])
        )
      )
      stmtSeq [
        (AstConst
          child (AstVarEtcDeclMost
            ident (AstIdent "result")
            type (AstType
              kwVar false
              ptrDim 0
              child (AstNamedType
                ident (AstIdent "T")
                genericImpl (AstGenericList mySeq [
                ])
              )
            )
          )
          expr (AstBinop
            kind binopPlus
            left (AstBinop
              kind binopMul
              left (AstDot
                left (AstIdent "a")
                right (AstIdent "x")
              )
              right (AstDot
                left (AstIdent "b")
                right (AstIdent "x")
              )
            )
            right (AstBinop
              kind binopMul
              left (AstDot
                left (AstIdent "a")
                right (AstIdent "y")
              )
              right (AstDot
                left (AstIdent "b")
                right (AstIdent "y")
              )
            )
          )
        )
        (AstReturn optExpr (AstIdent "result"))
      ]
    )
    (AstDef
      ident (AstIdent "plus")
      genericDecl (AstGenericList mySeq [
        (AstIdent "T")
      ])
      argDeclSeq [
        (AstVarEtcDeclMost
          ident (AstIdent "a")
          type (AstType
            kwVar true
            ptrDim 0
            child (AstNamedType
              ident (AstIdent "T")
              genericImpl (AstGenericList mySeq [
              ])
            )
          )
        )
        (AstVarEtcDeclMost
          ident (AstIdent "b")
          type (AstType
            kwVar true
            ptrDim 0
            child (AstNamedType
              ident (AstIdent "T")
              genericImpl (AstGenericList mySeq [
              ])
            )
          )
        )
      ]
      returnType (AstType
        kwVar false
        ptrDim 0
        child (AstNamedType
          ident (AstIdent "T")
          genericImpl (AstGenericList mySeq [
          ])
        )
      )
      stmtSeq [
        (AstReturn optExpr (AstBinop
          kind binopPlus
          left (AstIdent "a")
          right (AstIdent "b")
        ))
      ]
    )
    (AstDef
      ident (AstIdent "plus")
      genericDecl (AstGenericList mySeq [
        (AstIdent "T")
      ])
      argDeclSeq [
        (AstVarEtcDeclMost
          ident (AstIdent "a")
          type (AstType
            kwVar true
            ptrDim 0
            child (AstNamedType
              ident (AstIdent "Vec2")
              genericImpl (AstGenericList mySeq [
                (AstType
                  kwVar false
                  ptrDim 0
                  child (AstNamedType
                    ident (AstIdent "T")
                    genericImpl (AstGenericList mySeq [
                    ])
                  )
                )
              ])
            )
          )
        )
        (AstVarEtcDeclMost
          ident (AstIdent "b")
          type (AstType
            kwVar true
            ptrDim 0
            child (AstNamedType
              ident (AstIdent "Vec2")
              genericImpl (AstGenericList mySeq [
                (AstType
                  kwVar false
                  ptrDim 0
                  child (AstNamedType
                    ident (AstIdent "T")
                    genericImpl (AstGenericList mySeq [
                    ])
                  )
                )
              ])
            )
          )
        )
      ]
      returnType (AstType
        kwVar false
        ptrDim 0
        child (AstNamedType
          ident (AstIdent "Vec2")
          genericImpl (AstGenericList mySeq [
            (AstType
              kwVar false
              ptrDim 0
              child (AstNamedType
                ident (AstIdent "T")
                genericImpl (AstGenericList mySeq [
                ])
              )
            )
          ])
        )
      )
      stmtSeq [
        (AstVar
          child (AstVarEtcDeclMost
            ident (AstIdent "result")
            type (AstType
              kwVar false
              ptrDim 0
              child (AstNamedType
                ident (AstIdent "Vec2")
                genericImpl (AstGenericList mySeq [
                  (AstType
                    kwVar false
                    ptrDim 0
                    child (AstNamedType
                      ident (AstIdent "T")
                      genericImpl (AstGenericList mySeq [
                      ])
                    )
                  )
                ])
              )
            )
          )
          optExpr !isSome
        )
        (AstFor
          ident (AstIdent "idx")
          exprPre (AstU64Lit u64Val 0)
          exprPost (AstU64Lit u64Val 2)
          isUntil true
          stmtSeq [
            (AstAssignEtc
              kind assignEtcRegular
              left (AstFuncCall
                ident (AstIdent "at")
                genericImpl (AstGenericList mySeq [
                ])
                argImplSeq [
                  (AstIdent "result")
                  (AstIdent "idx")
                ]
              )
              right (AstBinop
                kind binopPlus
                left (AstFuncCall
                  ident (AstIdent "at")
                  genericImpl (AstGenericList mySeq [
                  ])
                  argImplSeq [
                    (AstIdent "a")
                    (AstIdent "idx")
                  ]
                )
                right (AstFuncCall
                  ident (AstIdent "at")
                  genericImpl (AstGenericList mySeq [
                  ])
                  argImplSeq [
                    (AstIdent "b")
                    (AstIdent "idx")
                  ]
                )
              )
            )
          ]
        )
        (AstReturn optExpr (AstIdent "result"))
      ]
    )
    (AstDef
      ident (AstIdent "times")
      genericDecl (AstGenericList mySeq [
        (AstIdent "T")
      ])
      argDeclSeq [
        (AstVarEtcDeclMost
          ident (AstIdent "a")
          type (AstType
            kwVar false
            ptrDim 0
            child (AstNamedType
              ident (AstIdent "T")
              genericImpl (AstGenericList mySeq [
              ])
            )
          )
        )
        (AstVarEtcDeclMost
          ident (AstIdent "b")
          type (AstType
            kwVar false
            ptrDim 0
            child (AstNamedType
              ident (AstIdent "T")
              genericImpl (AstGenericList mySeq [
              ])
            )
          )
        )
      ]
      returnType (AstType
        kwVar false
        ptrDim 0
        child (AstNamedType
          ident (AstIdent "T")
          genericImpl (AstGenericList mySeq [
          ])
        )
      )
      stmtSeq [
        (AstReturn optExpr (AstBinop
          kind binopMul
          left (AstIdent "a")
          right (AstIdent "b")
        ))
      ]
    )
    (AstDef
      ident (AstIdent "times")
      genericDecl (AstGenericList mySeq [
        (AstIdent "T")
      ])
      argDeclSeq [
        (AstVarEtcDeclMost
          ident (AstIdent "a")
          type (AstType
            kwVar false
            ptrDim 0
            child (AstNamedType
              ident (AstIdent "Vec2")
              genericImpl (AstGenericList mySeq [
                (AstType
                  kwVar false
                  ptrDim 0
                  child (AstNamedType
                    ident (AstIdent "T")
                    genericImpl (AstGenericList mySeq [
                    ])
                  )
                )
              ])
            )
          )
        )
        (AstVarEtcDeclMost
          ident (AstIdent "scale")
          type (AstType
            kwVar false
            ptrDim 0
            child (AstNamedType
              ident (AstIdent "T")
              genericImpl (AstGenericList mySeq [
              ])
            )
          )
        )
      ]
      returnType (AstType
        kwVar false
        ptrDim 0
        child (AstNamedType
          ident (AstIdent "Vec2")
          genericImpl (AstGenericList mySeq [
            (AstType
              kwVar false
              ptrDim 0
              child (AstNamedType
                ident (AstIdent "T")
                genericImpl (AstGenericList mySeq [
                ])
              )
            )
          ])
        )
      )
      stmtSeq [
        (AstVar
          child (AstVarEtcDeclMost
            ident (AstIdent "result")
            type (AstType
              kwVar false
              ptrDim 0
              child (AstNamedType
                ident (AstIdent "Vec2")
                genericImpl (AstGenericList mySeq [
                  (AstType
                    kwVar false
                    ptrDim 0
                    child (AstNamedType
                      ident (AstIdent "T")
                      genericImpl (AstGenericList mySeq [
                      ])
                    )
                  )
                ])
              )
            )
          )
          optExpr !isSome
        )
        (AstFor
          ident (AstIdent "idx")
          exprPre (AstU64Lit u64Val 0)
          exprPost (AstU64Lit u64Val 2)
          isUntil true
          stmtSeq [
            (AstAssignEtc
              kind assignEtcRegular
              left (AstFuncCall
                ident (AstIdent "at")
                genericImpl (AstGenericList mySeq [
                ])
                argImplSeq [
                  (AstIdent "result")
                  (AstIdent "idx")
                ]
              )
              right (AstFuncCall
                ident (AstIdent "times")
                genericImpl (AstGenericList mySeq [
                ])
                argImplSeq [
                  (AstFuncCall
                    ident (AstIdent "at")
                    genericImpl (AstGenericList mySeq [
                    ])
                    argImplSeq [
                      (AstIdent "a")
                      (AstIdent "idx")
                    ]
                  )
                  (AstIdent "scale")
                ]
              )
            )
          ]
        )
        (AstReturn optExpr (AstIdent "result"))
      ]
    )
    (AstDef
      ident (AstIdent "at")
      genericDecl (AstGenericList mySeq [
        (AstIdent "T")
      ])
      argDeclSeq [
        (AstVarEtcDeclMost
          ident (AstIdent "self")
          type (AstType
            kwVar true
            ptrDim 0
            child (AstNamedType
              ident (AstIdent "Vec2")
              genericImpl (AstGenericList mySeq [
                (AstType
                  kwVar false
                  ptrDim 0
                  child (AstNamedType
                    ident (AstIdent "T")
                    genericImpl (AstGenericList mySeq [
                    ])
                  )
                )
              ])
            )
          )
        )
        (AstVarEtcDeclMost
          ident (AstIdent "idx")
          type (AstType
            kwVar false
            ptrDim 0
            child (AstBasicType kind basicTypeU32)
          )
        )
      ]
      returnType (AstType
        kwVar true
        ptrDim 0
        child (AstNamedType
          ident (AstIdent "T")
          genericImpl (AstGenericList mySeq [
          ])
        )
      )
      stmtSeq [
        (AstIf
          expr (AstBinop
            kind binopCmpEq
            left (AstIdent "idx")
            right (AstU64Lit u64Val 0)
          )
          stmtSeq [
            (AstReturn optExpr (AstDot
              left (AstIdent "self")
              right (AstIdent "x")
            ))
          ]
          elifSeq [
          ]
          optElse (AstElse stmtSeq [
            (AstReturn optExpr (AstDot
              left (AstIdent "self")
              right (AstIdent "y")
            ))
          ])
        )
      ]
    )
    (AstDef
      ident (AstIdent "sum")
      genericDecl (AstGenericList mySeq [
        (AstIdent "T")
      ])
      argDeclSeq [
        (AstVarEtcDeclMost
          ident (AstIdent "toSum")
          type (AstType
            kwVar true
            ptrDim 0
            child (AstArray
              dim (AstBinop
                kind binopMul
                left (AstU64Lit u64Val 8)
                right (AstU64Lit u64Val 3)
              )
              elemType (AstType
                kwVar false
                ptrDim 0
                child (AstNamedType
                  ident (AstIdent "Vec2")
                  genericImpl (AstGenericList mySeq [
                    (AstType
                      kwVar false
                      ptrDim 0
                      child (AstNamedType
                        ident (AstIdent "T")
                        genericImpl (AstGenericList mySeq [
                        ])
                      )
                    )
                  ])
                )
              )
            )
          )
        )
      ]
      returnType (AstType
        kwVar false
        ptrDim 0
        child (AstNamedType
          ident (AstIdent "Vec2")
          genericImpl (AstGenericList mySeq [
            (AstType
              kwVar false
              ptrDim 0
              child (AstNamedType
                ident (AstIdent "T")
                genericImpl (AstGenericList mySeq [
                ])
              )
            )
          ])
        )
      )
      stmtSeq [
        (AstVar
          child (AstVarEtcDeclMost
            ident (AstIdent "result")
            type (AstType
              kwVar false
              ptrDim 0
              child (AstNamedType
                ident (AstIdent "Vec2")
                genericImpl (AstGenericList mySeq [
                  (AstType
                    kwVar false
                    ptrDim 0
                    child (AstNamedType
                      ident (AstIdent "T")
                      genericImpl (AstGenericList mySeq [
                      ])
                    )
                  )
                ])
              )
            )
          )
          optExpr !isSome
        )
        (AstFor
          ident (AstIdent "jdx")
          exprPre (AstU64Lit u64Val 0)
          exprPost (AstBinop
            kind binopMul
            left (AstU64Lit u64Val 8)
            right (AstU64Lit u64Val 3)
          )
          isUntil true
          stmtSeq [
            (AstIf
              expr (AstBinop
                kind binopCmpEq
                left (AstIdent "jdx")
                right (AstU64Lit u64Val 0)
              )
              stmtSeq [
                (AstFor
                  ident (AstIdent "idx")
                  exprPre (AstU64Lit u64Val 0)
                  exprPost (AstU64Lit u64Val 2)
                  isUntil true
                  stmtSeq [
                    (AstAssignEtc
                      kind assignEtcRegular
                      left (AstFuncCall
                        ident (AstIdent "at")
                        genericImpl (AstGenericList mySeq [
                        ])
                        argImplSeq [
                          (AstIdent "result")
                          (AstIdent "idx")
                        ]
                      )
                      right (AstFuncCall
                        ident (AstIdent "at")
                        genericImpl (AstGenericList mySeq [
                        ])
                        argImplSeq [
                          (AstFuncCall
                            ident (AstIdent "toSum")
                            genericImpl (AstGenericList mySeq [
                            ])
                            argImplSeq [
                              (AstU64Lit u64Val 0)
                            ]
                          )
                          (AstIdent "idx")
                        ]
                      )
                    )
                  ]
                )
              ]
              elifSeq [
              ]
              optElse (AstElse stmtSeq [
                (AstAssignEtc
                  kind assignEtcRegular
                  left (AstIdent "result")
                  right (AstFuncCall
                    ident (AstIdent "plus")
                    genericImpl (AstGenericList mySeq [
                    ])
                    argImplSeq [
                      (AstIdent "result")
                      (AstFuncCall
                        ident (AstIdent "toSum")
                        genericImpl (AstGenericList mySeq [
                        ])
                        argImplSeq [
                          (AstIdent "jdx")
                        ]
                      )
                    ]
                  )
                )
              ])
            )
          ]
        )
        (AstReturn optExpr (AstIdent "result"))
      ]
    )
  ]
  structDeclSeq [
    (AstStruct
      ident (AstIdent "Vec2")
      genericDecl (AstGenericList mySeq [
        (AstIdent "T")
      ])
      fieldSeq [
        (AstVarEtcDeclMost
          ident (AstIdent "x")
          type (AstType
            kwVar false
            ptrDim 0
            child (AstNamedType
              ident (AstIdent "T")
              genericImpl (AstGenericList mySeq [
              ])
            )
          )
        )
        (AstVarEtcDeclMost
          ident (AstIdent "y")
          type (AstType
            kwVar false
            ptrDim 0
            child (AstNamedType
              ident (AstIdent "T")
              genericImpl (AstGenericList mySeq [
              ])
            )
          )
        )
      ]
    )
    (AstStruct
      ident (AstIdent "Vec2Ptr")
      genericDecl (AstGenericList mySeq [
        (AstIdent "T")
      ])
      fieldSeq [
        (AstVarEtcDeclMost
          ident (AstIdent "x")
          type (AstType
            kwVar false
            ptrDim 1
            child (AstNamedType
              ident (AstIdent "T")
              genericImpl (AstGenericList mySeq [
              ])
            )
          )
        )
        (AstVarEtcDeclMost
          ident (AstIdent "y")
          type (AstType
            kwVar false
            ptrDim 1
            child (AstNamedType
              ident (AstIdent "T")
              genericImpl (AstGenericList mySeq [
              ])
            )
          )
        )
      ]
    )
    (AstStruct
      ident (AstIdent "Vec3Arr3Vec2")
      genericDecl (AstGenericList mySeq [
        (AstIdent "T")
      ])
      fieldSeq [
        (AstVarEtcDeclMost
          ident (AstIdent "x")
          type (AstType
            kwVar false
            ptrDim 0
            child (AstArray
              dim (AstU64Lit u64Val 3)
              elemType (AstType
                kwVar false
                ptrDim 0
                child (AstNamedType
                  ident (AstIdent "Vec2")
                  genericImpl (AstGenericList mySeq [
                    (AstType
                      kwVar false
                      ptrDim 0
                      child (AstNamedType
                        ident (AstIdent "T")
                        genericImpl (AstGenericList mySeq [
                        ])
                      )
                    )
                  ])
                )
              )
            )
          )
        )
        (AstVarEtcDeclMost
          ident (AstIdent "y")
          type (AstType
            kwVar false
            ptrDim 0
            child (AstArray
              dim (AstU64Lit u64Val 3)
              elemType (AstType
                kwVar false
                ptrDim 0
                child (AstNamedType
                  ident (AstIdent "Vec2")
                  genericImpl (AstGenericList mySeq [
                    (AstType
                      kwVar false
                      ptrDim 0
                      child (AstNamedType
                        ident (AstIdent "T")
                        genericImpl (AstGenericList mySeq [
                        ])
                      )
                    )
                  ])
                )
              )
            )
          )
        )
        (AstVarEtcDeclMost
          ident (AstIdent "z")
          type (AstType
            kwVar false
            ptrDim 0
            child (AstArray
              dim (AstU64Lit u64Val 3)
              elemType (AstType
                kwVar false
                ptrDim 0
                child (AstNamedType
                  ident (AstIdent "Vec2")
                  genericImpl (AstGenericList mySeq [
                    (AstType
                      kwVar false
                      ptrDim 0
                      child (AstNamedType
                        ident (AstIdent "T")
                        genericImpl (AstGenericList mySeq [
                        ])
                      )
                    )
                  ])
                )
              )
            )
          )
        )
      ]
    )
  ]
), sym: ..., tbl: {"Vec2": @[0], "Vec2Ptr": @[1], "Vec3Arr3Vec2": @[2], "dot": @[3], "plus": @[4]}, parent: ..., childSeq: ...)
curr: (ast: (AstDef
  ident (AstIdent "plus")
  genericDecl (AstGenericList mySeq [
    (AstIdent "T")
  ])
  argDeclSeq [
    (AstVarEtcDeclMost
      ident (AstIdent "a")
      type (AstType
        kwVar true
        ptrDim 0
        child (AstNamedType
          ident (AstIdent "T")
          genericImpl (AstGenericList mySeq [
          ])
        )
      )
    )
    (AstVarEtcDeclMost
      ident (AstIdent "b")
      type (AstType
        kwVar true
        ptrDim 0
        child (AstNamedType
          ident (AstIdent "T")
          genericImpl (AstGenericList mySeq [
          ])
        )
      )
    )
  ]
  returnType (AstType
    kwVar false
    ptrDim 0
    child (AstNamedType
      ident (AstIdent "T")
      genericImpl (AstGenericList mySeq [
      ])
    )
  )
  stmtSeq [
    (AstReturn optExpr (AstBinop
      kind binopPlus
      left (AstIdent "a")
      right (AstIdent "b")
    ))
  ]
), sym: ..., tbl: {"T": @[0], "a": @[1], "b": @[2], "<result>": @[3]}, parent: ..., childSeq: ...) 4
argSym.get(): (inputFname: "test.scone", name: "plus", kind: symFuncDecl, initValAst: none(AstNode), typeInfo: ...)
argSym.get().typeInfo: (main: (inputFname: "test.scone", name: none(string), funcVar: false, ptrDim: 0, arrDim: 0, ast: nil), kind: tiFunc, myFunc: (genericIdxSeq: @[], argIdxSeq: @[1, 2], returnTypeIdx: 3))
----
gotoParentSymTbl: parent != nil: true
addChildSymTbl: childSeq.len(): 5
addChildSymTbl: post set parent: true 6
addSym: sym: (inputFname: "test.scone", name: "plus", kind: symFuncDecl, initValAst: none(AstNode), typeInfo: ...)
addSym: tinfo: (main: (inputFname: "test.scone", name: none(string), funcVar: false, ptrDim: 0, arrDim: 0, ast: nil), kind: tiFunc, myFunc: (genericIdxSeq: @[], argIdxSeq: @[], returnTypeIdx: 0))
addChildSymTbl: childSeq.len(): 0
addChildSymTbl: post set parent: true 1
addSym: sym: (inputFname: "test.scone", name: "T", kind: symGenericDecl, initValAst: none(AstNode), typeInfo: ...)
addSym: tinfo: (main: (inputFname: "test.scone", name: none(string), funcVar: false, ptrDim: 0, arrDim: 0, ast: nil), kind: tiToResolve, myToResolve: ())
addsym: testificate: 0
debug: 
curr.parent: (ast: (AstDef
  ident (AstIdent "plus")
  genericDecl (AstGenericList mySeq [
    (AstIdent "T")
  ])
  argDeclSeq [
    (AstVarEtcDeclMost
      ident (AstIdent "a")
      type (AstType
        kwVar true
        ptrDim 0
        child (AstNamedType
          ident (AstIdent "Vec2")
          genericImpl (AstGenericList mySeq [
            (AstType
              kwVar false
              ptrDim 0
              child (AstNamedType
                ident (AstIdent "T")
                genericImpl (AstGenericList mySeq [
                ])
              )
            )
          ])
        )
      )
    )
    (AstVarEtcDeclMost
      ident (AstIdent "b")
      type (AstType
        kwVar true
        ptrDim 0
        child (AstNamedType
          ident (AstIdent "Vec2")
          genericImpl (AstGenericList mySeq [
            (AstType
              kwVar false
              ptrDim 0
              child (AstNamedType
                ident (AstIdent "T")
                genericImpl (AstGenericList mySeq [
                ])
              )
            )
          ])
        )
      )
    )
  ]
  returnType (AstType
    kwVar false
    ptrDim 0
    child (AstNamedType
      ident (AstIdent "Vec2")
      genericImpl (AstGenericList mySeq [
        (AstType
          kwVar false
          ptrDim 0
          child (AstNamedType
            ident (AstIdent "T")
            genericImpl (AstGenericList mySeq [
            ])
          )
        )
      ])
    )
  )
  stmtSeq [
    (AstVar
      child (AstVarEtcDeclMost
        ident (AstIdent "result")
        type (AstType
          kwVar false
          ptrDim 0
          child (AstNamedType
            ident (AstIdent "Vec2")
            genericImpl (AstGenericList mySeq [
              (AstType
                kwVar false
                ptrDim 0
                child (AstNamedType
                  ident (AstIdent "T")
                  genericImpl (AstGenericList mySeq [
                  ])
                )
              )
            ])
          )
        )
      )
      optExpr !isSome
    )
    (AstFor
      ident (AstIdent "idx")
      exprPre (AstU64Lit u64Val 0)
      exprPost (AstU64Lit u64Val 2)
      isUntil true
      stmtSeq [
        (AstAssignEtc
          kind assignEtcRegular
          left (AstFuncCall
            ident (AstIdent "at")
            genericImpl (AstGenericList mySeq [
            ])
            argImplSeq [
              (AstIdent "result")
              (AstIdent "idx")
            ]
          )
          right (AstBinop
            kind binopPlus
            left (AstFuncCall
              ident (AstIdent "at")
              genericImpl (AstGenericList mySeq [
              ])
              argImplSeq [
                (AstIdent "a")
                (AstIdent "idx")
              ]
            )
            right (AstFuncCall
              ident (AstIdent "at")
              genericImpl (AstGenericList mySeq [
              ])
              argImplSeq [
                (AstIdent "b")
                (AstIdent "idx")
              ]
            )
          )
        )
      ]
    )
    (AstReturn optExpr (AstIdent "result"))
  ]
), sym: ..., tbl: {"T": @[0]}, parent: ..., childSeq: ...)
curr: (ast: (AstIdent "T"), sym: ..., tbl: {:}, parent: ..., childSeq: ...) 0
argSym.get(): (inputFname: "test.scone", name: "T", kind: symGenericDecl, initValAst: none(AstNode), typeInfo: ...)
argSym.get().typeInfo: (main: (inputFname: "test.scone", name: none(string), funcVar: false, ptrDim: 0, arrDim: 0, ast: nil), kind: tiToResolve, myToResolve: ())
----
gotoParentSymTbl: parent != nil: true
addChildSymTbl: childSeq.len(): 1
addChildSymTbl: post set parent: true 2
addSym: sym: (inputFname: "test.scone", name: "a", kind: symVar, initValAst: none(AstNode), typeInfo: ...)
addSym: tinfo: (main: (inputFname: "test.scone", name: some("Vec2"), funcVar: true, ptrDim: 0, arrDim: 0, ast: (AstNamedType
  ident (AstIdent "Vec2")
  genericImpl (AstGenericList mySeq [
    (AstType
      kwVar false
      ptrDim 0
      child (AstNamedType
        ident (AstIdent "T")
        genericImpl (AstGenericList mySeq [
        ])
      )
    )
  ])
)), kind: tiToResolve, myToResolve: ())
addsym: testificate: 1
debug: 
curr.parent: (ast: (AstDef
  ident (AstIdent "plus")
  genericDecl (AstGenericList mySeq [
    (AstIdent "T")
  ])
  argDeclSeq [
    (AstVarEtcDeclMost
      ident (AstIdent "a")
      type (AstType
        kwVar true
        ptrDim 0
        child (AstNamedType
          ident (AstIdent "Vec2")
          genericImpl (AstGenericList mySeq [
            (AstType
              kwVar false
              ptrDim 0
              child (AstNamedType
                ident (AstIdent "T")
                genericImpl (AstGenericList mySeq [
                ])
              )
            )
          ])
        )
      )
    )
    (AstVarEtcDeclMost
      ident (AstIdent "b")
      type (AstType
        kwVar true
        ptrDim 0
        child (AstNamedType
          ident (AstIdent "Vec2")
          genericImpl (AstGenericList mySeq [
            (AstType
              kwVar false
              ptrDim 0
              child (AstNamedType
                ident (AstIdent "T")
                genericImpl (AstGenericList mySeq [
                ])
              )
            )
          ])
        )
      )
    )
  ]
  returnType (AstType
    kwVar false
    ptrDim 0
    child (AstNamedType
      ident (AstIdent "Vec2")
      genericImpl (AstGenericList mySeq [
        (AstType
          kwVar false
          ptrDim 0
          child (AstNamedType
            ident (AstIdent "T")
            genericImpl (AstGenericList mySeq [
            ])
          )
        )
      ])
    )
  )
  stmtSeq [
    (AstVar
      child (AstVarEtcDeclMost
        ident (AstIdent "result")
        type (AstType
          kwVar false
          ptrDim 0
          child (AstNamedType
            ident (AstIdent "Vec2")
            genericImpl (AstGenericList mySeq [
              (AstType
                kwVar false
                ptrDim 0
                child (AstNamedType
                  ident (AstIdent "T")
                  genericImpl (AstGenericList mySeq [
                  ])
                )
              )
            ])
          )
        )
      )
      optExpr !isSome
    )
    (AstFor
      ident (AstIdent "idx")
      exprPre (AstU64Lit u64Val 0)
      exprPost (AstU64Lit u64Val 2)
      isUntil true
      stmtSeq [
        (AstAssignEtc
          kind assignEtcRegular
          left (AstFuncCall
            ident (AstIdent "at")
            genericImpl (AstGenericList mySeq [
            ])
            argImplSeq [
              (AstIdent "result")
              (AstIdent "idx")
            ]
          )
          right (AstBinop
            kind binopPlus
            left (AstFuncCall
              ident (AstIdent "at")
              genericImpl (AstGenericList mySeq [
              ])
              argImplSeq [
                (AstIdent "a")
                (AstIdent "idx")
              ]
            )
            right (AstFuncCall
              ident (AstIdent "at")
              genericImpl (AstGenericList mySeq [
              ])
              argImplSeq [
                (AstIdent "b")
                (AstIdent "idx")
              ]
            )
          )
        )
      ]
    )
    (AstReturn optExpr (AstIdent "result"))
  ]
), sym: ..., tbl: {"T": @[0], "a": @[1]}, parent: ..., childSeq: ...)
curr: (ast: (AstIdent "a"), sym: ..., tbl: {:}, parent: ..., childSeq: ...) 0
argSym.get(): (inputFname: "test.scone", name: "a", kind: symVar, initValAst: none(AstNode), typeInfo: ...)
argSym.get().typeInfo: (main: (inputFname: "test.scone", name: some("Vec2"), funcVar: true, ptrDim: 0, arrDim: 0, ast: (AstNamedType
  ident (AstIdent "Vec2")
  genericImpl (AstGenericList mySeq [
    (AstType
      kwVar false
      ptrDim 0
      child (AstNamedType
        ident (AstIdent "T")
        genericImpl (AstGenericList mySeq [
        ])
      )
    )
  ])
)), kind: tiToResolve, myToResolve: ())
----
gotoParentSymTbl: parent != nil: true
addChildSymTbl: childSeq.len(): 2
addChildSymTbl: post set parent: true 3
addSym: sym: (inputFname: "test.scone", name: "b", kind: symVar, initValAst: none(AstNode), typeInfo: ...)
addSym: tinfo: (main: (inputFname: "test.scone", name: some("Vec2"), funcVar: true, ptrDim: 0, arrDim: 0, ast: (AstNamedType
  ident (AstIdent "Vec2")
  genericImpl (AstGenericList mySeq [
    (AstType
      kwVar false
      ptrDim 0
      child (AstNamedType
        ident (AstIdent "T")
        genericImpl (AstGenericList mySeq [
        ])
      )
    )
  ])
)), kind: tiToResolve, myToResolve: ())
addsym: testificate: 2
debug: 
curr.parent: (ast: (AstDef
  ident (AstIdent "plus")
  genericDecl (AstGenericList mySeq [
    (AstIdent "T")
  ])
  argDeclSeq [
    (AstVarEtcDeclMost
      ident (AstIdent "a")
      type (AstType
        kwVar true
        ptrDim 0
        child (AstNamedType
          ident (AstIdent "Vec2")
          genericImpl (AstGenericList mySeq [
            (AstType
              kwVar false
              ptrDim 0
              child (AstNamedType
                ident (AstIdent "T")
                genericImpl (AstGenericList mySeq [
                ])
              )
            )
          ])
        )
      )
    )
    (AstVarEtcDeclMost
      ident (AstIdent "b")
      type (AstType
        kwVar true
        ptrDim 0
        child (AstNamedType
          ident (AstIdent "Vec2")
          genericImpl (AstGenericList mySeq [
            (AstType
              kwVar false
              ptrDim 0
              child (AstNamedType
                ident (AstIdent "T")
                genericImpl (AstGenericList mySeq [
                ])
              )
            )
          ])
        )
      )
    )
  ]
  returnType (AstType
    kwVar false
    ptrDim 0
    child (AstNamedType
      ident (AstIdent "Vec2")
      genericImpl (AstGenericList mySeq [
        (AstType
          kwVar false
          ptrDim 0
          child (AstNamedType
            ident (AstIdent "T")
            genericImpl (AstGenericList mySeq [
            ])
          )
        )
      ])
    )
  )
  stmtSeq [
    (AstVar
      child (AstVarEtcDeclMost
        ident (AstIdent "result")
        type (AstType
          kwVar false
          ptrDim 0
          child (AstNamedType
            ident (AstIdent "Vec2")
            genericImpl (AstGenericList mySeq [
              (AstType
                kwVar false
                ptrDim 0
                child (AstNamedType
                  ident (AstIdent "T")
                  genericImpl (AstGenericList mySeq [
                  ])
                )
              )
            ])
          )
        )
      )
      optExpr !isSome
    )
    (AstFor
      ident (AstIdent "idx")
      exprPre (AstU64Lit u64Val 0)
      exprPost (AstU64Lit u64Val 2)
      isUntil true
      stmtSeq [
        (AstAssignEtc
          kind assignEtcRegular
          left (AstFuncCall
            ident (AstIdent "at")
            genericImpl (AstGenericList mySeq [
            ])
            argImplSeq [
              (AstIdent "result")
              (AstIdent "idx")
            ]
          )
          right (AstBinop
            kind binopPlus
            left (AstFuncCall
              ident (AstIdent "at")
              genericImpl (AstGenericList mySeq [
              ])
              argImplSeq [
                (AstIdent "a")
                (AstIdent "idx")
              ]
            )
            right (AstFuncCall
              ident (AstIdent "at")
              genericImpl (AstGenericList mySeq [
              ])
              argImplSeq [
                (AstIdent "b")
                (AstIdent "idx")
              ]
            )
          )
        )
      ]
    )
    (AstReturn optExpr (AstIdent "result"))
  ]
), sym: ..., tbl: {"T": @[0], "a": @[1], "b": @[2]}, parent: ..., childSeq: ...)
curr: (ast: (AstIdent "b"), sym: ..., tbl: {:}, parent: ..., childSeq: ...) 0
argSym.get(): (inputFname: "test.scone", name: "b", kind: symVar, initValAst: none(AstNode), typeInfo: ...)
argSym.get().typeInfo: (main: (inputFname: "test.scone", name: some("Vec2"), funcVar: true, ptrDim: 0, arrDim: 0, ast: (AstNamedType
  ident (AstIdent "Vec2")
  genericImpl (AstGenericList mySeq [
    (AstType
      kwVar false
      ptrDim 0
      child (AstNamedType
        ident (AstIdent "T")
        genericImpl (AstGenericList mySeq [
        ])
      )
    )
  ])
)), kind: tiToResolve, myToResolve: ())
----
gotoParentSymTbl: parent != nil: true
addChildSymTbl: childSeq.len(): 3
addChildSymTbl: post set parent: true 4
addSym: sym: (inputFname: "test.scone", name: "<result>", kind: symVar, initValAst: none(AstNode), typeInfo: ...)
addSym: tinfo: (main: (inputFname: "test.scone", name: some("Vec2"), funcVar: false, ptrDim: 0, arrDim: 0, ast: (AstNamedType
  ident (AstIdent "Vec2")
  genericImpl (AstGenericList mySeq [
    (AstType
      kwVar false
      ptrDim 0
      child (AstNamedType
        ident (AstIdent "T")
        genericImpl (AstGenericList mySeq [
        ])
      )
    )
  ])
)), kind: tiToResolve, myToResolve: ())
addsym: testificate: 3
debug: 
curr.parent: (ast: (AstDef
  ident (AstIdent "plus")
  genericDecl (AstGenericList mySeq [
    (AstIdent "T")
  ])
  argDeclSeq [
    (AstVarEtcDeclMost
      ident (AstIdent "a")
      type (AstType
        kwVar true
        ptrDim 0
        child (AstNamedType
          ident (AstIdent "Vec2")
          genericImpl (AstGenericList mySeq [
            (AstType
              kwVar false
              ptrDim 0
              child (AstNamedType
                ident (AstIdent "T")
                genericImpl (AstGenericList mySeq [
                ])
              )
            )
          ])
        )
      )
    )
    (AstVarEtcDeclMost
      ident (AstIdent "b")
      type (AstType
        kwVar true
        ptrDim 0
        child (AstNamedType
          ident (AstIdent "Vec2")
          genericImpl (AstGenericList mySeq [
            (AstType
              kwVar false
              ptrDim 0
              child (AstNamedType
                ident (AstIdent "T")
                genericImpl (AstGenericList mySeq [
                ])
              )
            )
          ])
        )
      )
    )
  ]
  returnType (AstType
    kwVar false
    ptrDim 0
    child (AstNamedType
      ident (AstIdent "Vec2")
      genericImpl (AstGenericList mySeq [
        (AstType
          kwVar false
          ptrDim 0
          child (AstNamedType
            ident (AstIdent "T")
            genericImpl (AstGenericList mySeq [
            ])
          )
        )
      ])
    )
  )
  stmtSeq [
    (AstVar
      child (AstVarEtcDeclMost
        ident (AstIdent "result")
        type (AstType
          kwVar false
          ptrDim 0
          child (AstNamedType
            ident (AstIdent "Vec2")
            genericImpl (AstGenericList mySeq [
              (AstType
                kwVar false
                ptrDim 0
                child (AstNamedType
                  ident (AstIdent "T")
                  genericImpl (AstGenericList mySeq [
                  ])
                )
              )
            ])
          )
        )
      )
      optExpr !isSome
    )
    (AstFor
      ident (AstIdent "idx")
      exprPre (AstU64Lit u64Val 0)
      exprPost (AstU64Lit u64Val 2)
      isUntil true
      stmtSeq [
        (AstAssignEtc
          kind assignEtcRegular
          left (AstFuncCall
            ident (AstIdent "at")
            genericImpl (AstGenericList mySeq [
            ])
            argImplSeq [
              (AstIdent "result")
              (AstIdent "idx")
            ]
          )
          right (AstBinop
            kind binopPlus
            left (AstFuncCall
              ident (AstIdent "at")
              genericImpl (AstGenericList mySeq [
              ])
              argImplSeq [
                (AstIdent "a")
                (AstIdent "idx")
              ]
            )
            right (AstFuncCall
              ident (AstIdent "at")
              genericImpl (AstGenericList mySeq [
              ])
              argImplSeq [
                (AstIdent "b")
                (AstIdent "idx")
              ]
            )
          )
        )
      ]
    )
    (AstReturn optExpr (AstIdent "result"))
  ]
), sym: ..., tbl: {"T": @[0], "a": @[1], "b": @[2], "<result>": @[3]}, parent: ..., childSeq: ...)
curr: (ast: (AstType
  kwVar false
  ptrDim 0
  child (AstNamedType
    ident (AstIdent "Vec2")
    genericImpl (AstGenericList mySeq [
      (AstType
        kwVar false
        ptrDim 0
        child (AstNamedType
          ident (AstIdent "T")
          genericImpl (AstGenericList mySeq [
          ])
        )
      )
    ])
  )
), sym: ..., tbl: {:}, parent: ..., childSeq: ...) 0
argSym.get(): (inputFname: "test.scone", name: "<result>", kind: symVar, initValAst: none(AstNode), typeInfo: ...)
argSym.get().typeInfo: (main: (inputFname: "test.scone", name: some("Vec2"), funcVar: false, ptrDim: 0, arrDim: 0, ast: (AstNamedType
  ident (AstIdent "Vec2")
  genericImpl (AstGenericList mySeq [
    (AstType
      kwVar false
      ptrDim 0
      child (AstNamedType
        ident (AstIdent "T")
        genericImpl (AstGenericList mySeq [
        ])
      )
    )
  ])
)), kind: tiToResolve, myToResolve: ())
----
gotoParentSymTbl: parent != nil: true
debug: 
curr.parent: (ast: (AstSrcFile
  module (AstModule ident (AstIdent "myModule"))
  funcDeclSeq [
    (AstDef
      ident (AstIdent "dot")
      genericDecl (AstGenericList mySeq [
        (AstIdent "T")
      ])
      argDeclSeq [
        (AstVarEtcDeclMost
          ident (AstIdent "a")
          type (AstType
            kwVar true
            ptrDim 0
            child (AstNamedType
              ident (AstIdent "Vec2")
              genericImpl (AstGenericList mySeq [
                (AstType
                  kwVar false
                  ptrDim 0
                  child (AstNamedType
                    ident (AstIdent "T")
                    genericImpl (AstGenericList mySeq [
                    ])
                  )
                )
              ])
            )
          )
        )
        (AstVarEtcDeclMost
          ident (AstIdent "b")
          type (AstType
            kwVar true
            ptrDim 0
            child (AstNamedType
              ident (AstIdent "Vec2")
              genericImpl (AstGenericList mySeq [
                (AstType
                  kwVar false
                  ptrDim 0
                  child (AstNamedType
                    ident (AstIdent "T")
                    genericImpl (AstGenericList mySeq [
                    ])
                  )
                )
              ])
            )
          )
        )
      ]
      returnType (AstType
        kwVar false
        ptrDim 0
        child (AstNamedType
          ident (AstIdent "T")
          genericImpl (AstGenericList mySeq [
          ])
        )
      )
      stmtSeq [
        (AstConst
          child (AstVarEtcDeclMost
            ident (AstIdent "result")
            type (AstType
              kwVar false
              ptrDim 0
              child (AstNamedType
                ident (AstIdent "T")
                genericImpl (AstGenericList mySeq [
                ])
              )
            )
          )
          expr (AstBinop
            kind binopPlus
            left (AstBinop
              kind binopMul
              left (AstDot
                left (AstIdent "a")
                right (AstIdent "x")
              )
              right (AstDot
                left (AstIdent "b")
                right (AstIdent "x")
              )
            )
            right (AstBinop
              kind binopMul
              left (AstDot
                left (AstIdent "a")
                right (AstIdent "y")
              )
              right (AstDot
                left (AstIdent "b")
                right (AstIdent "y")
              )
            )
          )
        )
        (AstReturn optExpr (AstIdent "result"))
      ]
    )
    (AstDef
      ident (AstIdent "plus")
      genericDecl (AstGenericList mySeq [
        (AstIdent "T")
      ])
      argDeclSeq [
        (AstVarEtcDeclMost
          ident (AstIdent "a")
          type (AstType
            kwVar true
            ptrDim 0
            child (AstNamedType
              ident (AstIdent "T")
              genericImpl (AstGenericList mySeq [
              ])
            )
          )
        )
        (AstVarEtcDeclMost
          ident (AstIdent "b")
          type (AstType
            kwVar true
            ptrDim 0
            child (AstNamedType
              ident (AstIdent "T")
              genericImpl (AstGenericList mySeq [
              ])
            )
          )
        )
      ]
      returnType (AstType
        kwVar false
        ptrDim 0
        child (AstNamedType
          ident (AstIdent "T")
          genericImpl (AstGenericList mySeq [
          ])
        )
      )
      stmtSeq [
        (AstReturn optExpr (AstBinop
          kind binopPlus
          left (AstIdent "a")
          right (AstIdent "b")
        ))
      ]
    )
    (AstDef
      ident (AstIdent "plus")
      genericDecl (AstGenericList mySeq [
        (AstIdent "T")
      ])
      argDeclSeq [
        (AstVarEtcDeclMost
          ident (AstIdent "a")
          type (AstType
            kwVar true
            ptrDim 0
            child (AstNamedType
              ident (AstIdent "Vec2")
              genericImpl (AstGenericList mySeq [
                (AstType
                  kwVar false
                  ptrDim 0
                  child (AstNamedType
                    ident (AstIdent "T")
                    genericImpl (AstGenericList mySeq [
                    ])
                  )
                )
              ])
            )
          )
        )
        (AstVarEtcDeclMost
          ident (AstIdent "b")
          type (AstType
            kwVar true
            ptrDim 0
            child (AstNamedType
              ident (AstIdent "Vec2")
              genericImpl (AstGenericList mySeq [
                (AstType
                  kwVar false
                  ptrDim 0
                  child (AstNamedType
                    ident (AstIdent "T")
                    genericImpl (AstGenericList mySeq [
                    ])
                  )
                )
              ])
            )
          )
        )
      ]
      returnType (AstType
        kwVar false
        ptrDim 0
        child (AstNamedType
          ident (AstIdent "Vec2")
          genericImpl (AstGenericList mySeq [
            (AstType
              kwVar false
              ptrDim 0
              child (AstNamedType
                ident (AstIdent "T")
                genericImpl (AstGenericList mySeq [
                ])
              )
            )
          ])
        )
      )
      stmtSeq [
        (AstVar
          child (AstVarEtcDeclMost
            ident (AstIdent "result")
            type (AstType
              kwVar false
              ptrDim 0
              child (AstNamedType
                ident (AstIdent "Vec2")
                genericImpl (AstGenericList mySeq [
                  (AstType
                    kwVar false
                    ptrDim 0
                    child (AstNamedType
                      ident (AstIdent "T")
                      genericImpl (AstGenericList mySeq [
                      ])
                    )
                  )
                ])
              )
            )
          )
          optExpr !isSome
        )
        (AstFor
          ident (AstIdent "idx")
          exprPre (AstU64Lit u64Val 0)
          exprPost (AstU64Lit u64Val 2)
          isUntil true
          stmtSeq [
            (AstAssignEtc
              kind assignEtcRegular
              left (AstFuncCall
                ident (AstIdent "at")
                genericImpl (AstGenericList mySeq [
                ])
                argImplSeq [
                  (AstIdent "result")
                  (AstIdent "idx")
                ]
              )
              right (AstBinop
                kind binopPlus
                left (AstFuncCall
                  ident (AstIdent "at")
                  genericImpl (AstGenericList mySeq [
                  ])
                  argImplSeq [
                    (AstIdent "a")
                    (AstIdent "idx")
                  ]
                )
                right (AstFuncCall
                  ident (AstIdent "at")
                  genericImpl (AstGenericList mySeq [
                  ])
                  argImplSeq [
                    (AstIdent "b")
                    (AstIdent "idx")
                  ]
                )
              )
            )
          ]
        )
        (AstReturn optExpr (AstIdent "result"))
      ]
    )
    (AstDef
      ident (AstIdent "times")
      genericDecl (AstGenericList mySeq [
        (AstIdent "T")
      ])
      argDeclSeq [
        (AstVarEtcDeclMost
          ident (AstIdent "a")
          type (AstType
            kwVar false
            ptrDim 0
            child (AstNamedType
              ident (AstIdent "T")
              genericImpl (AstGenericList mySeq [
              ])
            )
          )
        )
        (AstVarEtcDeclMost
          ident (AstIdent "b")
          type (AstType
            kwVar false
            ptrDim 0
            child (AstNamedType
              ident (AstIdent "T")
              genericImpl (AstGenericList mySeq [
              ])
            )
          )
        )
      ]
      returnType (AstType
        kwVar false
        ptrDim 0
        child (AstNamedType
          ident (AstIdent "T")
          genericImpl (AstGenericList mySeq [
          ])
        )
      )
      stmtSeq [
        (AstReturn optExpr (AstBinop
          kind binopMul
          left (AstIdent "a")
          right (AstIdent "b")
        ))
      ]
    )
    (AstDef
      ident (AstIdent "times")
      genericDecl (AstGenericList mySeq [
        (AstIdent "T")
      ])
      argDeclSeq [
        (AstVarEtcDeclMost
          ident (AstIdent "a")
          type (AstType
            kwVar false
            ptrDim 0
            child (AstNamedType
              ident (AstIdent "Vec2")
              genericImpl (AstGenericList mySeq [
                (AstType
                  kwVar false
                  ptrDim 0
                  child (AstNamedType
                    ident (AstIdent "T")
                    genericImpl (AstGenericList mySeq [
                    ])
                  )
                )
              ])
            )
          )
        )
        (AstVarEtcDeclMost
          ident (AstIdent "scale")
          type (AstType
            kwVar false
            ptrDim 0
            child (AstNamedType
              ident (AstIdent "T")
              genericImpl (AstGenericList mySeq [
              ])
            )
          )
        )
      ]
      returnType (AstType
        kwVar false
        ptrDim 0
        child (AstNamedType
          ident (AstIdent "Vec2")
          genericImpl (AstGenericList mySeq [
            (AstType
              kwVar false
              ptrDim 0
              child (AstNamedType
                ident (AstIdent "T")
                genericImpl (AstGenericList mySeq [
                ])
              )
            )
          ])
        )
      )
      stmtSeq [
        (AstVar
          child (AstVarEtcDeclMost
            ident (AstIdent "result")
            type (AstType
              kwVar false
              ptrDim 0
              child (AstNamedType
                ident (AstIdent "Vec2")
                genericImpl (AstGenericList mySeq [
                  (AstType
                    kwVar false
                    ptrDim 0
                    child (AstNamedType
                      ident (AstIdent "T")
                      genericImpl (AstGenericList mySeq [
                      ])
                    )
                  )
                ])
              )
            )
          )
          optExpr !isSome
        )
        (AstFor
          ident (AstIdent "idx")
          exprPre (AstU64Lit u64Val 0)
          exprPost (AstU64Lit u64Val 2)
          isUntil true
          stmtSeq [
            (AstAssignEtc
              kind assignEtcRegular
              left (AstFuncCall
                ident (AstIdent "at")
                genericImpl (AstGenericList mySeq [
                ])
                argImplSeq [
                  (AstIdent "result")
                  (AstIdent "idx")
                ]
              )
              right (AstFuncCall
                ident (AstIdent "times")
                genericImpl (AstGenericList mySeq [
                ])
                argImplSeq [
                  (AstFuncCall
                    ident (AstIdent "at")
                    genericImpl (AstGenericList mySeq [
                    ])
                    argImplSeq [
                      (AstIdent "a")
                      (AstIdent "idx")
                    ]
                  )
                  (AstIdent "scale")
                ]
              )
            )
          ]
        )
        (AstReturn optExpr (AstIdent "result"))
      ]
    )
    (AstDef
      ident (AstIdent "at")
      genericDecl (AstGenericList mySeq [
        (AstIdent "T")
      ])
      argDeclSeq [
        (AstVarEtcDeclMost
          ident (AstIdent "self")
          type (AstType
            kwVar true
            ptrDim 0
            child (AstNamedType
              ident (AstIdent "Vec2")
              genericImpl (AstGenericList mySeq [
                (AstType
                  kwVar false
                  ptrDim 0
                  child (AstNamedType
                    ident (AstIdent "T")
                    genericImpl (AstGenericList mySeq [
                    ])
                  )
                )
              ])
            )
          )
        )
        (AstVarEtcDeclMost
          ident (AstIdent "idx")
          type (AstType
            kwVar false
            ptrDim 0
            child (AstBasicType kind basicTypeU32)
          )
        )
      ]
      returnType (AstType
        kwVar true
        ptrDim 0
        child (AstNamedType
          ident (AstIdent "T")
          genericImpl (AstGenericList mySeq [
          ])
        )
      )
      stmtSeq [
        (AstIf
          expr (AstBinop
            kind binopCmpEq
            left (AstIdent "idx")
            right (AstU64Lit u64Val 0)
          )
          stmtSeq [
            (AstReturn optExpr (AstDot
              left (AstIdent "self")
              right (AstIdent "x")
            ))
          ]
          elifSeq [
          ]
          optElse (AstElse stmtSeq [
            (AstReturn optExpr (AstDot
              left (AstIdent "self")
              right (AstIdent "y")
            ))
          ])
        )
      ]
    )
    (AstDef
      ident (AstIdent "sum")
      genericDecl (AstGenericList mySeq [
        (AstIdent "T")
      ])
      argDeclSeq [
        (AstVarEtcDeclMost
          ident (AstIdent "toSum")
          type (AstType
            kwVar true
            ptrDim 0
            child (AstArray
              dim (AstBinop
                kind binopMul
                left (AstU64Lit u64Val 8)
                right (AstU64Lit u64Val 3)
              )
              elemType (AstType
                kwVar false
                ptrDim 0
                child (AstNamedType
                  ident (AstIdent "Vec2")
                  genericImpl (AstGenericList mySeq [
                    (AstType
                      kwVar false
                      ptrDim 0
                      child (AstNamedType
                        ident (AstIdent "T")
                        genericImpl (AstGenericList mySeq [
                        ])
                      )
                    )
                  ])
                )
              )
            )
          )
        )
      ]
      returnType (AstType
        kwVar false
        ptrDim 0
        child (AstNamedType
          ident (AstIdent "Vec2")
          genericImpl (AstGenericList mySeq [
            (AstType
              kwVar false
              ptrDim 0
              child (AstNamedType
                ident (AstIdent "T")
                genericImpl (AstGenericList mySeq [
                ])
              )
            )
          ])
        )
      )
      stmtSeq [
        (AstVar
          child (AstVarEtcDeclMost
            ident (AstIdent "result")
            type (AstType
              kwVar false
              ptrDim 0
              child (AstNamedType
                ident (AstIdent "Vec2")
                genericImpl (AstGenericList mySeq [
                  (AstType
                    kwVar false
                    ptrDim 0
                    child (AstNamedType
                      ident (AstIdent "T")
                      genericImpl (AstGenericList mySeq [
                      ])
                    )
                  )
                ])
              )
            )
          )
          optExpr !isSome
        )
        (AstFor
          ident (AstIdent "jdx")
          exprPre (AstU64Lit u64Val 0)
          exprPost (AstBinop
            kind binopMul
            left (AstU64Lit u64Val 8)
            right (AstU64Lit u64Val 3)
          )
          isUntil true
          stmtSeq [
            (AstIf
              expr (AstBinop
                kind binopCmpEq
                left (AstIdent "jdx")
                right (AstU64Lit u64Val 0)
              )
              stmtSeq [
                (AstFor
                  ident (AstIdent "idx")
                  exprPre (AstU64Lit u64Val 0)
                  exprPost (AstU64Lit u64Val 2)
                  isUntil true
                  stmtSeq [
                    (AstAssignEtc
                      kind assignEtcRegular
                      left (AstFuncCall
                        ident (AstIdent "at")
                        genericImpl (AstGenericList mySeq [
                        ])
                        argImplSeq [
                          (AstIdent "result")
                          (AstIdent "idx")
                        ]
                      )
                      right (AstFuncCall
                        ident (AstIdent "at")
                        genericImpl (AstGenericList mySeq [
                        ])
                        argImplSeq [
                          (AstFuncCall
                            ident (AstIdent "toSum")
                            genericImpl (AstGenericList mySeq [
                            ])
                            argImplSeq [
                              (AstU64Lit u64Val 0)
                            ]
                          )
                          (AstIdent "idx")
                        ]
                      )
                    )
                  ]
                )
              ]
              elifSeq [
              ]
              optElse (AstElse stmtSeq [
                (AstAssignEtc
                  kind assignEtcRegular
                  left (AstIdent "result")
                  right (AstFuncCall
                    ident (AstIdent "plus")
                    genericImpl (AstGenericList mySeq [
                    ])
                    argImplSeq [
                      (AstIdent "result")
                      (AstFuncCall
                        ident (AstIdent "toSum")
                        genericImpl (AstGenericList mySeq [
                        ])
                        argImplSeq [
                          (AstIdent "jdx")
                        ]
                      )
                    ]
                  )
                )
              ])
            )
          ]
        )
        (AstReturn optExpr (AstIdent "result"))
      ]
    )
  ]
  structDeclSeq [
    (AstStruct
      ident (AstIdent "Vec2")
      genericDecl (AstGenericList mySeq [
        (AstIdent "T")
      ])
      fieldSeq [
        (AstVarEtcDeclMost
          ident (AstIdent "x")
          type (AstType
            kwVar false
            ptrDim 0
            child (AstNamedType
              ident (AstIdent "T")
              genericImpl (AstGenericList mySeq [
              ])
            )
          )
        )
        (AstVarEtcDeclMost
          ident (AstIdent "y")
          type (AstType
            kwVar false
            ptrDim 0
            child (AstNamedType
              ident (AstIdent "T")
              genericImpl (AstGenericList mySeq [
              ])
            )
          )
        )
      ]
    )
    (AstStruct
      ident (AstIdent "Vec2Ptr")
      genericDecl (AstGenericList mySeq [
        (AstIdent "T")
      ])
      fieldSeq [
        (AstVarEtcDeclMost
          ident (AstIdent "x")
          type (AstType
            kwVar false
            ptrDim 1
            child (AstNamedType
              ident (AstIdent "T")
              genericImpl (AstGenericList mySeq [
              ])
            )
          )
        )
        (AstVarEtcDeclMost
          ident (AstIdent "y")
          type (AstType
            kwVar false
            ptrDim 1
            child (AstNamedType
              ident (AstIdent "T")
              genericImpl (AstGenericList mySeq [
              ])
            )
          )
        )
      ]
    )
    (AstStruct
      ident (AstIdent "Vec3Arr3Vec2")
      genericDecl (AstGenericList mySeq [
        (AstIdent "T")
      ])
      fieldSeq [
        (AstVarEtcDeclMost
          ident (AstIdent "x")
          type (AstType
            kwVar false
            ptrDim 0
            child (AstArray
              dim (AstU64Lit u64Val 3)
              elemType (AstType
                kwVar false
                ptrDim 0
                child (AstNamedType
                  ident (AstIdent "Vec2")
                  genericImpl (AstGenericList mySeq [
                    (AstType
                      kwVar false
                      ptrDim 0
                      child (AstNamedType
                        ident (AstIdent "T")
                        genericImpl (AstGenericList mySeq [
                        ])
                      )
                    )
                  ])
                )
              )
            )
          )
        )
        (AstVarEtcDeclMost
          ident (AstIdent "y")
          type (AstType
            kwVar false
            ptrDim 0
            child (AstArray
              dim (AstU64Lit u64Val 3)
              elemType (AstType
                kwVar false
                ptrDim 0
                child (AstNamedType
                  ident (AstIdent "Vec2")
                  genericImpl (AstGenericList mySeq [
                    (AstType
                      kwVar false
                      ptrDim 0
                      child (AstNamedType
                        ident (AstIdent "T")
                        genericImpl (AstGenericList mySeq [
                        ])
                      )
                    )
                  ])
                )
              )
            )
          )
        )
        (AstVarEtcDeclMost
          ident (AstIdent "z")
          type (AstType
            kwVar false
            ptrDim 0
            child (AstArray
              dim (AstU64Lit u64Val 3)
              elemType (AstType
                kwVar false
                ptrDim 0
                child (AstNamedType
                  ident (AstIdent "Vec2")
                  genericImpl (AstGenericList mySeq [
                    (AstType
                      kwVar false
                      ptrDim 0
                      child (AstNamedType
                        ident (AstIdent "T")
                        genericImpl (AstGenericList mySeq [
                        ])
                      )
                    )
                  ])
                )
              )
            )
          )
        )
      ]
    )
  ]
), sym: ..., tbl: {"Vec2": @[0], "Vec2Ptr": @[1], "Vec3Arr3Vec2": @[2], "dot": @[3], "plus": @[4, 5]}, parent: ..., childSeq: ...)
curr: (ast: (AstDef
  ident (AstIdent "plus")
  genericDecl (AstGenericList mySeq [
    (AstIdent "T")
  ])
  argDeclSeq [
    (AstVarEtcDeclMost
      ident (AstIdent "a")
      type (AstType
        kwVar true
        ptrDim 0
        child (AstNamedType
          ident (AstIdent "Vec2")
          genericImpl (AstGenericList mySeq [
            (AstType
              kwVar false
              ptrDim 0
              child (AstNamedType
                ident (AstIdent "T")
                genericImpl (AstGenericList mySeq [
                ])
              )
            )
          ])
        )
      )
    )
    (AstVarEtcDeclMost
      ident (AstIdent "b")
      type (AstType
        kwVar true
        ptrDim 0
        child (AstNamedType
          ident (AstIdent "Vec2")
          genericImpl (AstGenericList mySeq [
            (AstType
              kwVar false
              ptrDim 0
              child (AstNamedType
                ident (AstIdent "T")
                genericImpl (AstGenericList mySeq [
                ])
              )
            )
          ])
        )
      )
    )
  ]
  returnType (AstType
    kwVar false
    ptrDim 0
    child (AstNamedType
      ident (AstIdent "Vec2")
      genericImpl (AstGenericList mySeq [
        (AstType
          kwVar false
          ptrDim 0
          child (AstNamedType
            ident (AstIdent "T")
            genericImpl (AstGenericList mySeq [
            ])
          )
        )
      ])
    )
  )
  stmtSeq [
    (AstVar
      child (AstVarEtcDeclMost
        ident (AstIdent "result")
        type (AstType
          kwVar false
          ptrDim 0
          child (AstNamedType
            ident (AstIdent "Vec2")
            genericImpl (AstGenericList mySeq [
              (AstType
                kwVar false
                ptrDim 0
                child (AstNamedType
                  ident (AstIdent "T")
                  genericImpl (AstGenericList mySeq [
                  ])
                )
              )
            ])
          )
        )
      )
      optExpr !isSome
    )
    (AstFor
      ident (AstIdent "idx")
      exprPre (AstU64Lit u64Val 0)
      exprPost (AstU64Lit u64Val 2)
      isUntil true
      stmtSeq [
        (AstAssignEtc
          kind assignEtcRegular
          left (AstFuncCall
            ident (AstIdent "at")
            genericImpl (AstGenericList mySeq [
            ])
            argImplSeq [
              (AstIdent "result")
              (AstIdent "idx")
            ]
          )
          right (AstBinop
            kind binopPlus
            left (AstFuncCall
              ident (AstIdent "at")
              genericImpl (AstGenericList mySeq [
              ])
              argImplSeq [
                (AstIdent "a")
                (AstIdent "idx")
              ]
            )
            right (AstFuncCall
              ident (AstIdent "at")
              genericImpl (AstGenericList mySeq [
              ])
              argImplSeq [
                (AstIdent "b")
                (AstIdent "idx")
              ]
            )
          )
        )
      ]
    )
    (AstReturn optExpr (AstIdent "result"))
  ]
), sym: ..., tbl: {"T": @[0], "a": @[1], "b": @[2], "<result>": @[3]}, parent: ..., childSeq: ...) 4
argSym.get(): (inputFname: "test.scone", name: "plus", kind: symFuncDecl, initValAst: none(AstNode), typeInfo: ...)
argSym.get().typeInfo: (main: (inputFname: "test.scone", name: none(string), funcVar: false, ptrDim: 0, arrDim: 0, ast: nil), kind: tiFunc, myFunc: (genericIdxSeq: @[], argIdxSeq: @[1, 2], returnTypeIdx: 3))
----
gotoParentSymTbl: parent != nil: true
addChildSymTbl: childSeq.len(): 6
addChildSymTbl: post set parent: true 7
addSym: sym: (inputFname: "test.scone", name: "times", kind: symFuncDecl, initValAst: none(AstNode), typeInfo: ...)
addSym: tinfo: (main: (inputFname: "test.scone", name: none(string), funcVar: false, ptrDim: 0, arrDim: 0, ast: nil), kind: tiFunc, myFunc: (genericIdxSeq: @[], argIdxSeq: @[], returnTypeIdx: 0))
addsym: testificate: 6
addChildSymTbl: childSeq.len(): 0
addChildSymTbl: post set parent: true 1
addSym: sym: (inputFname: "test.scone", name: "T", kind: symGenericDecl, initValAst: none(AstNode), typeInfo: ...)
addSym: tinfo: (main: (inputFname: "test.scone", name: none(string), funcVar: false, ptrDim: 0, arrDim: 0, ast: nil), kind: tiToResolve, myToResolve: ())
addsym: testificate: 0
debug: 
curr.parent: (ast: (AstDef
  ident (AstIdent "times")
  genericDecl (AstGenericList mySeq [
    (AstIdent "T")
  ])
  argDeclSeq [
    (AstVarEtcDeclMost
      ident (AstIdent "a")
      type (AstType
        kwVar false
        ptrDim 0
        child (AstNamedType
          ident (AstIdent "T")
          genericImpl (AstGenericList mySeq [
          ])
        )
      )
    )
    (AstVarEtcDeclMost
      ident (AstIdent "b")
      type (AstType
        kwVar false
        ptrDim 0
        child (AstNamedType
          ident (AstIdent "T")
          genericImpl (AstGenericList mySeq [
          ])
        )
      )
    )
  ]
  returnType (AstType
    kwVar false
    ptrDim 0
    child (AstNamedType
      ident (AstIdent "T")
      genericImpl (AstGenericList mySeq [
      ])
    )
  )
  stmtSeq [
    (AstReturn optExpr (AstBinop
      kind binopMul
      left (AstIdent "a")
      right (AstIdent "b")
    ))
  ]
), sym: ..., tbl: {"T": @[0]}, parent: ..., childSeq: ...)
curr: (ast: (AstIdent "T"), sym: ..., tbl: {:}, parent: ..., childSeq: ...) 0
argSym.get(): (inputFname: "test.scone", name: "T", kind: symGenericDecl, initValAst: none(AstNode), typeInfo: ...)
argSym.get().typeInfo: (main: (inputFname: "test.scone", name: none(string), funcVar: false, ptrDim: 0, arrDim: 0, ast: nil), kind: tiToResolve, myToResolve: ())
----
gotoParentSymTbl: parent != nil: true
addChildSymTbl: childSeq.len(): 1
addChildSymTbl: post set parent: true 2
addSym: sym: (inputFname: "test.scone", name: "a", kind: symVar, initValAst: none(AstNode), typeInfo: ...)
addSym: tinfo: (main: (inputFname: "test.scone", name: some("T"), funcVar: false, ptrDim: 0, arrDim: 0, ast: (AstNamedType
  ident (AstIdent "T")
  genericImpl (AstGenericList mySeq [
  ])
)), kind: tiToResolve, myToResolve: ())
addsym: testificate: 1
debug: 
curr.parent: (ast: (AstDef
  ident (AstIdent "times")
  genericDecl (AstGenericList mySeq [
    (AstIdent "T")
  ])
  argDeclSeq [
    (AstVarEtcDeclMost
      ident (AstIdent "a")
      type (AstType
        kwVar false
        ptrDim 0
        child (AstNamedType
          ident (AstIdent "T")
          genericImpl (AstGenericList mySeq [
          ])
        )
      )
    )
    (AstVarEtcDeclMost
      ident (AstIdent "b")
      type (AstType
        kwVar false
        ptrDim 0
        child (AstNamedType
          ident (AstIdent "T")
          genericImpl (AstGenericList mySeq [
          ])
        )
      )
    )
  ]
  returnType (AstType
    kwVar false
    ptrDim 0
    child (AstNamedType
      ident (AstIdent "T")
      genericImpl (AstGenericList mySeq [
      ])
    )
  )
  stmtSeq [
    (AstReturn optExpr (AstBinop
      kind binopMul
      left (AstIdent "a")
      right (AstIdent "b")
    ))
  ]
), sym: ..., tbl: {"T": @[0], "a": @[1]}, parent: ..., childSeq: ...)
curr: (ast: (AstIdent "a"), sym: ..., tbl: {:}, parent: ..., childSeq: ...) 0
argSym.get(): (inputFname: "test.scone", name: "a", kind: symVar, initValAst: none(AstNode), typeInfo: ...)
argSym.get().typeInfo: (main: (inputFname: "test.scone", name: some("T"), funcVar: false, ptrDim: 0, arrDim: 0, ast: (AstNamedType
  ident (AstIdent "T")
  genericImpl (AstGenericList mySeq [
  ])
)), kind: tiToResolve, myToResolve: ())
----
gotoParentSymTbl: parent != nil: true
addChildSymTbl: childSeq.len(): 2
addChildSymTbl: post set parent: true 3
addSym: sym: (inputFname: "test.scone", name: "b", kind: symVar, initValAst: none(AstNode), typeInfo: ...)
addSym: tinfo: (main: (inputFname: "test.scone", name: some("T"), funcVar: false, ptrDim: 0, arrDim: 0, ast: (AstNamedType
  ident (AstIdent "T")
  genericImpl (AstGenericList mySeq [
  ])
)), kind: tiToResolve, myToResolve: ())
addsym: testificate: 2
debug: 
curr.parent: (ast: (AstDef
  ident (AstIdent "times")
  genericDecl (AstGenericList mySeq [
    (AstIdent "T")
  ])
  argDeclSeq [
    (AstVarEtcDeclMost
      ident (AstIdent "a")
      type (AstType
        kwVar false
        ptrDim 0
        child (AstNamedType
          ident (AstIdent "T")
          genericImpl (AstGenericList mySeq [
          ])
        )
      )
    )
    (AstVarEtcDeclMost
      ident (AstIdent "b")
      type (AstType
        kwVar false
        ptrDim 0
        child (AstNamedType
          ident (AstIdent "T")
          genericImpl (AstGenericList mySeq [
          ])
        )
      )
    )
  ]
  returnType (AstType
    kwVar false
    ptrDim 0
    child (AstNamedType
      ident (AstIdent "T")
      genericImpl (AstGenericList mySeq [
      ])
    )
  )
  stmtSeq [
    (AstReturn optExpr (AstBinop
      kind binopMul
      left (AstIdent "a")
      right (AstIdent "b")
    ))
  ]
), sym: ..., tbl: {"T": @[0], "a": @[1], "b": @[2]}, parent: ..., childSeq: ...)
curr: (ast: (AstIdent "b"), sym: ..., tbl: {:}, parent: ..., childSeq: ...) 0
argSym.get(): (inputFname: "test.scone", name: "b", kind: symVar, initValAst: none(AstNode), typeInfo: ...)
argSym.get().typeInfo: (main: (inputFname: "test.scone", name: some("T"), funcVar: false, ptrDim: 0, arrDim: 0, ast: (AstNamedType
  ident (AstIdent "T")
  genericImpl (AstGenericList mySeq [
  ])
)), kind: tiToResolve, myToResolve: ())
----
gotoParentSymTbl: parent != nil: true
addChildSymTbl: childSeq.len(): 3
addChildSymTbl: post set parent: true 4
addSym: sym: (inputFname: "test.scone", name: "<result>", kind: symVar, initValAst: none(AstNode), typeInfo: ...)
addSym: tinfo: (main: (inputFname: "test.scone", name: some("T"), funcVar: false, ptrDim: 0, arrDim: 0, ast: (AstNamedType
  ident (AstIdent "T")
  genericImpl (AstGenericList mySeq [
  ])
)), kind: tiToResolve, myToResolve: ())
addsym: testificate: 3
debug: 
curr.parent: (ast: (AstDef
  ident (AstIdent "times")
  genericDecl (AstGenericList mySeq [
    (AstIdent "T")
  ])
  argDeclSeq [
    (AstVarEtcDeclMost
      ident (AstIdent "a")
      type (AstType
        kwVar false
        ptrDim 0
        child (AstNamedType
          ident (AstIdent "T")
          genericImpl (AstGenericList mySeq [
          ])
        )
      )
    )
    (AstVarEtcDeclMost
      ident (AstIdent "b")
      type (AstType
        kwVar false
        ptrDim 0
        child (AstNamedType
          ident (AstIdent "T")
          genericImpl (AstGenericList mySeq [
          ])
        )
      )
    )
  ]
  returnType (AstType
    kwVar false
    ptrDim 0
    child (AstNamedType
      ident (AstIdent "T")
      genericImpl (AstGenericList mySeq [
      ])
    )
  )
  stmtSeq [
    (AstReturn optExpr (AstBinop
      kind binopMul
      left (AstIdent "a")
      right (AstIdent "b")
    ))
  ]
), sym: ..., tbl: {"T": @[0], "a": @[1], "b": @[2], "<result>": @[3]}, parent: ..., childSeq: ...)
curr: (ast: (AstType
  kwVar false
  ptrDim 0
  child (AstNamedType
    ident (AstIdent "T")
    genericImpl (AstGenericList mySeq [
    ])
  )
), sym: ..., tbl: {:}, parent: ..., childSeq: ...) 0
argSym.get(): (inputFname: "test.scone", name: "<result>", kind: symVar, initValAst: none(AstNode), typeInfo: ...)
argSym.get().typeInfo: (main: (inputFname: "test.scone", name: some("T"), funcVar: false, ptrDim: 0, arrDim: 0, ast: (AstNamedType
  ident (AstIdent "T")
  genericImpl (AstGenericList mySeq [
  ])
)), kind: tiToResolve, myToResolve: ())
----
gotoParentSymTbl: parent != nil: true
debug: 
curr.parent: (ast: (AstSrcFile
  module (AstModule ident (AstIdent "myModule"))
  funcDeclSeq [
    (AstDef
      ident (AstIdent "dot")
      genericDecl (AstGenericList mySeq [
        (AstIdent "T")
      ])
      argDeclSeq [
        (AstVarEtcDeclMost
          ident (AstIdent "a")
          type (AstType
            kwVar true
            ptrDim 0
            child (AstNamedType
              ident (AstIdent "Vec2")
              genericImpl (AstGenericList mySeq [
                (AstType
                  kwVar false
                  ptrDim 0
                  child (AstNamedType
                    ident (AstIdent "T")
                    genericImpl (AstGenericList mySeq [
                    ])
                  )
                )
              ])
            )
          )
        )
        (AstVarEtcDeclMost
          ident (AstIdent "b")
          type (AstType
            kwVar true
            ptrDim 0
            child (AstNamedType
              ident (AstIdent "Vec2")
              genericImpl (AstGenericList mySeq [
                (AstType
                  kwVar false
                  ptrDim 0
                  child (AstNamedType
                    ident (AstIdent "T")
                    genericImpl (AstGenericList mySeq [
                    ])
                  )
                )
              ])
            )
          )
        )
      ]
      returnType (AstType
        kwVar false
        ptrDim 0
        child (AstNamedType
          ident (AstIdent "T")
          genericImpl (AstGenericList mySeq [
          ])
        )
      )
      stmtSeq [
        (AstConst
          child (AstVarEtcDeclMost
            ident (AstIdent "result")
            type (AstType
              kwVar false
              ptrDim 0
              child (AstNamedType
                ident (AstIdent "T")
                genericImpl (AstGenericList mySeq [
                ])
              )
            )
          )
          expr (AstBinop
            kind binopPlus
            left (AstBinop
              kind binopMul
              left (AstDot
                left (AstIdent "a")
                right (AstIdent "x")
              )
              right (AstDot
                left (AstIdent "b")
                right (AstIdent "x")
              )
            )
            right (AstBinop
              kind binopMul
              left (AstDot
                left (AstIdent "a")
                right (AstIdent "y")
              )
              right (AstDot
                left (AstIdent "b")
                right (AstIdent "y")
              )
            )
          )
        )
        (AstReturn optExpr (AstIdent "result"))
      ]
    )
    (AstDef
      ident (AstIdent "plus")
      genericDecl (AstGenericList mySeq [
        (AstIdent "T")
      ])
      argDeclSeq [
        (AstVarEtcDeclMost
          ident (AstIdent "a")
          type (AstType
            kwVar true
            ptrDim 0
            child (AstNamedType
              ident (AstIdent "T")
              genericImpl (AstGenericList mySeq [
              ])
            )
          )
        )
        (AstVarEtcDeclMost
          ident (AstIdent "b")
          type (AstType
            kwVar true
            ptrDim 0
            child (AstNamedType
              ident (AstIdent "T")
              genericImpl (AstGenericList mySeq [
              ])
            )
          )
        )
      ]
      returnType (AstType
        kwVar false
        ptrDim 0
        child (AstNamedType
          ident (AstIdent "T")
          genericImpl (AstGenericList mySeq [
          ])
        )
      )
      stmtSeq [
        (AstReturn optExpr (AstBinop
          kind binopPlus
          left (AstIdent "a")
          right (AstIdent "b")
        ))
      ]
    )
    (AstDef
      ident (AstIdent "plus")
      genericDecl (AstGenericList mySeq [
        (AstIdent "T")
      ])
      argDeclSeq [
        (AstVarEtcDeclMost
          ident (AstIdent "a")
          type (AstType
            kwVar true
            ptrDim 0
            child (AstNamedType
              ident (AstIdent "Vec2")
              genericImpl (AstGenericList mySeq [
                (AstType
                  kwVar false
                  ptrDim 0
                  child (AstNamedType
                    ident (AstIdent "T")
                    genericImpl (AstGenericList mySeq [
                    ])
                  )
                )
              ])
            )
          )
        )
        (AstVarEtcDeclMost
          ident (AstIdent "b")
          type (AstType
            kwVar true
            ptrDim 0
            child (AstNamedType
              ident (AstIdent "Vec2")
              genericImpl (AstGenericList mySeq [
                (AstType
                  kwVar false
                  ptrDim 0
                  child (AstNamedType
                    ident (AstIdent "T")
                    genericImpl (AstGenericList mySeq [
                    ])
                  )
                )
              ])
            )
          )
        )
      ]
      returnType (AstType
        kwVar false
        ptrDim 0
        child (AstNamedType
          ident (AstIdent "Vec2")
          genericImpl (AstGenericList mySeq [
            (AstType
              kwVar false
              ptrDim 0
              child (AstNamedType
                ident (AstIdent "T")
                genericImpl (AstGenericList mySeq [
                ])
              )
            )
          ])
        )
      )
      stmtSeq [
        (AstVar
          child (AstVarEtcDeclMost
            ident (AstIdent "result")
            type (AstType
              kwVar false
              ptrDim 0
              child (AstNamedType
                ident (AstIdent "Vec2")
                genericImpl (AstGenericList mySeq [
                  (AstType
                    kwVar false
                    ptrDim 0
                    child (AstNamedType
                      ident (AstIdent "T")
                      genericImpl (AstGenericList mySeq [
                      ])
                    )
                  )
                ])
              )
            )
          )
          optExpr !isSome
        )
        (AstFor
          ident (AstIdent "idx")
          exprPre (AstU64Lit u64Val 0)
          exprPost (AstU64Lit u64Val 2)
          isUntil true
          stmtSeq [
            (AstAssignEtc
              kind assignEtcRegular
              left (AstFuncCall
                ident (AstIdent "at")
                genericImpl (AstGenericList mySeq [
                ])
                argImplSeq [
                  (AstIdent "result")
                  (AstIdent "idx")
                ]
              )
              right (AstBinop
                kind binopPlus
                left (AstFuncCall
                  ident (AstIdent "at")
                  genericImpl (AstGenericList mySeq [
                  ])
                  argImplSeq [
                    (AstIdent "a")
                    (AstIdent "idx")
                  ]
                )
                right (AstFuncCall
                  ident (AstIdent "at")
                  genericImpl (AstGenericList mySeq [
                  ])
                  argImplSeq [
                    (AstIdent "b")
                    (AstIdent "idx")
                  ]
                )
              )
            )
          ]
        )
        (AstReturn optExpr (AstIdent "result"))
      ]
    )
    (AstDef
      ident (AstIdent "times")
      genericDecl (AstGenericList mySeq [
        (AstIdent "T")
      ])
      argDeclSeq [
        (AstVarEtcDeclMost
          ident (AstIdent "a")
          type (AstType
            kwVar false
            ptrDim 0
            child (AstNamedType
              ident (AstIdent "T")
              genericImpl (AstGenericList mySeq [
              ])
            )
          )
        )
        (AstVarEtcDeclMost
          ident (AstIdent "b")
          type (AstType
            kwVar false
            ptrDim 0
            child (AstNamedType
              ident (AstIdent "T")
              genericImpl (AstGenericList mySeq [
              ])
            )
          )
        )
      ]
      returnType (AstType
        kwVar false
        ptrDim 0
        child (AstNamedType
          ident (AstIdent "T")
          genericImpl (AstGenericList mySeq [
          ])
        )
      )
      stmtSeq [
        (AstReturn optExpr (AstBinop
          kind binopMul
          left (AstIdent "a")
          right (AstIdent "b")
        ))
      ]
    )
    (AstDef
      ident (AstIdent "times")
      genericDecl (AstGenericList mySeq [
        (AstIdent "T")
      ])
      argDeclSeq [
        (AstVarEtcDeclMost
          ident (AstIdent "a")
          type (AstType
            kwVar false
            ptrDim 0
            child (AstNamedType
              ident (AstIdent "Vec2")
              genericImpl (AstGenericList mySeq [
                (AstType
                  kwVar false
                  ptrDim 0
                  child (AstNamedType
                    ident (AstIdent "T")
                    genericImpl (AstGenericList mySeq [
                    ])
                  )
                )
              ])
            )
          )
        )
        (AstVarEtcDeclMost
          ident (AstIdent "scale")
          type (AstType
            kwVar false
            ptrDim 0
            child (AstNamedType
              ident (AstIdent "T")
              genericImpl (AstGenericList mySeq [
              ])
            )
          )
        )
      ]
      returnType (AstType
        kwVar false
        ptrDim 0
        child (AstNamedType
          ident (AstIdent "Vec2")
          genericImpl (AstGenericList mySeq [
            (AstType
              kwVar false
              ptrDim 0
              child (AstNamedType
                ident (AstIdent "T")
                genericImpl (AstGenericList mySeq [
                ])
              )
            )
          ])
        )
      )
      stmtSeq [
        (AstVar
          child (AstVarEtcDeclMost
            ident (AstIdent "result")
            type (AstType
              kwVar false
              ptrDim 0
              child (AstNamedType
                ident (AstIdent "Vec2")
                genericImpl (AstGenericList mySeq [
                  (AstType
                    kwVar false
                    ptrDim 0
                    child (AstNamedType
                      ident (AstIdent "T")
                      genericImpl (AstGenericList mySeq [
                      ])
                    )
                  )
                ])
              )
            )
          )
          optExpr !isSome
        )
        (AstFor
          ident (AstIdent "idx")
          exprPre (AstU64Lit u64Val 0)
          exprPost (AstU64Lit u64Val 2)
          isUntil true
          stmtSeq [
            (AstAssignEtc
              kind assignEtcRegular
              left (AstFuncCall
                ident (AstIdent "at")
                genericImpl (AstGenericList mySeq [
                ])
                argImplSeq [
                  (AstIdent "result")
                  (AstIdent "idx")
                ]
              )
              right (AstFuncCall
                ident (AstIdent "times")
                genericImpl (AstGenericList mySeq [
                ])
                argImplSeq [
                  (AstFuncCall
                    ident (AstIdent "at")
                    genericImpl (AstGenericList mySeq [
                    ])
                    argImplSeq [
                      (AstIdent "a")
                      (AstIdent "idx")
                    ]
                  )
                  (AstIdent "scale")
                ]
              )
            )
          ]
        )
        (AstReturn optExpr (AstIdent "result"))
      ]
    )
    (AstDef
      ident (AstIdent "at")
      genericDecl (AstGenericList mySeq [
        (AstIdent "T")
      ])
      argDeclSeq [
        (AstVarEtcDeclMost
          ident (AstIdent "self")
          type (AstType
            kwVar true
            ptrDim 0
            child (AstNamedType
              ident (AstIdent "Vec2")
              genericImpl (AstGenericList mySeq [
                (AstType
                  kwVar false
                  ptrDim 0
                  child (AstNamedType
                    ident (AstIdent "T")
                    genericImpl (AstGenericList mySeq [
                    ])
                  )
                )
              ])
            )
          )
        )
        (AstVarEtcDeclMost
          ident (AstIdent "idx")
          type (AstType
            kwVar false
            ptrDim 0
            child (AstBasicType kind basicTypeU32)
          )
        )
      ]
      returnType (AstType
        kwVar true
        ptrDim 0
        child (AstNamedType
          ident (AstIdent "T")
          genericImpl (AstGenericList mySeq [
          ])
        )
      )
      stmtSeq [
        (AstIf
          expr (AstBinop
            kind binopCmpEq
            left (AstIdent "idx")
            right (AstU64Lit u64Val 0)
          )
          stmtSeq [
            (AstReturn optExpr (AstDot
              left (AstIdent "self")
              right (AstIdent "x")
            ))
          ]
          elifSeq [
          ]
          optElse (AstElse stmtSeq [
            (AstReturn optExpr (AstDot
              left (AstIdent "self")
              right (AstIdent "y")
            ))
          ])
        )
      ]
    )
    (AstDef
      ident (AstIdent "sum")
      genericDecl (AstGenericList mySeq [
        (AstIdent "T")
      ])
      argDeclSeq [
        (AstVarEtcDeclMost
          ident (AstIdent "toSum")
          type (AstType
            kwVar true
            ptrDim 0
            child (AstArray
              dim (AstBinop
                kind binopMul
                left (AstU64Lit u64Val 8)
                right (AstU64Lit u64Val 3)
              )
              elemType (AstType
                kwVar false
                ptrDim 0
                child (AstNamedType
                  ident (AstIdent "Vec2")
                  genericImpl (AstGenericList mySeq [
                    (AstType
                      kwVar false
                      ptrDim 0
                      child (AstNamedType
                        ident (AstIdent "T")
                        genericImpl (AstGenericList mySeq [
                        ])
                      )
                    )
                  ])
                )
              )
            )
          )
        )
      ]
      returnType (AstType
        kwVar false
        ptrDim 0
        child (AstNamedType
          ident (AstIdent "Vec2")
          genericImpl (AstGenericList mySeq [
            (AstType
              kwVar false
              ptrDim 0
              child (AstNamedType
                ident (AstIdent "T")
                genericImpl (AstGenericList mySeq [
                ])
              )
            )
          ])
        )
      )
      stmtSeq [
        (AstVar
          child (AstVarEtcDeclMost
            ident (AstIdent "result")
            type (AstType
              kwVar false
              ptrDim 0
              child (AstNamedType
                ident (AstIdent "Vec2")
                genericImpl (AstGenericList mySeq [
                  (AstType
                    kwVar false
                    ptrDim 0
                    child (AstNamedType
                      ident (AstIdent "T")
                      genericImpl (AstGenericList mySeq [
                      ])
                    )
                  )
                ])
              )
            )
          )
          optExpr !isSome
        )
        (AstFor
          ident (AstIdent "jdx")
          exprPre (AstU64Lit u64Val 0)
          exprPost (AstBinop
            kind binopMul
            left (AstU64Lit u64Val 8)
            right (AstU64Lit u64Val 3)
          )
          isUntil true
          stmtSeq [
            (AstIf
              expr (AstBinop
                kind binopCmpEq
                left (AstIdent "jdx")
                right (AstU64Lit u64Val 0)
              )
              stmtSeq [
                (AstFor
                  ident (AstIdent "idx")
                  exprPre (AstU64Lit u64Val 0)
                  exprPost (AstU64Lit u64Val 2)
                  isUntil true
                  stmtSeq [
                    (AstAssignEtc
                      kind assignEtcRegular
                      left (AstFuncCall
                        ident (AstIdent "at")
                        genericImpl (AstGenericList mySeq [
                        ])
                        argImplSeq [
                          (AstIdent "result")
                          (AstIdent "idx")
                        ]
                      )
                      right (AstFuncCall
                        ident (AstIdent "at")
                        genericImpl (AstGenericList mySeq [
                        ])
                        argImplSeq [
                          (AstFuncCall
                            ident (AstIdent "toSum")
                            genericImpl (AstGenericList mySeq [
                            ])
                            argImplSeq [
                              (AstU64Lit u64Val 0)
                            ]
                          )
                          (AstIdent "idx")
                        ]
                      )
                    )
                  ]
                )
              ]
              elifSeq [
              ]
              optElse (AstElse stmtSeq [
                (AstAssignEtc
                  kind assignEtcRegular
                  left (AstIdent "result")
                  right (AstFuncCall
                    ident (AstIdent "plus")
                    genericImpl (AstGenericList mySeq [
                    ])
                    argImplSeq [
                      (AstIdent "result")
                      (AstFuncCall
                        ident (AstIdent "toSum")
                        genericImpl (AstGenericList mySeq [
                        ])
                        argImplSeq [
                          (AstIdent "jdx")
                        ]
                      )
                    ]
                  )
                )
              ])
            )
          ]
        )
        (AstReturn optExpr (AstIdent "result"))
      ]
    )
  ]
  structDeclSeq [
    (AstStruct
      ident (AstIdent "Vec2")
      genericDecl (AstGenericList mySeq [
        (AstIdent "T")
      ])
      fieldSeq [
        (AstVarEtcDeclMost
          ident (AstIdent "x")
          type (AstType
            kwVar false
            ptrDim 0
            child (AstNamedType
              ident (AstIdent "T")
              genericImpl (AstGenericList mySeq [
              ])
            )
          )
        )
        (AstVarEtcDeclMost
          ident (AstIdent "y")
          type (AstType
            kwVar false
            ptrDim 0
            child (AstNamedType
              ident (AstIdent "T")
              genericImpl (AstGenericList mySeq [
              ])
            )
          )
        )
      ]
    )
    (AstStruct
      ident (AstIdent "Vec2Ptr")
      genericDecl (AstGenericList mySeq [
        (AstIdent "T")
      ])
      fieldSeq [
        (AstVarEtcDeclMost
          ident (AstIdent "x")
          type (AstType
            kwVar false
            ptrDim 1
            child (AstNamedType
              ident (AstIdent "T")
              genericImpl (AstGenericList mySeq [
              ])
            )
          )
        )
        (AstVarEtcDeclMost
          ident (AstIdent "y")
          type (AstType
            kwVar false
            ptrDim 1
            child (AstNamedType
              ident (AstIdent "T")
              genericImpl (AstGenericList mySeq [
              ])
            )
          )
        )
      ]
    )
    (AstStruct
      ident (AstIdent "Vec3Arr3Vec2")
      genericDecl (AstGenericList mySeq [
        (AstIdent "T")
      ])
      fieldSeq [
        (AstVarEtcDeclMost
          ident (AstIdent "x")
          type (AstType
            kwVar false
            ptrDim 0
            child (AstArray
              dim (AstU64Lit u64Val 3)
              elemType (AstType
                kwVar false
                ptrDim 0
                child (AstNamedType
                  ident (AstIdent "Vec2")
                  genericImpl (AstGenericList mySeq [
                    (AstType
                      kwVar false
                      ptrDim 0
                      child (AstNamedType
                        ident (AstIdent "T")
                        genericImpl (AstGenericList mySeq [
                        ])
                      )
                    )
                  ])
                )
              )
            )
          )
        )
        (AstVarEtcDeclMost
          ident (AstIdent "y")
          type (AstType
            kwVar false
            ptrDim 0
            child (AstArray
              dim (AstU64Lit u64Val 3)
              elemType (AstType
                kwVar false
                ptrDim 0
                child (AstNamedType
                  ident (AstIdent "Vec2")
                  genericImpl (AstGenericList mySeq [
                    (AstType
                      kwVar false
                      ptrDim 0
                      child (AstNamedType
                        ident (AstIdent "T")
                        genericImpl (AstGenericList mySeq [
                        ])
                      )
                    )
                  ])
                )
              )
            )
          )
        )
        (AstVarEtcDeclMost
          ident (AstIdent "z")
          type (AstType
            kwVar false
            ptrDim 0
            child (AstArray
              dim (AstU64Lit u64Val 3)
              elemType (AstType
                kwVar false
                ptrDim 0
                child (AstNamedType
                  ident (AstIdent "Vec2")
                  genericImpl (AstGenericList mySeq [
                    (AstType
                      kwVar false
                      ptrDim 0
                      child (AstNamedType
                        ident (AstIdent "T")
                        genericImpl (AstGenericList mySeq [
                        ])
                      )
                    )
                  ])
                )
              )
            )
          )
        )
      ]
    )
  ]
), sym: ..., tbl: {"Vec2": @[0], "Vec2Ptr": @[1], "Vec3Arr3Vec2": @[2], "dot": @[3], "plus": @[4, 5], "times": @[6]}, parent: ..., childSeq: ...)
curr: (ast: (AstDef
  ident (AstIdent "times")
  genericDecl (AstGenericList mySeq [
    (AstIdent "T")
  ])
  argDeclSeq [
    (AstVarEtcDeclMost
      ident (AstIdent "a")
      type (AstType
        kwVar false
        ptrDim 0
        child (AstNamedType
          ident (AstIdent "T")
          genericImpl (AstGenericList mySeq [
          ])
        )
      )
    )
    (AstVarEtcDeclMost
      ident (AstIdent "b")
      type (AstType
        kwVar false
        ptrDim 0
        child (AstNamedType
          ident (AstIdent "T")
          genericImpl (AstGenericList mySeq [
          ])
        )
      )
    )
  ]
  returnType (AstType
    kwVar false
    ptrDim 0
    child (AstNamedType
      ident (AstIdent "T")
      genericImpl (AstGenericList mySeq [
      ])
    )
  )
  stmtSeq [
    (AstReturn optExpr (AstBinop
      kind binopMul
      left (AstIdent "a")
      right (AstIdent "b")
    ))
  ]
), sym: ..., tbl: {"T": @[0], "a": @[1], "b": @[2], "<result>": @[3]}, parent: ..., childSeq: ...) 4
argSym.get(): (inputFname: "test.scone", name: "times", kind: symFuncDecl, initValAst: none(AstNode), typeInfo: ...)
argSym.get().typeInfo: (main: (inputFname: "test.scone", name: none(string), funcVar: false, ptrDim: 0, arrDim: 0, ast: nil), kind: tiFunc, myFunc: (genericIdxSeq: @[], argIdxSeq: @[1, 2], returnTypeIdx: 3))
----
gotoParentSymTbl: parent != nil: true
addChildSymTbl: childSeq.len(): 7
addChildSymTbl: post set parent: true 8
addSym: sym: (inputFname: "test.scone", name: "times", kind: symFuncDecl, initValAst: none(AstNode), typeInfo: ...)
addSym: tinfo: (main: (inputFname: "test.scone", name: none(string), funcVar: false, ptrDim: 0, arrDim: 0, ast: nil), kind: tiFunc, myFunc: (genericIdxSeq: @[], argIdxSeq: @[], returnTypeIdx: 0))
addChildSymTbl: childSeq.len(): 0
addChildSymTbl: post set parent: true 1
addSym: sym: (inputFname: "test.scone", name: "T", kind: symGenericDecl, initValAst: none(AstNode), typeInfo: ...)
addSym: tinfo: (main: (inputFname: "test.scone", name: none(string), funcVar: false, ptrDim: 0, arrDim: 0, ast: nil), kind: tiToResolve, myToResolve: ())
addsym: testificate: 0
debug: 
curr.parent: (ast: (AstDef
  ident (AstIdent "times")
  genericDecl (AstGenericList mySeq [
    (AstIdent "T")
  ])
  argDeclSeq [
    (AstVarEtcDeclMost
      ident (AstIdent "a")
      type (AstType
        kwVar false
        ptrDim 0
        child (AstNamedType
          ident (AstIdent "Vec2")
          genericImpl (AstGenericList mySeq [
            (AstType
              kwVar false
              ptrDim 0
              child (AstNamedType
                ident (AstIdent "T")
                genericImpl (AstGenericList mySeq [
                ])
              )
            )
          ])
        )
      )
    )
    (AstVarEtcDeclMost
      ident (AstIdent "scale")
      type (AstType
        kwVar false
        ptrDim 0
        child (AstNamedType
          ident (AstIdent "T")
          genericImpl (AstGenericList mySeq [
          ])
        )
      )
    )
  ]
  returnType (AstType
    kwVar false
    ptrDim 0
    child (AstNamedType
      ident (AstIdent "Vec2")
      genericImpl (AstGenericList mySeq [
        (AstType
          kwVar false
          ptrDim 0
          child (AstNamedType
            ident (AstIdent "T")
            genericImpl (AstGenericList mySeq [
            ])
          )
        )
      ])
    )
  )
  stmtSeq [
    (AstVar
      child (AstVarEtcDeclMost
        ident (AstIdent "result")
        type (AstType
          kwVar false
          ptrDim 0
          child (AstNamedType
            ident (AstIdent "Vec2")
            genericImpl (AstGenericList mySeq [
              (AstType
                kwVar false
                ptrDim 0
                child (AstNamedType
                  ident (AstIdent "T")
                  genericImpl (AstGenericList mySeq [
                  ])
                )
              )
            ])
          )
        )
      )
      optExpr !isSome
    )
    (AstFor
      ident (AstIdent "idx")
      exprPre (AstU64Lit u64Val 0)
      exprPost (AstU64Lit u64Val 2)
      isUntil true
      stmtSeq [
        (AstAssignEtc
          kind assignEtcRegular
          left (AstFuncCall
            ident (AstIdent "at")
            genericImpl (AstGenericList mySeq [
            ])
            argImplSeq [
              (AstIdent "result")
              (AstIdent "idx")
            ]
          )
          right (AstFuncCall
            ident (AstIdent "times")
            genericImpl (AstGenericList mySeq [
            ])
            argImplSeq [
              (AstFuncCall
                ident (AstIdent "at")
                genericImpl (AstGenericList mySeq [
                ])
                argImplSeq [
                  (AstIdent "a")
                  (AstIdent "idx")
                ]
              )
              (AstIdent "scale")
            ]
          )
        )
      ]
    )
    (AstReturn optExpr (AstIdent "result"))
  ]
), sym: ..., tbl: {"T": @[0]}, parent: ..., childSeq: ...)
curr: (ast: (AstIdent "T"), sym: ..., tbl: {:}, parent: ..., childSeq: ...) 0
argSym.get(): (inputFname: "test.scone", name: "T", kind: symGenericDecl, initValAst: none(AstNode), typeInfo: ...)
argSym.get().typeInfo: (main: (inputFname: "test.scone", name: none(string), funcVar: false, ptrDim: 0, arrDim: 0, ast: nil), kind: tiToResolve, myToResolve: ())
----
gotoParentSymTbl: parent != nil: true
addChildSymTbl: childSeq.len(): 1
addChildSymTbl: post set parent: true 2
addSym: sym: (inputFname: "test.scone", name: "a", kind: symVar, initValAst: none(AstNode), typeInfo: ...)
addSym: tinfo: (main: (inputFname: "test.scone", name: some("Vec2"), funcVar: false, ptrDim: 0, arrDim: 0, ast: (AstNamedType
  ident (AstIdent "Vec2")
  genericImpl (AstGenericList mySeq [
    (AstType
      kwVar false
      ptrDim 0
      child (AstNamedType
        ident (AstIdent "T")
        genericImpl (AstGenericList mySeq [
        ])
      )
    )
  ])
)), kind: tiToResolve, myToResolve: ())
addsym: testificate: 1
debug: 
curr.parent: (ast: (AstDef
  ident (AstIdent "times")
  genericDecl (AstGenericList mySeq [
    (AstIdent "T")
  ])
  argDeclSeq [
    (AstVarEtcDeclMost
      ident (AstIdent "a")
      type (AstType
        kwVar false
        ptrDim 0
        child (AstNamedType
          ident (AstIdent "Vec2")
          genericImpl (AstGenericList mySeq [
            (AstType
              kwVar false
              ptrDim 0
              child (AstNamedType
                ident (AstIdent "T")
                genericImpl (AstGenericList mySeq [
                ])
              )
            )
          ])
        )
      )
    )
    (AstVarEtcDeclMost
      ident (AstIdent "scale")
      type (AstType
        kwVar false
        ptrDim 0
        child (AstNamedType
          ident (AstIdent "T")
          genericImpl (AstGenericList mySeq [
          ])
        )
      )
    )
  ]
  returnType (AstType
    kwVar false
    ptrDim 0
    child (AstNamedType
      ident (AstIdent "Vec2")
      genericImpl (AstGenericList mySeq [
        (AstType
          kwVar false
          ptrDim 0
          child (AstNamedType
            ident (AstIdent "T")
            genericImpl (AstGenericList mySeq [
            ])
          )
        )
      ])
    )
  )
  stmtSeq [
    (AstVar
      child (AstVarEtcDeclMost
        ident (AstIdent "result")
        type (AstType
          kwVar false
          ptrDim 0
          child (AstNamedType
            ident (AstIdent "Vec2")
            genericImpl (AstGenericList mySeq [
              (AstType
                kwVar false
                ptrDim 0
                child (AstNamedType
                  ident (AstIdent "T")
                  genericImpl (AstGenericList mySeq [
                  ])
                )
              )
            ])
          )
        )
      )
      optExpr !isSome
    )
    (AstFor
      ident (AstIdent "idx")
      exprPre (AstU64Lit u64Val 0)
      exprPost (AstU64Lit u64Val 2)
      isUntil true
      stmtSeq [
        (AstAssignEtc
          kind assignEtcRegular
          left (AstFuncCall
            ident (AstIdent "at")
            genericImpl (AstGenericList mySeq [
            ])
            argImplSeq [
              (AstIdent "result")
              (AstIdent "idx")
            ]
          )
          right (AstFuncCall
            ident (AstIdent "times")
            genericImpl (AstGenericList mySeq [
            ])
            argImplSeq [
              (AstFuncCall
                ident (AstIdent "at")
                genericImpl (AstGenericList mySeq [
                ])
                argImplSeq [
                  (AstIdent "a")
                  (AstIdent "idx")
                ]
              )
              (AstIdent "scale")
            ]
          )
        )
      ]
    )
    (AstReturn optExpr (AstIdent "result"))
  ]
), sym: ..., tbl: {"T": @[0], "a": @[1]}, parent: ..., childSeq: ...)
curr: (ast: (AstIdent "a"), sym: ..., tbl: {:}, parent: ..., childSeq: ...) 0
argSym.get(): (inputFname: "test.scone", name: "a", kind: symVar, initValAst: none(AstNode), typeInfo: ...)
argSym.get().typeInfo: (main: (inputFname: "test.scone", name: some("Vec2"), funcVar: false, ptrDim: 0, arrDim: 0, ast: (AstNamedType
  ident (AstIdent "Vec2")
  genericImpl (AstGenericList mySeq [
    (AstType
      kwVar false
      ptrDim 0
      child (AstNamedType
        ident (AstIdent "T")
        genericImpl (AstGenericList mySeq [
        ])
      )
    )
  ])
)), kind: tiToResolve, myToResolve: ())
----
gotoParentSymTbl: parent != nil: true
addChildSymTbl: childSeq.len(): 2
addChildSymTbl: post set parent: true 3
addSym: sym: (inputFname: "test.scone", name: "scale", kind: symVar, initValAst: none(AstNode), typeInfo: ...)
addSym: tinfo: (main: (inputFname: "test.scone", name: some("T"), funcVar: false, ptrDim: 0, arrDim: 0, ast: (AstNamedType
  ident (AstIdent "T")
  genericImpl (AstGenericList mySeq [
  ])
)), kind: tiToResolve, myToResolve: ())
addsym: testificate: 2
debug: 
curr.parent: (ast: (AstDef
  ident (AstIdent "times")
  genericDecl (AstGenericList mySeq [
    (AstIdent "T")
  ])
  argDeclSeq [
    (AstVarEtcDeclMost
      ident (AstIdent "a")
      type (AstType
        kwVar false
        ptrDim 0
        child (AstNamedType
          ident (AstIdent "Vec2")
          genericImpl (AstGenericList mySeq [
            (AstType
              kwVar false
              ptrDim 0
              child (AstNamedType
                ident (AstIdent "T")
                genericImpl (AstGenericList mySeq [
                ])
              )
            )
          ])
        )
      )
    )
    (AstVarEtcDeclMost
      ident (AstIdent "scale")
      type (AstType
        kwVar false
        ptrDim 0
        child (AstNamedType
          ident (AstIdent "T")
          genericImpl (AstGenericList mySeq [
          ])
        )
      )
    )
  ]
  returnType (AstType
    kwVar false
    ptrDim 0
    child (AstNamedType
      ident (AstIdent "Vec2")
      genericImpl (AstGenericList mySeq [
        (AstType
          kwVar false
          ptrDim 0
          child (AstNamedType
            ident (AstIdent "T")
            genericImpl (AstGenericList mySeq [
            ])
          )
        )
      ])
    )
  )
  stmtSeq [
    (AstVar
      child (AstVarEtcDeclMost
        ident (AstIdent "result")
        type (AstType
          kwVar false
          ptrDim 0
          child (AstNamedType
            ident (AstIdent "Vec2")
            genericImpl (AstGenericList mySeq [
              (AstType
                kwVar false
                ptrDim 0
                child (AstNamedType
                  ident (AstIdent "T")
                  genericImpl (AstGenericList mySeq [
                  ])
                )
              )
            ])
          )
        )
      )
      optExpr !isSome
    )
    (AstFor
      ident (AstIdent "idx")
      exprPre (AstU64Lit u64Val 0)
      exprPost (AstU64Lit u64Val 2)
      isUntil true
      stmtSeq [
        (AstAssignEtc
          kind assignEtcRegular
          left (AstFuncCall
            ident (AstIdent "at")
            genericImpl (AstGenericList mySeq [
            ])
            argImplSeq [
              (AstIdent "result")
              (AstIdent "idx")
            ]
          )
          right (AstFuncCall
            ident (AstIdent "times")
            genericImpl (AstGenericList mySeq [
            ])
            argImplSeq [
              (AstFuncCall
                ident (AstIdent "at")
                genericImpl (AstGenericList mySeq [
                ])
                argImplSeq [
                  (AstIdent "a")
                  (AstIdent "idx")
                ]
              )
              (AstIdent "scale")
            ]
          )
        )
      ]
    )
    (AstReturn optExpr (AstIdent "result"))
  ]
), sym: ..., tbl: {"T": @[0], "a": @[1], "scale": @[2]}, parent: ..., childSeq: ...)
curr: (ast: (AstIdent "scale"), sym: ..., tbl: {:}, parent: ..., childSeq: ...) 0
argSym.get(): (inputFname: "test.scone", name: "scale", kind: symVar, initValAst: none(AstNode), typeInfo: ...)
argSym.get().typeInfo: (main: (inputFname: "test.scone", name: some("T"), funcVar: false, ptrDim: 0, arrDim: 0, ast: (AstNamedType
  ident (AstIdent "T")
  genericImpl (AstGenericList mySeq [
  ])
)), kind: tiToResolve, myToResolve: ())
----
gotoParentSymTbl: parent != nil: true
addChildSymTbl: childSeq.len(): 3
addChildSymTbl: post set parent: true 4
addSym: sym: (inputFname: "test.scone", name: "<result>", kind: symVar, initValAst: none(AstNode), typeInfo: ...)
addSym: tinfo: (main: (inputFname: "test.scone", name: some("Vec2"), funcVar: false, ptrDim: 0, arrDim: 0, ast: (AstNamedType
  ident (AstIdent "Vec2")
  genericImpl (AstGenericList mySeq [
    (AstType
      kwVar false
      ptrDim 0
      child (AstNamedType
        ident (AstIdent "T")
        genericImpl (AstGenericList mySeq [
        ])
      )
    )
  ])
)), kind: tiToResolve, myToResolve: ())
addsym: testificate: 3
debug: 
curr.parent: (ast: (AstDef
  ident (AstIdent "times")
  genericDecl (AstGenericList mySeq [
    (AstIdent "T")
  ])
  argDeclSeq [
    (AstVarEtcDeclMost
      ident (AstIdent "a")
      type (AstType
        kwVar false
        ptrDim 0
        child (AstNamedType
          ident (AstIdent "Vec2")
          genericImpl (AstGenericList mySeq [
            (AstType
              kwVar false
              ptrDim 0
              child (AstNamedType
                ident (AstIdent "T")
                genericImpl (AstGenericList mySeq [
                ])
              )
            )
          ])
        )
      )
    )
    (AstVarEtcDeclMost
      ident (AstIdent "scale")
      type (AstType
        kwVar false
        ptrDim 0
        child (AstNamedType
          ident (AstIdent "T")
          genericImpl (AstGenericList mySeq [
          ])
        )
      )
    )
  ]
  returnType (AstType
    kwVar false
    ptrDim 0
    child (AstNamedType
      ident (AstIdent "Vec2")
      genericImpl (AstGenericList mySeq [
        (AstType
          kwVar false
          ptrDim 0
          child (AstNamedType
            ident (AstIdent "T")
            genericImpl (AstGenericList mySeq [
            ])
          )
        )
      ])
    )
  )
  stmtSeq [
    (AstVar
      child (AstVarEtcDeclMost
        ident (AstIdent "result")
        type (AstType
          kwVar false
          ptrDim 0
          child (AstNamedType
            ident (AstIdent "Vec2")
            genericImpl (AstGenericList mySeq [
              (AstType
                kwVar false
                ptrDim 0
                child (AstNamedType
                  ident (AstIdent "T")
                  genericImpl (AstGenericList mySeq [
                  ])
                )
              )
            ])
          )
        )
      )
      optExpr !isSome
    )
    (AstFor
      ident (AstIdent "idx")
      exprPre (AstU64Lit u64Val 0)
      exprPost (AstU64Lit u64Val 2)
      isUntil true
      stmtSeq [
        (AstAssignEtc
          kind assignEtcRegular
          left (AstFuncCall
            ident (AstIdent "at")
            genericImpl (AstGenericList mySeq [
            ])
            argImplSeq [
              (AstIdent "result")
              (AstIdent "idx")
            ]
          )
          right (AstFuncCall
            ident (AstIdent "times")
            genericImpl (AstGenericList mySeq [
            ])
            argImplSeq [
              (AstFuncCall
                ident (AstIdent "at")
                genericImpl (AstGenericList mySeq [
                ])
                argImplSeq [
                  (AstIdent "a")
                  (AstIdent "idx")
                ]
              )
              (AstIdent "scale")
            ]
          )
        )
      ]
    )
    (AstReturn optExpr (AstIdent "result"))
  ]
), sym: ..., tbl: {"T": @[0], "a": @[1], "scale": @[2], "<result>": @[3]}, parent: ..., childSeq: ...)
curr: (ast: (AstType
  kwVar false
  ptrDim 0
  child (AstNamedType
    ident (AstIdent "Vec2")
    genericImpl (AstGenericList mySeq [
      (AstType
        kwVar false
        ptrDim 0
        child (AstNamedType
          ident (AstIdent "T")
          genericImpl (AstGenericList mySeq [
          ])
        )
      )
    ])
  )
), sym: ..., tbl: {:}, parent: ..., childSeq: ...) 0
argSym.get(): (inputFname: "test.scone", name: "<result>", kind: symVar, initValAst: none(AstNode), typeInfo: ...)
argSym.get().typeInfo: (main: (inputFname: "test.scone", name: some("Vec2"), funcVar: false, ptrDim: 0, arrDim: 0, ast: (AstNamedType
  ident (AstIdent "Vec2")
  genericImpl (AstGenericList mySeq [
    (AstType
      kwVar false
      ptrDim 0
      child (AstNamedType
        ident (AstIdent "T")
        genericImpl (AstGenericList mySeq [
        ])
      )
    )
  ])
)), kind: tiToResolve, myToResolve: ())
----
gotoParentSymTbl: parent != nil: true
debug: 
curr.parent: (ast: (AstSrcFile
  module (AstModule ident (AstIdent "myModule"))
  funcDeclSeq [
    (AstDef
      ident (AstIdent "dot")
      genericDecl (AstGenericList mySeq [
        (AstIdent "T")
      ])
      argDeclSeq [
        (AstVarEtcDeclMost
          ident (AstIdent "a")
          type (AstType
            kwVar true
            ptrDim 0
            child (AstNamedType
              ident (AstIdent "Vec2")
              genericImpl (AstGenericList mySeq [
                (AstType
                  kwVar false
                  ptrDim 0
                  child (AstNamedType
                    ident (AstIdent "T")
                    genericImpl (AstGenericList mySeq [
                    ])
                  )
                )
              ])
            )
          )
        )
        (AstVarEtcDeclMost
          ident (AstIdent "b")
          type (AstType
            kwVar true
            ptrDim 0
            child (AstNamedType
              ident (AstIdent "Vec2")
              genericImpl (AstGenericList mySeq [
                (AstType
                  kwVar false
                  ptrDim 0
                  child (AstNamedType
                    ident (AstIdent "T")
                    genericImpl (AstGenericList mySeq [
                    ])
                  )
                )
              ])
            )
          )
        )
      ]
      returnType (AstType
        kwVar false
        ptrDim 0
        child (AstNamedType
          ident (AstIdent "T")
          genericImpl (AstGenericList mySeq [
          ])
        )
      )
      stmtSeq [
        (AstConst
          child (AstVarEtcDeclMost
            ident (AstIdent "result")
            type (AstType
              kwVar false
              ptrDim 0
              child (AstNamedType
                ident (AstIdent "T")
                genericImpl (AstGenericList mySeq [
                ])
              )
            )
          )
          expr (AstBinop
            kind binopPlus
            left (AstBinop
              kind binopMul
              left (AstDot
                left (AstIdent "a")
                right (AstIdent "x")
              )
              right (AstDot
                left (AstIdent "b")
                right (AstIdent "x")
              )
            )
            right (AstBinop
              kind binopMul
              left (AstDot
                left (AstIdent "a")
                right (AstIdent "y")
              )
              right (AstDot
                left (AstIdent "b")
                right (AstIdent "y")
              )
            )
          )
        )
        (AstReturn optExpr (AstIdent "result"))
      ]
    )
    (AstDef
      ident (AstIdent "plus")
      genericDecl (AstGenericList mySeq [
        (AstIdent "T")
      ])
      argDeclSeq [
        (AstVarEtcDeclMost
          ident (AstIdent "a")
          type (AstType
            kwVar true
            ptrDim 0
            child (AstNamedType
              ident (AstIdent "T")
              genericImpl (AstGenericList mySeq [
              ])
            )
          )
        )
        (AstVarEtcDeclMost
          ident (AstIdent "b")
          type (AstType
            kwVar true
            ptrDim 0
            child (AstNamedType
              ident (AstIdent "T")
              genericImpl (AstGenericList mySeq [
              ])
            )
          )
        )
      ]
      returnType (AstType
        kwVar false
        ptrDim 0
        child (AstNamedType
          ident (AstIdent "T")
          genericImpl (AstGenericList mySeq [
          ])
        )
      )
      stmtSeq [
        (AstReturn optExpr (AstBinop
          kind binopPlus
          left (AstIdent "a")
          right (AstIdent "b")
        ))
      ]
    )
    (AstDef
      ident (AstIdent "plus")
      genericDecl (AstGenericList mySeq [
        (AstIdent "T")
      ])
      argDeclSeq [
        (AstVarEtcDeclMost
          ident (AstIdent "a")
          type (AstType
            kwVar true
            ptrDim 0
            child (AstNamedType
              ident (AstIdent "Vec2")
              genericImpl (AstGenericList mySeq [
                (AstType
                  kwVar false
                  ptrDim 0
                  child (AstNamedType
                    ident (AstIdent "T")
                    genericImpl (AstGenericList mySeq [
                    ])
                  )
                )
              ])
            )
          )
        )
        (AstVarEtcDeclMost
          ident (AstIdent "b")
          type (AstType
            kwVar true
            ptrDim 0
            child (AstNamedType
              ident (AstIdent "Vec2")
              genericImpl (AstGenericList mySeq [
                (AstType
                  kwVar false
                  ptrDim 0
                  child (AstNamedType
                    ident (AstIdent "T")
                    genericImpl (AstGenericList mySeq [
                    ])
                  )
                )
              ])
            )
          )
        )
      ]
      returnType (AstType
        kwVar false
        ptrDim 0
        child (AstNamedType
          ident (AstIdent "Vec2")
          genericImpl (AstGenericList mySeq [
            (AstType
              kwVar false
              ptrDim 0
              child (AstNamedType
                ident (AstIdent "T")
                genericImpl (AstGenericList mySeq [
                ])
              )
            )
          ])
        )
      )
      stmtSeq [
        (AstVar
          child (AstVarEtcDeclMost
            ident (AstIdent "result")
            type (AstType
              kwVar false
              ptrDim 0
              child (AstNamedType
                ident (AstIdent "Vec2")
                genericImpl (AstGenericList mySeq [
                  (AstType
                    kwVar false
                    ptrDim 0
                    child (AstNamedType
                      ident (AstIdent "T")
                      genericImpl (AstGenericList mySeq [
                      ])
                    )
                  )
                ])
              )
            )
          )
          optExpr !isSome
        )
        (AstFor
          ident (AstIdent "idx")
          exprPre (AstU64Lit u64Val 0)
          exprPost (AstU64Lit u64Val 2)
          isUntil true
          stmtSeq [
            (AstAssignEtc
              kind assignEtcRegular
              left (AstFuncCall
                ident (AstIdent "at")
                genericImpl (AstGenericList mySeq [
                ])
                argImplSeq [
                  (AstIdent "result")
                  (AstIdent "idx")
                ]
              )
              right (AstBinop
                kind binopPlus
                left (AstFuncCall
                  ident (AstIdent "at")
                  genericImpl (AstGenericList mySeq [
                  ])
                  argImplSeq [
                    (AstIdent "a")
                    (AstIdent "idx")
                  ]
                )
                right (AstFuncCall
                  ident (AstIdent "at")
                  genericImpl (AstGenericList mySeq [
                  ])
                  argImplSeq [
                    (AstIdent "b")
                    (AstIdent "idx")
                  ]
                )
              )
            )
          ]
        )
        (AstReturn optExpr (AstIdent "result"))
      ]
    )
    (AstDef
      ident (AstIdent "times")
      genericDecl (AstGenericList mySeq [
        (AstIdent "T")
      ])
      argDeclSeq [
        (AstVarEtcDeclMost
          ident (AstIdent "a")
          type (AstType
            kwVar false
            ptrDim 0
            child (AstNamedType
              ident (AstIdent "T")
              genericImpl (AstGenericList mySeq [
              ])
            )
          )
        )
        (AstVarEtcDeclMost
          ident (AstIdent "b")
          type (AstType
            kwVar false
            ptrDim 0
            child (AstNamedType
              ident (AstIdent "T")
              genericImpl (AstGenericList mySeq [
              ])
            )
          )
        )
      ]
      returnType (AstType
        kwVar false
        ptrDim 0
        child (AstNamedType
          ident (AstIdent "T")
          genericImpl (AstGenericList mySeq [
          ])
        )
      )
      stmtSeq [
        (AstReturn optExpr (AstBinop
          kind binopMul
          left (AstIdent "a")
          right (AstIdent "b")
        ))
      ]
    )
    (AstDef
      ident (AstIdent "times")
      genericDecl (AstGenericList mySeq [
        (AstIdent "T")
      ])
      argDeclSeq [
        (AstVarEtcDeclMost
          ident (AstIdent "a")
          type (AstType
            kwVar false
            ptrDim 0
            child (AstNamedType
              ident (AstIdent "Vec2")
              genericImpl (AstGenericList mySeq [
                (AstType
                  kwVar false
                  ptrDim 0
                  child (AstNamedType
                    ident (AstIdent "T")
                    genericImpl (AstGenericList mySeq [
                    ])
                  )
                )
              ])
            )
          )
        )
        (AstVarEtcDeclMost
          ident (AstIdent "scale")
          type (AstType
            kwVar false
            ptrDim 0
            child (AstNamedType
              ident (AstIdent "T")
              genericImpl (AstGenericList mySeq [
              ])
            )
          )
        )
      ]
      returnType (AstType
        kwVar false
        ptrDim 0
        child (AstNamedType
          ident (AstIdent "Vec2")
          genericImpl (AstGenericList mySeq [
            (AstType
              kwVar false
              ptrDim 0
              child (AstNamedType
                ident (AstIdent "T")
                genericImpl (AstGenericList mySeq [
                ])
              )
            )
          ])
        )
      )
      stmtSeq [
        (AstVar
          child (AstVarEtcDeclMost
            ident (AstIdent "result")
            type (AstType
              kwVar false
              ptrDim 0
              child (AstNamedType
                ident (AstIdent "Vec2")
                genericImpl (AstGenericList mySeq [
                  (AstType
                    kwVar false
                    ptrDim 0
                    child (AstNamedType
                      ident (AstIdent "T")
                      genericImpl (AstGenericList mySeq [
                      ])
                    )
                  )
                ])
              )
            )
          )
          optExpr !isSome
        )
        (AstFor
          ident (AstIdent "idx")
          exprPre (AstU64Lit u64Val 0)
          exprPost (AstU64Lit u64Val 2)
          isUntil true
          stmtSeq [
            (AstAssignEtc
              kind assignEtcRegular
              left (AstFuncCall
                ident (AstIdent "at")
                genericImpl (AstGenericList mySeq [
                ])
                argImplSeq [
                  (AstIdent "result")
                  (AstIdent "idx")
                ]
              )
              right (AstFuncCall
                ident (AstIdent "times")
                genericImpl (AstGenericList mySeq [
                ])
                argImplSeq [
                  (AstFuncCall
                    ident (AstIdent "at")
                    genericImpl (AstGenericList mySeq [
                    ])
                    argImplSeq [
                      (AstIdent "a")
                      (AstIdent "idx")
                    ]
                  )
                  (AstIdent "scale")
                ]
              )
            )
          ]
        )
        (AstReturn optExpr (AstIdent "result"))
      ]
    )
    (AstDef
      ident (AstIdent "at")
      genericDecl (AstGenericList mySeq [
        (AstIdent "T")
      ])
      argDeclSeq [
        (AstVarEtcDeclMost
          ident (AstIdent "self")
          type (AstType
            kwVar true
            ptrDim 0
            child (AstNamedType
              ident (AstIdent "Vec2")
              genericImpl (AstGenericList mySeq [
                (AstType
                  kwVar false
                  ptrDim 0
                  child (AstNamedType
                    ident (AstIdent "T")
                    genericImpl (AstGenericList mySeq [
                    ])
                  )
                )
              ])
            )
          )
        )
        (AstVarEtcDeclMost
          ident (AstIdent "idx")
          type (AstType
            kwVar false
            ptrDim 0
            child (AstBasicType kind basicTypeU32)
          )
        )
      ]
      returnType (AstType
        kwVar true
        ptrDim 0
        child (AstNamedType
          ident (AstIdent "T")
          genericImpl (AstGenericList mySeq [
          ])
        )
      )
      stmtSeq [
        (AstIf
          expr (AstBinop
            kind binopCmpEq
            left (AstIdent "idx")
            right (AstU64Lit u64Val 0)
          )
          stmtSeq [
            (AstReturn optExpr (AstDot
              left (AstIdent "self")
              right (AstIdent "x")
            ))
          ]
          elifSeq [
          ]
          optElse (AstElse stmtSeq [
            (AstReturn optExpr (AstDot
              left (AstIdent "self")
              right (AstIdent "y")
            ))
          ])
        )
      ]
    )
    (AstDef
      ident (AstIdent "sum")
      genericDecl (AstGenericList mySeq [
        (AstIdent "T")
      ])
      argDeclSeq [
        (AstVarEtcDeclMost
          ident (AstIdent "toSum")
          type (AstType
            kwVar true
            ptrDim 0
            child (AstArray
              dim (AstBinop
                kind binopMul
                left (AstU64Lit u64Val 8)
                right (AstU64Lit u64Val 3)
              )
              elemType (AstType
                kwVar false
                ptrDim 0
                child (AstNamedType
                  ident (AstIdent "Vec2")
                  genericImpl (AstGenericList mySeq [
                    (AstType
                      kwVar false
                      ptrDim 0
                      child (AstNamedType
                        ident (AstIdent "T")
                        genericImpl (AstGenericList mySeq [
                        ])
                      )
                    )
                  ])
                )
              )
            )
          )
        )
      ]
      returnType (AstType
        kwVar false
        ptrDim 0
        child (AstNamedType
          ident (AstIdent "Vec2")
          genericImpl (AstGenericList mySeq [
            (AstType
              kwVar false
              ptrDim 0
              child (AstNamedType
                ident (AstIdent "T")
                genericImpl (AstGenericList mySeq [
                ])
              )
            )
          ])
        )
      )
      stmtSeq [
        (AstVar
          child (AstVarEtcDeclMost
            ident (AstIdent "result")
            type (AstType
              kwVar false
              ptrDim 0
              child (AstNamedType
                ident (AstIdent "Vec2")
                genericImpl (AstGenericList mySeq [
                  (AstType
                    kwVar false
                    ptrDim 0
                    child (AstNamedType
                      ident (AstIdent "T")
                      genericImpl (AstGenericList mySeq [
                      ])
                    )
                  )
                ])
              )
            )
          )
          optExpr !isSome
        )
        (AstFor
          ident (AstIdent "jdx")
          exprPre (AstU64Lit u64Val 0)
          exprPost (AstBinop
            kind binopMul
            left (AstU64Lit u64Val 8)
            right (AstU64Lit u64Val 3)
          )
          isUntil true
          stmtSeq [
            (AstIf
              expr (AstBinop
                kind binopCmpEq
                left (AstIdent "jdx")
                right (AstU64Lit u64Val 0)
              )
              stmtSeq [
                (AstFor
                  ident (AstIdent "idx")
                  exprPre (AstU64Lit u64Val 0)
                  exprPost (AstU64Lit u64Val 2)
                  isUntil true
                  stmtSeq [
                    (AstAssignEtc
                      kind assignEtcRegular
                      left (AstFuncCall
                        ident (AstIdent "at")
                        genericImpl (AstGenericList mySeq [
                        ])
                        argImplSeq [
                          (AstIdent "result")
                          (AstIdent "idx")
                        ]
                      )
                      right (AstFuncCall
                        ident (AstIdent "at")
                        genericImpl (AstGenericList mySeq [
                        ])
                        argImplSeq [
                          (AstFuncCall
                            ident (AstIdent "toSum")
                            genericImpl (AstGenericList mySeq [
                            ])
                            argImplSeq [
                              (AstU64Lit u64Val 0)
                            ]
                          )
                          (AstIdent "idx")
                        ]
                      )
                    )
                  ]
                )
              ]
              elifSeq [
              ]
              optElse (AstElse stmtSeq [
                (AstAssignEtc
                  kind assignEtcRegular
                  left (AstIdent "result")
                  right (AstFuncCall
                    ident (AstIdent "plus")
                    genericImpl (AstGenericList mySeq [
                    ])
                    argImplSeq [
                      (AstIdent "result")
                      (AstFuncCall
                        ident (AstIdent "toSum")
                        genericImpl (AstGenericList mySeq [
                        ])
                        argImplSeq [
                          (AstIdent "jdx")
                        ]
                      )
                    ]
                  )
                )
              ])
            )
          ]
        )
        (AstReturn optExpr (AstIdent "result"))
      ]
    )
  ]
  structDeclSeq [
    (AstStruct
      ident (AstIdent "Vec2")
      genericDecl (AstGenericList mySeq [
        (AstIdent "T")
      ])
      fieldSeq [
        (AstVarEtcDeclMost
          ident (AstIdent "x")
          type (AstType
            kwVar false
            ptrDim 0
            child (AstNamedType
              ident (AstIdent "T")
              genericImpl (AstGenericList mySeq [
              ])
            )
          )
        )
        (AstVarEtcDeclMost
          ident (AstIdent "y")
          type (AstType
            kwVar false
            ptrDim 0
            child (AstNamedType
              ident (AstIdent "T")
              genericImpl (AstGenericList mySeq [
              ])
            )
          )
        )
      ]
    )
    (AstStruct
      ident (AstIdent "Vec2Ptr")
      genericDecl (AstGenericList mySeq [
        (AstIdent "T")
      ])
      fieldSeq [
        (AstVarEtcDeclMost
          ident (AstIdent "x")
          type (AstType
            kwVar false
            ptrDim 1
            child (AstNamedType
              ident (AstIdent "T")
              genericImpl (AstGenericList mySeq [
              ])
            )
          )
        )
        (AstVarEtcDeclMost
          ident (AstIdent "y")
          type (AstType
            kwVar false
            ptrDim 1
            child (AstNamedType
              ident (AstIdent "T")
              genericImpl (AstGenericList mySeq [
              ])
            )
          )
        )
      ]
    )
    (AstStruct
      ident (AstIdent "Vec3Arr3Vec2")
      genericDecl (AstGenericList mySeq [
        (AstIdent "T")
      ])
      fieldSeq [
        (AstVarEtcDeclMost
          ident (AstIdent "x")
          type (AstType
            kwVar false
            ptrDim 0
            child (AstArray
              dim (AstU64Lit u64Val 3)
              elemType (AstType
                kwVar false
                ptrDim 0
                child (AstNamedType
                  ident (AstIdent "Vec2")
                  genericImpl (AstGenericList mySeq [
                    (AstType
                      kwVar false
                      ptrDim 0
                      child (AstNamedType
                        ident (AstIdent "T")
                        genericImpl (AstGenericList mySeq [
                        ])
                      )
                    )
                  ])
                )
              )
            )
          )
        )
        (AstVarEtcDeclMost
          ident (AstIdent "y")
          type (AstType
            kwVar false
            ptrDim 0
            child (AstArray
              dim (AstU64Lit u64Val 3)
              elemType (AstType
                kwVar false
                ptrDim 0
                child (AstNamedType
                  ident (AstIdent "Vec2")
                  genericImpl (AstGenericList mySeq [
                    (AstType
                      kwVar false
                      ptrDim 0
                      child (AstNamedType
                        ident (AstIdent "T")
                        genericImpl (AstGenericList mySeq [
                        ])
                      )
                    )
                  ])
                )
              )
            )
          )
        )
        (AstVarEtcDeclMost
          ident (AstIdent "z")
          type (AstType
            kwVar false
            ptrDim 0
            child (AstArray
              dim (AstU64Lit u64Val 3)
              elemType (AstType
                kwVar false
                ptrDim 0
                child (AstNamedType
                  ident (AstIdent "Vec2")
                  genericImpl (AstGenericList mySeq [
                    (AstType
                      kwVar false
                      ptrDim 0
                      child (AstNamedType
                        ident (AstIdent "T")
                        genericImpl (AstGenericList mySeq [
                        ])
                      )
                    )
                  ])
                )
              )
            )
          )
        )
      ]
    )
  ]
), sym: ..., tbl: {"Vec2": @[0], "Vec2Ptr": @[1], "Vec3Arr3Vec2": @[2], "dot": @[3], "plus": @[4, 5], "times": @[6, 7]}, parent: ..., childSeq: ...)
curr: (ast: (AstDef
  ident (AstIdent "times")
  genericDecl (AstGenericList mySeq [
    (AstIdent "T")
  ])
  argDeclSeq [
    (AstVarEtcDeclMost
      ident (AstIdent "a")
      type (AstType
        kwVar false
        ptrDim 0
        child (AstNamedType
          ident (AstIdent "Vec2")
          genericImpl (AstGenericList mySeq [
            (AstType
              kwVar false
              ptrDim 0
              child (AstNamedType
                ident (AstIdent "T")
                genericImpl (AstGenericList mySeq [
                ])
              )
            )
          ])
        )
      )
    )
    (AstVarEtcDeclMost
      ident (AstIdent "scale")
      type (AstType
        kwVar false
        ptrDim 0
        child (AstNamedType
          ident (AstIdent "T")
          genericImpl (AstGenericList mySeq [
          ])
        )
      )
    )
  ]
  returnType (AstType
    kwVar false
    ptrDim 0
    child (AstNamedType
      ident (AstIdent "Vec2")
      genericImpl (AstGenericList mySeq [
        (AstType
          kwVar false
          ptrDim 0
          child (AstNamedType
            ident (AstIdent "T")
            genericImpl (AstGenericList mySeq [
            ])
          )
        )
      ])
    )
  )
  stmtSeq [
    (AstVar
      child (AstVarEtcDeclMost
        ident (AstIdent "result")
        type (AstType
          kwVar false
          ptrDim 0
          child (AstNamedType
            ident (AstIdent "Vec2")
            genericImpl (AstGenericList mySeq [
              (AstType
                kwVar false
                ptrDim 0
                child (AstNamedType
                  ident (AstIdent "T")
                  genericImpl (AstGenericList mySeq [
                  ])
                )
              )
            ])
          )
        )
      )
      optExpr !isSome
    )
    (AstFor
      ident (AstIdent "idx")
      exprPre (AstU64Lit u64Val 0)
      exprPost (AstU64Lit u64Val 2)
      isUntil true
      stmtSeq [
        (AstAssignEtc
          kind assignEtcRegular
          left (AstFuncCall
            ident (AstIdent "at")
            genericImpl (AstGenericList mySeq [
            ])
            argImplSeq [
              (AstIdent "result")
              (AstIdent "idx")
            ]
          )
          right (AstFuncCall
            ident (AstIdent "times")
            genericImpl (AstGenericList mySeq [
            ])
            argImplSeq [
              (AstFuncCall
                ident (AstIdent "at")
                genericImpl (AstGenericList mySeq [
                ])
                argImplSeq [
                  (AstIdent "a")
                  (AstIdent "idx")
                ]
              )
              (AstIdent "scale")
            ]
          )
        )
      ]
    )
    (AstReturn optExpr (AstIdent "result"))
  ]
), sym: ..., tbl: {"T": @[0], "a": @[1], "scale": @[2], "<result>": @[3]}, parent: ..., childSeq: ...) 4
argSym.get(): (inputFname: "test.scone", name: "times", kind: symFuncDecl, initValAst: none(AstNode), typeInfo: ...)
argSym.get().typeInfo: (main: (inputFname: "test.scone", name: none(string), funcVar: false, ptrDim: 0, arrDim: 0, ast: nil), kind: tiFunc, myFunc: (genericIdxSeq: @[], argIdxSeq: @[1, 2], returnTypeIdx: 3))
----
gotoParentSymTbl: parent != nil: true
addChildSymTbl: childSeq.len(): 8
addChildSymTbl: post set parent: true 9
addSym: sym: (inputFname: "test.scone", name: "at", kind: symFuncDecl, initValAst: none(AstNode), typeInfo: ...)
addSym: tinfo: (main: (inputFname: "test.scone", name: none(string), funcVar: false, ptrDim: 0, arrDim: 0, ast: nil), kind: tiFunc, myFunc: (genericIdxSeq: @[], argIdxSeq: @[], returnTypeIdx: 0))
addsym: testificate: 8
addChildSymTbl: childSeq.len(): 0
addChildSymTbl: post set parent: true 1
addSym: sym: (inputFname: "test.scone", name: "T", kind: symGenericDecl, initValAst: none(AstNode), typeInfo: ...)
addSym: tinfo: (main: (inputFname: "test.scone", name: none(string), funcVar: false, ptrDim: 0, arrDim: 0, ast: nil), kind: tiToResolve, myToResolve: ())
addsym: testificate: 0
debug: 
curr.parent: (ast: (AstDef
  ident (AstIdent "at")
  genericDecl (AstGenericList mySeq [
    (AstIdent "T")
  ])
  argDeclSeq [
    (AstVarEtcDeclMost
      ident (AstIdent "self")
      type (AstType
        kwVar true
        ptrDim 0
        child (AstNamedType
          ident (AstIdent "Vec2")
          genericImpl (AstGenericList mySeq [
            (AstType
              kwVar false
              ptrDim 0
              child (AstNamedType
                ident (AstIdent "T")
                genericImpl (AstGenericList mySeq [
                ])
              )
            )
          ])
        )
      )
    )
    (AstVarEtcDeclMost
      ident (AstIdent "idx")
      type (AstType
        kwVar false
        ptrDim 0
        child (AstBasicType kind basicTypeU32)
      )
    )
  ]
  returnType (AstType
    kwVar true
    ptrDim 0
    child (AstNamedType
      ident (AstIdent "T")
      genericImpl (AstGenericList mySeq [
      ])
    )
  )
  stmtSeq [
    (AstIf
      expr (AstBinop
        kind binopCmpEq
        left (AstIdent "idx")
        right (AstU64Lit u64Val 0)
      )
      stmtSeq [
        (AstReturn optExpr (AstDot
          left (AstIdent "self")
          right (AstIdent "x")
        ))
      ]
      elifSeq [
      ]
      optElse (AstElse stmtSeq [
        (AstReturn optExpr (AstDot
          left (AstIdent "self")
          right (AstIdent "y")
        ))
      ])
    )
  ]
), sym: ..., tbl: {"T": @[0]}, parent: ..., childSeq: ...)
curr: (ast: (AstIdent "T"), sym: ..., tbl: {:}, parent: ..., childSeq: ...) 0
argSym.get(): (inputFname: "test.scone", name: "T", kind: symGenericDecl, initValAst: none(AstNode), typeInfo: ...)
argSym.get().typeInfo: (main: (inputFname: "test.scone", name: none(string), funcVar: false, ptrDim: 0, arrDim: 0, ast: nil), kind: tiToResolve, myToResolve: ())
----
gotoParentSymTbl: parent != nil: true
addChildSymTbl: childSeq.len(): 1
addChildSymTbl: post set parent: true 2
addSym: sym: (inputFname: "test.scone", name: "self", kind: symVar, initValAst: none(AstNode), typeInfo: ...)
addSym: tinfo: (main: (inputFname: "test.scone", name: some("Vec2"), funcVar: true, ptrDim: 0, arrDim: 0, ast: (AstNamedType
  ident (AstIdent "Vec2")
  genericImpl (AstGenericList mySeq [
    (AstType
      kwVar false
      ptrDim 0
      child (AstNamedType
        ident (AstIdent "T")
        genericImpl (AstGenericList mySeq [
        ])
      )
    )
  ])
)), kind: tiToResolve, myToResolve: ())
addsym: testificate: 1
debug: 
curr.parent: (ast: (AstDef
  ident (AstIdent "at")
  genericDecl (AstGenericList mySeq [
    (AstIdent "T")
  ])
  argDeclSeq [
    (AstVarEtcDeclMost
      ident (AstIdent "self")
      type (AstType
        kwVar true
        ptrDim 0
        child (AstNamedType
          ident (AstIdent "Vec2")
          genericImpl (AstGenericList mySeq [
            (AstType
              kwVar false
              ptrDim 0
              child (AstNamedType
                ident (AstIdent "T")
                genericImpl (AstGenericList mySeq [
                ])
              )
            )
          ])
        )
      )
    )
    (AstVarEtcDeclMost
      ident (AstIdent "idx")
      type (AstType
        kwVar false
        ptrDim 0
        child (AstBasicType kind basicTypeU32)
      )
    )
  ]
  returnType (AstType
    kwVar true
    ptrDim 0
    child (AstNamedType
      ident (AstIdent "T")
      genericImpl (AstGenericList mySeq [
      ])
    )
  )
  stmtSeq [
    (AstIf
      expr (AstBinop
        kind binopCmpEq
        left (AstIdent "idx")
        right (AstU64Lit u64Val 0)
      )
      stmtSeq [
        (AstReturn optExpr (AstDot
          left (AstIdent "self")
          right (AstIdent "x")
        ))
      ]
      elifSeq [
      ]
      optElse (AstElse stmtSeq [
        (AstReturn optExpr (AstDot
          left (AstIdent "self")
          right (AstIdent "y")
        ))
      ])
    )
  ]
), sym: ..., tbl: {"T": @[0], "self": @[1]}, parent: ..., childSeq: ...)
curr: (ast: (AstIdent "self"), sym: ..., tbl: {:}, parent: ..., childSeq: ...) 0
argSym.get(): (inputFname: "test.scone", name: "self", kind: symVar, initValAst: none(AstNode), typeInfo: ...)
argSym.get().typeInfo: (main: (inputFname: "test.scone", name: some("Vec2"), funcVar: true, ptrDim: 0, arrDim: 0, ast: (AstNamedType
  ident (AstIdent "Vec2")
  genericImpl (AstGenericList mySeq [
    (AstType
      kwVar false
      ptrDim 0
      child (AstNamedType
        ident (AstIdent "T")
        genericImpl (AstGenericList mySeq [
        ])
      )
    )
  ])
)), kind: tiToResolve, myToResolve: ())
----
gotoParentSymTbl: parent != nil: true
addChildSymTbl: childSeq.len(): 2
addChildSymTbl: post set parent: true 3
addSym: sym: (inputFname: "test.scone", name: "idx", kind: symVar, initValAst: none(AstNode), typeInfo: ...)
addSym: tinfo: (main: (inputFname: "test.scone", name: none(string), funcVar: false, ptrDim: 0, arrDim: 0, ast: (AstBasicType kind basicTypeU32)), kind: tiBasicType, myBasicType: (kind: basicTypeVoid))
addsym: testificate: 2
debug: 
curr.parent: (ast: (AstDef
  ident (AstIdent "at")
  genericDecl (AstGenericList mySeq [
    (AstIdent "T")
  ])
  argDeclSeq [
    (AstVarEtcDeclMost
      ident (AstIdent "self")
      type (AstType
        kwVar true
        ptrDim 0
        child (AstNamedType
          ident (AstIdent "Vec2")
          genericImpl (AstGenericList mySeq [
            (AstType
              kwVar false
              ptrDim 0
              child (AstNamedType
                ident (AstIdent "T")
                genericImpl (AstGenericList mySeq [
                ])
              )
            )
          ])
        )
      )
    )
    (AstVarEtcDeclMost
      ident (AstIdent "idx")
      type (AstType
        kwVar false
        ptrDim 0
        child (AstBasicType kind basicTypeU32)
      )
    )
  ]
  returnType (AstType
    kwVar true
    ptrDim 0
    child (AstNamedType
      ident (AstIdent "T")
      genericImpl (AstGenericList mySeq [
      ])
    )
  )
  stmtSeq [
    (AstIf
      expr (AstBinop
        kind binopCmpEq
        left (AstIdent "idx")
        right (AstU64Lit u64Val 0)
      )
      stmtSeq [
        (AstReturn optExpr (AstDot
          left (AstIdent "self")
          right (AstIdent "x")
        ))
      ]
      elifSeq [
      ]
      optElse (AstElse stmtSeq [
        (AstReturn optExpr (AstDot
          left (AstIdent "self")
          right (AstIdent "y")
        ))
      ])
    )
  ]
), sym: ..., tbl: {"T": @[0], "self": @[1], "idx": @[2]}, parent: ..., childSeq: ...)
curr: (ast: (AstIdent "idx"), sym: ..., tbl: {:}, parent: ..., childSeq: ...) 0
argSym.get(): (inputFname: "test.scone", name: "idx", kind: symVar, initValAst: none(AstNode), typeInfo: ...)
argSym.get().typeInfo: (main: (inputFname: "test.scone", name: none(string), funcVar: false, ptrDim: 0, arrDim: 0, ast: (AstBasicType kind basicTypeU32)), kind: tiBasicType, myBasicType: (kind: basicTypeVoid))
----
gotoParentSymTbl: parent != nil: true
addChildSymTbl: childSeq.len(): 3
addChildSymTbl: post set parent: true 4
addSym: sym: (inputFname: "test.scone", name: "<result>", kind: symVar, initValAst: none(AstNode), typeInfo: ...)
addSym: tinfo: (main: (inputFname: "test.scone", name: some("T"), funcVar: true, ptrDim: 0, arrDim: 0, ast: (AstNamedType
  ident (AstIdent "T")
  genericImpl (AstGenericList mySeq [
  ])
)), kind: tiToResolve, myToResolve: ())
addsym: testificate: 3
debug: 
curr.parent: (ast: (AstDef
  ident (AstIdent "at")
  genericDecl (AstGenericList mySeq [
    (AstIdent "T")
  ])
  argDeclSeq [
    (AstVarEtcDeclMost
      ident (AstIdent "self")
      type (AstType
        kwVar true
        ptrDim 0
        child (AstNamedType
          ident (AstIdent "Vec2")
          genericImpl (AstGenericList mySeq [
            (AstType
              kwVar false
              ptrDim 0
              child (AstNamedType
                ident (AstIdent "T")
                genericImpl (AstGenericList mySeq [
                ])
              )
            )
          ])
        )
      )
    )
    (AstVarEtcDeclMost
      ident (AstIdent "idx")
      type (AstType
        kwVar false
        ptrDim 0
        child (AstBasicType kind basicTypeU32)
      )
    )
  ]
  returnType (AstType
    kwVar true
    ptrDim 0
    child (AstNamedType
      ident (AstIdent "T")
      genericImpl (AstGenericList mySeq [
      ])
    )
  )
  stmtSeq [
    (AstIf
      expr (AstBinop
        kind binopCmpEq
        left (AstIdent "idx")
        right (AstU64Lit u64Val 0)
      )
      stmtSeq [
        (AstReturn optExpr (AstDot
          left (AstIdent "self")
          right (AstIdent "x")
        ))
      ]
      elifSeq [
      ]
      optElse (AstElse stmtSeq [
        (AstReturn optExpr (AstDot
          left (AstIdent "self")
          right (AstIdent "y")
        ))
      ])
    )
  ]
), sym: ..., tbl: {"T": @[0], "self": @[1], "idx": @[2], "<result>": @[3]}, parent: ..., childSeq: ...)
curr: (ast: (AstType
  kwVar true
  ptrDim 0
  child (AstNamedType
    ident (AstIdent "T")
    genericImpl (AstGenericList mySeq [
    ])
  )
), sym: ..., tbl: {:}, parent: ..., childSeq: ...) 0
argSym.get(): (inputFname: "test.scone", name: "<result>", kind: symVar, initValAst: none(AstNode), typeInfo: ...)
argSym.get().typeInfo: (main: (inputFname: "test.scone", name: some("T"), funcVar: true, ptrDim: 0, arrDim: 0, ast: (AstNamedType
  ident (AstIdent "T")
  genericImpl (AstGenericList mySeq [
  ])
)), kind: tiToResolve, myToResolve: ())
----
gotoParentSymTbl: parent != nil: true
debug: 
curr.parent: (ast: (AstSrcFile
  module (AstModule ident (AstIdent "myModule"))
  funcDeclSeq [
    (AstDef
      ident (AstIdent "dot")
      genericDecl (AstGenericList mySeq [
        (AstIdent "T")
      ])
      argDeclSeq [
        (AstVarEtcDeclMost
          ident (AstIdent "a")
          type (AstType
            kwVar true
            ptrDim 0
            child (AstNamedType
              ident (AstIdent "Vec2")
              genericImpl (AstGenericList mySeq [
                (AstType
                  kwVar false
                  ptrDim 0
                  child (AstNamedType
                    ident (AstIdent "T")
                    genericImpl (AstGenericList mySeq [
                    ])
                  )
                )
              ])
            )
          )
        )
        (AstVarEtcDeclMost
          ident (AstIdent "b")
          type (AstType
            kwVar true
            ptrDim 0
            child (AstNamedType
              ident (AstIdent "Vec2")
              genericImpl (AstGenericList mySeq [
                (AstType
                  kwVar false
                  ptrDim 0
                  child (AstNamedType
                    ident (AstIdent "T")
                    genericImpl (AstGenericList mySeq [
                    ])
                  )
                )
              ])
            )
          )
        )
      ]
      returnType (AstType
        kwVar false
        ptrDim 0
        child (AstNamedType
          ident (AstIdent "T")
          genericImpl (AstGenericList mySeq [
          ])
        )
      )
      stmtSeq [
        (AstConst
          child (AstVarEtcDeclMost
            ident (AstIdent "result")
            type (AstType
              kwVar false
              ptrDim 0
              child (AstNamedType
                ident (AstIdent "T")
                genericImpl (AstGenericList mySeq [
                ])
              )
            )
          )
          expr (AstBinop
            kind binopPlus
            left (AstBinop
              kind binopMul
              left (AstDot
                left (AstIdent "a")
                right (AstIdent "x")
              )
              right (AstDot
                left (AstIdent "b")
                right (AstIdent "x")
              )
            )
            right (AstBinop
              kind binopMul
              left (AstDot
                left (AstIdent "a")
                right (AstIdent "y")
              )
              right (AstDot
                left (AstIdent "b")
                right (AstIdent "y")
              )
            )
          )
        )
        (AstReturn optExpr (AstIdent "result"))
      ]
    )
    (AstDef
      ident (AstIdent "plus")
      genericDecl (AstGenericList mySeq [
        (AstIdent "T")
      ])
      argDeclSeq [
        (AstVarEtcDeclMost
          ident (AstIdent "a")
          type (AstType
            kwVar true
            ptrDim 0
            child (AstNamedType
              ident (AstIdent "T")
              genericImpl (AstGenericList mySeq [
              ])
            )
          )
        )
        (AstVarEtcDeclMost
          ident (AstIdent "b")
          type (AstType
            kwVar true
            ptrDim 0
            child (AstNamedType
              ident (AstIdent "T")
              genericImpl (AstGenericList mySeq [
              ])
            )
          )
        )
      ]
      returnType (AstType
        kwVar false
        ptrDim 0
        child (AstNamedType
          ident (AstIdent "T")
          genericImpl (AstGenericList mySeq [
          ])
        )
      )
      stmtSeq [
        (AstReturn optExpr (AstBinop
          kind binopPlus
          left (AstIdent "a")
          right (AstIdent "b")
        ))
      ]
    )
    (AstDef
      ident (AstIdent "plus")
      genericDecl (AstGenericList mySeq [
        (AstIdent "T")
      ])
      argDeclSeq [
        (AstVarEtcDeclMost
          ident (AstIdent "a")
          type (AstType
            kwVar true
            ptrDim 0
            child (AstNamedType
              ident (AstIdent "Vec2")
              genericImpl (AstGenericList mySeq [
                (AstType
                  kwVar false
                  ptrDim 0
                  child (AstNamedType
                    ident (AstIdent "T")
                    genericImpl (AstGenericList mySeq [
                    ])
                  )
                )
              ])
            )
          )
        )
        (AstVarEtcDeclMost
          ident (AstIdent "b")
          type (AstType
            kwVar true
            ptrDim 0
            child (AstNamedType
              ident (AstIdent "Vec2")
              genericImpl (AstGenericList mySeq [
                (AstType
                  kwVar false
                  ptrDim 0
                  child (AstNamedType
                    ident (AstIdent "T")
                    genericImpl (AstGenericList mySeq [
                    ])
                  )
                )
              ])
            )
          )
        )
      ]
      returnType (AstType
        kwVar false
        ptrDim 0
        child (AstNamedType
          ident (AstIdent "Vec2")
          genericImpl (AstGenericList mySeq [
            (AstType
              kwVar false
              ptrDim 0
              child (AstNamedType
                ident (AstIdent "T")
                genericImpl (AstGenericList mySeq [
                ])
              )
            )
          ])
        )
      )
      stmtSeq [
        (AstVar
          child (AstVarEtcDeclMost
            ident (AstIdent "result")
            type (AstType
              kwVar false
              ptrDim 0
              child (AstNamedType
                ident (AstIdent "Vec2")
                genericImpl (AstGenericList mySeq [
                  (AstType
                    kwVar false
                    ptrDim 0
                    child (AstNamedType
                      ident (AstIdent "T")
                      genericImpl (AstGenericList mySeq [
                      ])
                    )
                  )
                ])
              )
            )
          )
          optExpr !isSome
        )
        (AstFor
          ident (AstIdent "idx")
          exprPre (AstU64Lit u64Val 0)
          exprPost (AstU64Lit u64Val 2)
          isUntil true
          stmtSeq [
            (AstAssignEtc
              kind assignEtcRegular
              left (AstFuncCall
                ident (AstIdent "at")
                genericImpl (AstGenericList mySeq [
                ])
                argImplSeq [
                  (AstIdent "result")
                  (AstIdent "idx")
                ]
              )
              right (AstBinop
                kind binopPlus
                left (AstFuncCall
                  ident (AstIdent "at")
                  genericImpl (AstGenericList mySeq [
                  ])
                  argImplSeq [
                    (AstIdent "a")
                    (AstIdent "idx")
                  ]
                )
                right (AstFuncCall
                  ident (AstIdent "at")
                  genericImpl (AstGenericList mySeq [
                  ])
                  argImplSeq [
                    (AstIdent "b")
                    (AstIdent "idx")
                  ]
                )
              )
            )
          ]
        )
        (AstReturn optExpr (AstIdent "result"))
      ]
    )
    (AstDef
      ident (AstIdent "times")
      genericDecl (AstGenericList mySeq [
        (AstIdent "T")
      ])
      argDeclSeq [
        (AstVarEtcDeclMost
          ident (AstIdent "a")
          type (AstType
            kwVar false
            ptrDim 0
            child (AstNamedType
              ident (AstIdent "T")
              genericImpl (AstGenericList mySeq [
              ])
            )
          )
        )
        (AstVarEtcDeclMost
          ident (AstIdent "b")
          type (AstType
            kwVar false
            ptrDim 0
            child (AstNamedType
              ident (AstIdent "T")
              genericImpl (AstGenericList mySeq [
              ])
            )
          )
        )
      ]
      returnType (AstType
        kwVar false
        ptrDim 0
        child (AstNamedType
          ident (AstIdent "T")
          genericImpl (AstGenericList mySeq [
          ])
        )
      )
      stmtSeq [
        (AstReturn optExpr (AstBinop
          kind binopMul
          left (AstIdent "a")
          right (AstIdent "b")
        ))
      ]
    )
    (AstDef
      ident (AstIdent "times")
      genericDecl (AstGenericList mySeq [
        (AstIdent "T")
      ])
      argDeclSeq [
        (AstVarEtcDeclMost
          ident (AstIdent "a")
          type (AstType
            kwVar false
            ptrDim 0
            child (AstNamedType
              ident (AstIdent "Vec2")
              genericImpl (AstGenericList mySeq [
                (AstType
                  kwVar false
                  ptrDim 0
                  child (AstNamedType
                    ident (AstIdent "T")
                    genericImpl (AstGenericList mySeq [
                    ])
                  )
                )
              ])
            )
          )
        )
        (AstVarEtcDeclMost
          ident (AstIdent "scale")
          type (AstType
            kwVar false
            ptrDim 0
            child (AstNamedType
              ident (AstIdent "T")
              genericImpl (AstGenericList mySeq [
              ])
            )
          )
        )
      ]
      returnType (AstType
        kwVar false
        ptrDim 0
        child (AstNamedType
          ident (AstIdent "Vec2")
          genericImpl (AstGenericList mySeq [
            (AstType
              kwVar false
              ptrDim 0
              child (AstNamedType
                ident (AstIdent "T")
                genericImpl (AstGenericList mySeq [
                ])
              )
            )
          ])
        )
      )
      stmtSeq [
        (AstVar
          child (AstVarEtcDeclMost
            ident (AstIdent "result")
            type (AstType
              kwVar false
              ptrDim 0
              child (AstNamedType
                ident (AstIdent "Vec2")
                genericImpl (AstGenericList mySeq [
                  (AstType
                    kwVar false
                    ptrDim 0
                    child (AstNamedType
                      ident (AstIdent "T")
                      genericImpl (AstGenericList mySeq [
                      ])
                    )
                  )
                ])
              )
            )
          )
          optExpr !isSome
        )
        (AstFor
          ident (AstIdent "idx")
          exprPre (AstU64Lit u64Val 0)
          exprPost (AstU64Lit u64Val 2)
          isUntil true
          stmtSeq [
            (AstAssignEtc
              kind assignEtcRegular
              left (AstFuncCall
                ident (AstIdent "at")
                genericImpl (AstGenericList mySeq [
                ])
                argImplSeq [
                  (AstIdent "result")
                  (AstIdent "idx")
                ]
              )
              right (AstFuncCall
                ident (AstIdent "times")
                genericImpl (AstGenericList mySeq [
                ])
                argImplSeq [
                  (AstFuncCall
                    ident (AstIdent "at")
                    genericImpl (AstGenericList mySeq [
                    ])
                    argImplSeq [
                      (AstIdent "a")
                      (AstIdent "idx")
                    ]
                  )
                  (AstIdent "scale")
                ]
              )
            )
          ]
        )
        (AstReturn optExpr (AstIdent "result"))
      ]
    )
    (AstDef
      ident (AstIdent "at")
      genericDecl (AstGenericList mySeq [
        (AstIdent "T")
      ])
      argDeclSeq [
        (AstVarEtcDeclMost
          ident (AstIdent "self")
          type (AstType
            kwVar true
            ptrDim 0
            child (AstNamedType
              ident (AstIdent "Vec2")
              genericImpl (AstGenericList mySeq [
                (AstType
                  kwVar false
                  ptrDim 0
                  child (AstNamedType
                    ident (AstIdent "T")
                    genericImpl (AstGenericList mySeq [
                    ])
                  )
                )
              ])
            )
          )
        )
        (AstVarEtcDeclMost
          ident (AstIdent "idx")
          type (AstType
            kwVar false
            ptrDim 0
            child (AstBasicType kind basicTypeU32)
          )
        )
      ]
      returnType (AstType
        kwVar true
        ptrDim 0
        child (AstNamedType
          ident (AstIdent "T")
          genericImpl (AstGenericList mySeq [
          ])
        )
      )
      stmtSeq [
        (AstIf
          expr (AstBinop
            kind binopCmpEq
            left (AstIdent "idx")
            right (AstU64Lit u64Val 0)
          )
          stmtSeq [
            (AstReturn optExpr (AstDot
              left (AstIdent "self")
              right (AstIdent "x")
            ))
          ]
          elifSeq [
          ]
          optElse (AstElse stmtSeq [
            (AstReturn optExpr (AstDot
              left (AstIdent "self")
              right (AstIdent "y")
            ))
          ])
        )
      ]
    )
    (AstDef
      ident (AstIdent "sum")
      genericDecl (AstGenericList mySeq [
        (AstIdent "T")
      ])
      argDeclSeq [
        (AstVarEtcDeclMost
          ident (AstIdent "toSum")
          type (AstType
            kwVar true
            ptrDim 0
            child (AstArray
              dim (AstBinop
                kind binopMul
                left (AstU64Lit u64Val 8)
                right (AstU64Lit u64Val 3)
              )
              elemType (AstType
                kwVar false
                ptrDim 0
                child (AstNamedType
                  ident (AstIdent "Vec2")
                  genericImpl (AstGenericList mySeq [
                    (AstType
                      kwVar false
                      ptrDim 0
                      child (AstNamedType
                        ident (AstIdent "T")
                        genericImpl (AstGenericList mySeq [
                        ])
                      )
                    )
                  ])
                )
              )
            )
          )
        )
      ]
      returnType (AstType
        kwVar false
        ptrDim 0
        child (AstNamedType
          ident (AstIdent "Vec2")
          genericImpl (AstGenericList mySeq [
            (AstType
              kwVar false
              ptrDim 0
              child (AstNamedType
                ident (AstIdent "T")
                genericImpl (AstGenericList mySeq [
                ])
              )
            )
          ])
        )
      )
      stmtSeq [
        (AstVar
          child (AstVarEtcDeclMost
            ident (AstIdent "result")
            type (AstType
              kwVar false
              ptrDim 0
              child (AstNamedType
                ident (AstIdent "Vec2")
                genericImpl (AstGenericList mySeq [
                  (AstType
                    kwVar false
                    ptrDim 0
                    child (AstNamedType
                      ident (AstIdent "T")
                      genericImpl (AstGenericList mySeq [
                      ])
                    )
                  )
                ])
              )
            )
          )
          optExpr !isSome
        )
        (AstFor
          ident (AstIdent "jdx")
          exprPre (AstU64Lit u64Val 0)
          exprPost (AstBinop
            kind binopMul
            left (AstU64Lit u64Val 8)
            right (AstU64Lit u64Val 3)
          )
          isUntil true
          stmtSeq [
            (AstIf
              expr (AstBinop
                kind binopCmpEq
                left (AstIdent "jdx")
                right (AstU64Lit u64Val 0)
              )
              stmtSeq [
                (AstFor
                  ident (AstIdent "idx")
                  exprPre (AstU64Lit u64Val 0)
                  exprPost (AstU64Lit u64Val 2)
                  isUntil true
                  stmtSeq [
                    (AstAssignEtc
                      kind assignEtcRegular
                      left (AstFuncCall
                        ident (AstIdent "at")
                        genericImpl (AstGenericList mySeq [
                        ])
                        argImplSeq [
                          (AstIdent "result")
                          (AstIdent "idx")
                        ]
                      )
                      right (AstFuncCall
                        ident (AstIdent "at")
                        genericImpl (AstGenericList mySeq [
                        ])
                        argImplSeq [
                          (AstFuncCall
                            ident (AstIdent "toSum")
                            genericImpl (AstGenericList mySeq [
                            ])
                            argImplSeq [
                              (AstU64Lit u64Val 0)
                            ]
                          )
                          (AstIdent "idx")
                        ]
                      )
                    )
                  ]
                )
              ]
              elifSeq [
              ]
              optElse (AstElse stmtSeq [
                (AstAssignEtc
                  kind assignEtcRegular
                  left (AstIdent "result")
                  right (AstFuncCall
                    ident (AstIdent "plus")
                    genericImpl (AstGenericList mySeq [
                    ])
                    argImplSeq [
                      (AstIdent "result")
                      (AstFuncCall
                        ident (AstIdent "toSum")
                        genericImpl (AstGenericList mySeq [
                        ])
                        argImplSeq [
                          (AstIdent "jdx")
                        ]
                      )
                    ]
                  )
                )
              ])
            )
          ]
        )
        (AstReturn optExpr (AstIdent "result"))
      ]
    )
  ]
  structDeclSeq [
    (AstStruct
      ident (AstIdent "Vec2")
      genericDecl (AstGenericList mySeq [
        (AstIdent "T")
      ])
      fieldSeq [
        (AstVarEtcDeclMost
          ident (AstIdent "x")
          type (AstType
            kwVar false
            ptrDim 0
            child (AstNamedType
              ident (AstIdent "T")
              genericImpl (AstGenericList mySeq [
              ])
            )
          )
        )
        (AstVarEtcDeclMost
          ident (AstIdent "y")
          type (AstType
            kwVar false
            ptrDim 0
            child (AstNamedType
              ident (AstIdent "T")
              genericImpl (AstGenericList mySeq [
              ])
            )
          )
        )
      ]
    )
    (AstStruct
      ident (AstIdent "Vec2Ptr")
      genericDecl (AstGenericList mySeq [
        (AstIdent "T")
      ])
      fieldSeq [
        (AstVarEtcDeclMost
          ident (AstIdent "x")
          type (AstType
            kwVar false
            ptrDim 1
            child (AstNamedType
              ident (AstIdent "T")
              genericImpl (AstGenericList mySeq [
              ])
            )
          )
        )
        (AstVarEtcDeclMost
          ident (AstIdent "y")
          type (AstType
            kwVar false
            ptrDim 1
            child (AstNamedType
              ident (AstIdent "T")
              genericImpl (AstGenericList mySeq [
              ])
            )
          )
        )
      ]
    )
    (AstStruct
      ident (AstIdent "Vec3Arr3Vec2")
      genericDecl (AstGenericList mySeq [
        (AstIdent "T")
      ])
      fieldSeq [
        (AstVarEtcDeclMost
          ident (AstIdent "x")
          type (AstType
            kwVar false
            ptrDim 0
            child (AstArray
              dim (AstU64Lit u64Val 3)
              elemType (AstType
                kwVar false
                ptrDim 0
                child (AstNamedType
                  ident (AstIdent "Vec2")
                  genericImpl (AstGenericList mySeq [
                    (AstType
                      kwVar false
                      ptrDim 0
                      child (AstNamedType
                        ident (AstIdent "T")
                        genericImpl (AstGenericList mySeq [
                        ])
                      )
                    )
                  ])
                )
              )
            )
          )
        )
        (AstVarEtcDeclMost
          ident (AstIdent "y")
          type (AstType
            kwVar false
            ptrDim 0
            child (AstArray
              dim (AstU64Lit u64Val 3)
              elemType (AstType
                kwVar false
                ptrDim 0
                child (AstNamedType
                  ident (AstIdent "Vec2")
                  genericImpl (AstGenericList mySeq [
                    (AstType
                      kwVar false
                      ptrDim 0
                      child (AstNamedType
                        ident (AstIdent "T")
                        genericImpl (AstGenericList mySeq [
                        ])
                      )
                    )
                  ])
                )
              )
            )
          )
        )
        (AstVarEtcDeclMost
          ident (AstIdent "z")
          type (AstType
            kwVar false
            ptrDim 0
            child (AstArray
              dim (AstU64Lit u64Val 3)
              elemType (AstType
                kwVar false
                ptrDim 0
                child (AstNamedType
                  ident (AstIdent "Vec2")
                  genericImpl (AstGenericList mySeq [
                    (AstType
                      kwVar false
                      ptrDim 0
                      child (AstNamedType
                        ident (AstIdent "T")
                        genericImpl (AstGenericList mySeq [
                        ])
                      )
                    )
                  ])
                )
              )
            )
          )
        )
      ]
    )
  ]
), sym: ..., tbl: {"Vec2": @[0], "Vec2Ptr": @[1], "Vec3Arr3Vec2": @[2], "dot": @[3], "plus": @[4, 5], "times": @[6, 7], "at": @[8]}, parent: ..., childSeq: ...)
curr: (ast: (AstDef
  ident (AstIdent "at")
  genericDecl (AstGenericList mySeq [
    (AstIdent "T")
  ])
  argDeclSeq [
    (AstVarEtcDeclMost
      ident (AstIdent "self")
      type (AstType
        kwVar true
        ptrDim 0
        child (AstNamedType
          ident (AstIdent "Vec2")
          genericImpl (AstGenericList mySeq [
            (AstType
              kwVar false
              ptrDim 0
              child (AstNamedType
                ident (AstIdent "T")
                genericImpl (AstGenericList mySeq [
                ])
              )
            )
          ])
        )
      )
    )
    (AstVarEtcDeclMost
      ident (AstIdent "idx")
      type (AstType
        kwVar false
        ptrDim 0
        child (AstBasicType kind basicTypeU32)
      )
    )
  ]
  returnType (AstType
    kwVar true
    ptrDim 0
    child (AstNamedType
      ident (AstIdent "T")
      genericImpl (AstGenericList mySeq [
      ])
    )
  )
  stmtSeq [
    (AstIf
      expr (AstBinop
        kind binopCmpEq
        left (AstIdent "idx")
        right (AstU64Lit u64Val 0)
      )
      stmtSeq [
        (AstReturn optExpr (AstDot
          left (AstIdent "self")
          right (AstIdent "x")
        ))
      ]
      elifSeq [
      ]
      optElse (AstElse stmtSeq [
        (AstReturn optExpr (AstDot
          left (AstIdent "self")
          right (AstIdent "y")
        ))
      ])
    )
  ]
), sym: ..., tbl: {"T": @[0], "self": @[1], "idx": @[2], "<result>": @[3]}, parent: ..., childSeq: ...) 4
argSym.get(): (inputFname: "test.scone", name: "at", kind: symFuncDecl, initValAst: none(AstNode), typeInfo: ...)
argSym.get().typeInfo: (main: (inputFname: "test.scone", name: none(string), funcVar: false, ptrDim: 0, arrDim: 0, ast: nil), kind: tiFunc, myFunc: (genericIdxSeq: @[], argIdxSeq: @[1, 2], returnTypeIdx: 3))
----
gotoParentSymTbl: parent != nil: true
addChildSymTbl: childSeq.len(): 9
addChildSymTbl: post set parent: true 10
addSym: sym: (inputFname: "test.scone", name: "sum", kind: symFuncDecl, initValAst: none(AstNode), typeInfo: ...)
addSym: tinfo: (main: (inputFname: "test.scone", name: none(string), funcVar: false, ptrDim: 0, arrDim: 0, ast: nil), kind: tiFunc, myFunc: (genericIdxSeq: @[], argIdxSeq: @[], returnTypeIdx: 0))
addsym: testificate: 9
addChildSymTbl: childSeq.len(): 0
addChildSymTbl: post set parent: true 1
addSym: sym: (inputFname: "test.scone", name: "T", kind: symGenericDecl, initValAst: none(AstNode), typeInfo: ...)
addSym: tinfo: (main: (inputFname: "test.scone", name: none(string), funcVar: false, ptrDim: 0, arrDim: 0, ast: nil), kind: tiToResolve, myToResolve: ())
addsym: testificate: 0
debug: 
curr.parent: (ast: (AstDef
  ident (AstIdent "sum")
  genericDecl (AstGenericList mySeq [
    (AstIdent "T")
  ])
  argDeclSeq [
    (AstVarEtcDeclMost
      ident (AstIdent "toSum")
      type (AstType
        kwVar true
        ptrDim 0
        child (AstArray
          dim (AstBinop
            kind binopMul
            left (AstU64Lit u64Val 8)
            right (AstU64Lit u64Val 3)
          )
          elemType (AstType
            kwVar false
            ptrDim 0
            child (AstNamedType
              ident (AstIdent "Vec2")
              genericImpl (AstGenericList mySeq [
                (AstType
                  kwVar false
                  ptrDim 0
                  child (AstNamedType
                    ident (AstIdent "T")
                    genericImpl (AstGenericList mySeq [
                    ])
                  )
                )
              ])
            )
          )
        )
      )
    )
  ]
  returnType (AstType
    kwVar false
    ptrDim 0
    child (AstNamedType
      ident (AstIdent "Vec2")
      genericImpl (AstGenericList mySeq [
        (AstType
          kwVar false
          ptrDim 0
          child (AstNamedType
            ident (AstIdent "T")
            genericImpl (AstGenericList mySeq [
            ])
          )
        )
      ])
    )
  )
  stmtSeq [
    (AstVar
      child (AstVarEtcDeclMost
        ident (AstIdent "result")
        type (AstType
          kwVar false
          ptrDim 0
          child (AstNamedType
            ident (AstIdent "Vec2")
            genericImpl (AstGenericList mySeq [
              (AstType
                kwVar false
                ptrDim 0
                child (AstNamedType
                  ident (AstIdent "T")
                  genericImpl (AstGenericList mySeq [
                  ])
                )
              )
            ])
          )
        )
      )
      optExpr !isSome
    )
    (AstFor
      ident (AstIdent "jdx")
      exprPre (AstU64Lit u64Val 0)
      exprPost (AstBinop
        kind binopMul
        left (AstU64Lit u64Val 8)
        right (AstU64Lit u64Val 3)
      )
      isUntil true
      stmtSeq [
        (AstIf
          expr (AstBinop
            kind binopCmpEq
            left (AstIdent "jdx")
            right (AstU64Lit u64Val 0)
          )
          stmtSeq [
            (AstFor
              ident (AstIdent "idx")
              exprPre (AstU64Lit u64Val 0)
              exprPost (AstU64Lit u64Val 2)
              isUntil true
              stmtSeq [
                (AstAssignEtc
                  kind assignEtcRegular
                  left (AstFuncCall
                    ident (AstIdent "at")
                    genericImpl (AstGenericList mySeq [
                    ])
                    argImplSeq [
                      (AstIdent "result")
                      (AstIdent "idx")
                    ]
                  )
                  right (AstFuncCall
                    ident (AstIdent "at")
                    genericImpl (AstGenericList mySeq [
                    ])
                    argImplSeq [
                      (AstFuncCall
                        ident (AstIdent "toSum")
                        genericImpl (AstGenericList mySeq [
                        ])
                        argImplSeq [
                          (AstU64Lit u64Val 0)
                        ]
                      )
                      (AstIdent "idx")
                    ]
                  )
                )
              ]
            )
          ]
          elifSeq [
          ]
          optElse (AstElse stmtSeq [
            (AstAssignEtc
              kind assignEtcRegular
              left (AstIdent "result")
              right (AstFuncCall
                ident (AstIdent "plus")
                genericImpl (AstGenericList mySeq [
                ])
                argImplSeq [
                  (AstIdent "result")
                  (AstFuncCall
                    ident (AstIdent "toSum")
                    genericImpl (AstGenericList mySeq [
                    ])
                    argImplSeq [
                      (AstIdent "jdx")
                    ]
                  )
                ]
              )
            )
          ])
        )
      ]
    )
    (AstReturn optExpr (AstIdent "result"))
  ]
), sym: ..., tbl: {"T": @[0]}, parent: ..., childSeq: ...)
curr: (ast: (AstIdent "T"), sym: ..., tbl: {:}, parent: ..., childSeq: ...) 0
argSym.get(): (inputFname: "test.scone", name: "T", kind: symGenericDecl, initValAst: none(AstNode), typeInfo: ...)
argSym.get().typeInfo: (main: (inputFname: "test.scone", name: none(string), funcVar: false, ptrDim: 0, arrDim: 0, ast: nil), kind: tiToResolve, myToResolve: ())
----
gotoParentSymTbl: parent != nil: true
addChildSymTbl: childSeq.len(): 1
addChildSymTbl: post set parent: true 2
addSym: sym: (inputFname: "test.scone", name: "toSum", kind: symVar, initValAst: none(AstNode), typeInfo: ...)
addSym: tinfo: (main: (inputFname: "test.scone", name: some("Vec2"), funcVar: true, ptrDim: 0, arrDim: 24, ast: (AstNamedType
  ident (AstIdent "Vec2")
  genericImpl (AstGenericList mySeq [
    (AstType
      kwVar false
      ptrDim 0
      child (AstNamedType
        ident (AstIdent "T")
        genericImpl (AstGenericList mySeq [
        ])
      )
    )
  ])
)), kind: tiToResolve, myToResolve: ())
addsym: testificate: 1
debug: 
curr.parent: (ast: (AstDef
  ident (AstIdent "sum")
  genericDecl (AstGenericList mySeq [
    (AstIdent "T")
  ])
  argDeclSeq [
    (AstVarEtcDeclMost
      ident (AstIdent "toSum")
      type (AstType
        kwVar true
        ptrDim 0
        child (AstArray
          dim (AstBinop
            kind binopMul
            left (AstU64Lit u64Val 8)
            right (AstU64Lit u64Val 3)
          )
          elemType (AstType
            kwVar false
            ptrDim 0
            child (AstNamedType
              ident (AstIdent "Vec2")
              genericImpl (AstGenericList mySeq [
                (AstType
                  kwVar false
                  ptrDim 0
                  child (AstNamedType
                    ident (AstIdent "T")
                    genericImpl (AstGenericList mySeq [
                    ])
                  )
                )
              ])
            )
          )
        )
      )
    )
  ]
  returnType (AstType
    kwVar false
    ptrDim 0
    child (AstNamedType
      ident (AstIdent "Vec2")
      genericImpl (AstGenericList mySeq [
        (AstType
          kwVar false
          ptrDim 0
          child (AstNamedType
            ident (AstIdent "T")
            genericImpl (AstGenericList mySeq [
            ])
          )
        )
      ])
    )
  )
  stmtSeq [
    (AstVar
      child (AstVarEtcDeclMost
        ident (AstIdent "result")
        type (AstType
          kwVar false
          ptrDim 0
          child (AstNamedType
            ident (AstIdent "Vec2")
            genericImpl (AstGenericList mySeq [
              (AstType
                kwVar false
                ptrDim 0
                child (AstNamedType
                  ident (AstIdent "T")
                  genericImpl (AstGenericList mySeq [
                  ])
                )
              )
            ])
          )
        )
      )
      optExpr !isSome
    )
    (AstFor
      ident (AstIdent "jdx")
      exprPre (AstU64Lit u64Val 0)
      exprPost (AstBinop
        kind binopMul
        left (AstU64Lit u64Val 8)
        right (AstU64Lit u64Val 3)
      )
      isUntil true
      stmtSeq [
        (AstIf
          expr (AstBinop
            kind binopCmpEq
            left (AstIdent "jdx")
            right (AstU64Lit u64Val 0)
          )
          stmtSeq [
            (AstFor
              ident (AstIdent "idx")
              exprPre (AstU64Lit u64Val 0)
              exprPost (AstU64Lit u64Val 2)
              isUntil true
              stmtSeq [
                (AstAssignEtc
                  kind assignEtcRegular
                  left (AstFuncCall
                    ident (AstIdent "at")
                    genericImpl (AstGenericList mySeq [
                    ])
                    argImplSeq [
                      (AstIdent "result")
                      (AstIdent "idx")
                    ]
                  )
                  right (AstFuncCall
                    ident (AstIdent "at")
                    genericImpl (AstGenericList mySeq [
                    ])
                    argImplSeq [
                      (AstFuncCall
                        ident (AstIdent "toSum")
                        genericImpl (AstGenericList mySeq [
                        ])
                        argImplSeq [
                          (AstU64Lit u64Val 0)
                        ]
                      )
                      (AstIdent "idx")
                    ]
                  )
                )
              ]
            )
          ]
          elifSeq [
          ]
          optElse (AstElse stmtSeq [
            (AstAssignEtc
              kind assignEtcRegular
              left (AstIdent "result")
              right (AstFuncCall
                ident (AstIdent "plus")
                genericImpl (AstGenericList mySeq [
                ])
                argImplSeq [
                  (AstIdent "result")
                  (AstFuncCall
                    ident (AstIdent "toSum")
                    genericImpl (AstGenericList mySeq [
                    ])
                    argImplSeq [
                      (AstIdent "jdx")
                    ]
                  )
                ]
              )
            )
          ])
        )
      ]
    )
    (AstReturn optExpr (AstIdent "result"))
  ]
), sym: ..., tbl: {"T": @[0], "toSum": @[1]}, parent: ..., childSeq: ...)
curr: (ast: (AstIdent "toSum"), sym: ..., tbl: {:}, parent: ..., childSeq: ...) 0
argSym.get(): (inputFname: "test.scone", name: "toSum", kind: symVar, initValAst: none(AstNode), typeInfo: ...)
argSym.get().typeInfo: (main: (inputFname: "test.scone", name: some("Vec2"), funcVar: true, ptrDim: 0, arrDim: 24, ast: (AstNamedType
  ident (AstIdent "Vec2")
  genericImpl (AstGenericList mySeq [
    (AstType
      kwVar false
      ptrDim 0
      child (AstNamedType
        ident (AstIdent "T")
        genericImpl (AstGenericList mySeq [
        ])
      )
    )
  ])
)), kind: tiToResolve, myToResolve: ())
----
gotoParentSymTbl: parent != nil: true
addChildSymTbl: childSeq.len(): 2
addChildSymTbl: post set parent: true 3
addSym: sym: (inputFname: "test.scone", name: "<result>", kind: symVar, initValAst: none(AstNode), typeInfo: ...)
addSym: tinfo: (main: (inputFname: "test.scone", name: some("Vec2"), funcVar: false, ptrDim: 0, arrDim: 0, ast: (AstNamedType
  ident (AstIdent "Vec2")
  genericImpl (AstGenericList mySeq [
    (AstType
      kwVar false
      ptrDim 0
      child (AstNamedType
        ident (AstIdent "T")
        genericImpl (AstGenericList mySeq [
        ])
      )
    )
  ])
)), kind: tiToResolve, myToResolve: ())
addsym: testificate: 2
debug: 
curr.parent: (ast: (AstDef
  ident (AstIdent "sum")
  genericDecl (AstGenericList mySeq [
    (AstIdent "T")
  ])
  argDeclSeq [
    (AstVarEtcDeclMost
      ident (AstIdent "toSum")
      type (AstType
        kwVar true
        ptrDim 0
        child (AstArray
          dim (AstBinop
            kind binopMul
            left (AstU64Lit u64Val 8)
            right (AstU64Lit u64Val 3)
          )
          elemType (AstType
            kwVar false
            ptrDim 0
            child (AstNamedType
              ident (AstIdent "Vec2")
              genericImpl (AstGenericList mySeq [
                (AstType
                  kwVar false
                  ptrDim 0
                  child (AstNamedType
                    ident (AstIdent "T")
                    genericImpl (AstGenericList mySeq [
                    ])
                  )
                )
              ])
            )
          )
        )
      )
    )
  ]
  returnType (AstType
    kwVar false
    ptrDim 0
    child (AstNamedType
      ident (AstIdent "Vec2")
      genericImpl (AstGenericList mySeq [
        (AstType
          kwVar false
          ptrDim 0
          child (AstNamedType
            ident (AstIdent "T")
            genericImpl (AstGenericList mySeq [
            ])
          )
        )
      ])
    )
  )
  stmtSeq [
    (AstVar
      child (AstVarEtcDeclMost
        ident (AstIdent "result")
        type (AstType
          kwVar false
          ptrDim 0
          child (AstNamedType
            ident (AstIdent "Vec2")
            genericImpl (AstGenericList mySeq [
              (AstType
                kwVar false
                ptrDim 0
                child (AstNamedType
                  ident (AstIdent "T")
                  genericImpl (AstGenericList mySeq [
                  ])
                )
              )
            ])
          )
        )
      )
      optExpr !isSome
    )
    (AstFor
      ident (AstIdent "jdx")
      exprPre (AstU64Lit u64Val 0)
      exprPost (AstBinop
        kind binopMul
        left (AstU64Lit u64Val 8)
        right (AstU64Lit u64Val 3)
      )
      isUntil true
      stmtSeq [
        (AstIf
          expr (AstBinop
            kind binopCmpEq
            left (AstIdent "jdx")
            right (AstU64Lit u64Val 0)
          )
          stmtSeq [
            (AstFor
              ident (AstIdent "idx")
              exprPre (AstU64Lit u64Val 0)
              exprPost (AstU64Lit u64Val 2)
              isUntil true
              stmtSeq [
                (AstAssignEtc
                  kind assignEtcRegular
                  left (AstFuncCall
                    ident (AstIdent "at")
                    genericImpl (AstGenericList mySeq [
                    ])
                    argImplSeq [
                      (AstIdent "result")
                      (AstIdent "idx")
                    ]
                  )
                  right (AstFuncCall
                    ident (AstIdent "at")
                    genericImpl (AstGenericList mySeq [
                    ])
                    argImplSeq [
                      (AstFuncCall
                        ident (AstIdent "toSum")
                        genericImpl (AstGenericList mySeq [
                        ])
                        argImplSeq [
                          (AstU64Lit u64Val 0)
                        ]
                      )
                      (AstIdent "idx")
                    ]
                  )
                )
              ]
            )
          ]
          elifSeq [
          ]
          optElse (AstElse stmtSeq [
            (AstAssignEtc
              kind assignEtcRegular
              left (AstIdent "result")
              right (AstFuncCall
                ident (AstIdent "plus")
                genericImpl (AstGenericList mySeq [
                ])
                argImplSeq [
                  (AstIdent "result")
                  (AstFuncCall
                    ident (AstIdent "toSum")
                    genericImpl (AstGenericList mySeq [
                    ])
                    argImplSeq [
                      (AstIdent "jdx")
                    ]
                  )
                ]
              )
            )
          ])
        )
      ]
    )
    (AstReturn optExpr (AstIdent "result"))
  ]
), sym: ..., tbl: {"T": @[0], "toSum": @[1], "<result>": @[2]}, parent: ..., childSeq: ...)
curr: (ast: (AstType
  kwVar false
  ptrDim 0
  child (AstNamedType
    ident (AstIdent "Vec2")
    genericImpl (AstGenericList mySeq [
      (AstType
        kwVar false
        ptrDim 0
        child (AstNamedType
          ident (AstIdent "T")
          genericImpl (AstGenericList mySeq [
          ])
        )
      )
    ])
  )
), sym: ..., tbl: {:}, parent: ..., childSeq: ...) 0
argSym.get(): (inputFname: "test.scone", name: "<result>", kind: symVar, initValAst: none(AstNode), typeInfo: ...)
argSym.get().typeInfo: (main: (inputFname: "test.scone", name: some("Vec2"), funcVar: false, ptrDim: 0, arrDim: 0, ast: (AstNamedType
  ident (AstIdent "Vec2")
  genericImpl (AstGenericList mySeq [
    (AstType
      kwVar false
      ptrDim 0
      child (AstNamedType
        ident (AstIdent "T")
        genericImpl (AstGenericList mySeq [
        ])
      )
    )
  ])
)), kind: tiToResolve, myToResolve: ())
----
gotoParentSymTbl: parent != nil: true
debug: 
curr.parent: (ast: (AstSrcFile
  module (AstModule ident (AstIdent "myModule"))
  funcDeclSeq [
    (AstDef
      ident (AstIdent "dot")
      genericDecl (AstGenericList mySeq [
        (AstIdent "T")
      ])
      argDeclSeq [
        (AstVarEtcDeclMost
          ident (AstIdent "a")
          type (AstType
            kwVar true
            ptrDim 0
            child (AstNamedType
              ident (AstIdent "Vec2")
              genericImpl (AstGenericList mySeq [
                (AstType
                  kwVar false
                  ptrDim 0
                  child (AstNamedType
                    ident (AstIdent "T")
                    genericImpl (AstGenericList mySeq [
                    ])
                  )
                )
              ])
            )
          )
        )
        (AstVarEtcDeclMost
          ident (AstIdent "b")
          type (AstType
            kwVar true
            ptrDim 0
            child (AstNamedType
              ident (AstIdent "Vec2")
              genericImpl (AstGenericList mySeq [
                (AstType
                  kwVar false
                  ptrDim 0
                  child (AstNamedType
                    ident (AstIdent "T")
                    genericImpl (AstGenericList mySeq [
                    ])
                  )
                )
              ])
            )
          )
        )
      ]
      returnType (AstType
        kwVar false
        ptrDim 0
        child (AstNamedType
          ident (AstIdent "T")
          genericImpl (AstGenericList mySeq [
          ])
        )
      )
      stmtSeq [
        (AstConst
          child (AstVarEtcDeclMost
            ident (AstIdent "result")
            type (AstType
              kwVar false
              ptrDim 0
              child (AstNamedType
                ident (AstIdent "T")
                genericImpl (AstGenericList mySeq [
                ])
              )
            )
          )
          expr (AstBinop
            kind binopPlus
            left (AstBinop
              kind binopMul
              left (AstDot
                left (AstIdent "a")
                right (AstIdent "x")
              )
              right (AstDot
                left (AstIdent "b")
                right (AstIdent "x")
              )
            )
            right (AstBinop
              kind binopMul
              left (AstDot
                left (AstIdent "a")
                right (AstIdent "y")
              )
              right (AstDot
                left (AstIdent "b")
                right (AstIdent "y")
              )
            )
          )
        )
        (AstReturn optExpr (AstIdent "result"))
      ]
    )
    (AstDef
      ident (AstIdent "plus")
      genericDecl (AstGenericList mySeq [
        (AstIdent "T")
      ])
      argDeclSeq [
        (AstVarEtcDeclMost
          ident (AstIdent "a")
          type (AstType
            kwVar true
            ptrDim 0
            child (AstNamedType
              ident (AstIdent "T")
              genericImpl (AstGenericList mySeq [
              ])
            )
          )
        )
        (AstVarEtcDeclMost
          ident (AstIdent "b")
          type (AstType
            kwVar true
            ptrDim 0
            child (AstNamedType
              ident (AstIdent "T")
              genericImpl (AstGenericList mySeq [
              ])
            )
          )
        )
      ]
      returnType (AstType
        kwVar false
        ptrDim 0
        child (AstNamedType
          ident (AstIdent "T")
          genericImpl (AstGenericList mySeq [
          ])
        )
      )
      stmtSeq [
        (AstReturn optExpr (AstBinop
          kind binopPlus
          left (AstIdent "a")
          right (AstIdent "b")
        ))
      ]
    )
    (AstDef
      ident (AstIdent "plus")
      genericDecl (AstGenericList mySeq [
        (AstIdent "T")
      ])
      argDeclSeq [
        (AstVarEtcDeclMost
          ident (AstIdent "a")
          type (AstType
            kwVar true
            ptrDim 0
            child (AstNamedType
              ident (AstIdent "Vec2")
              genericImpl (AstGenericList mySeq [
                (AstType
                  kwVar false
                  ptrDim 0
                  child (AstNamedType
                    ident (AstIdent "T")
                    genericImpl (AstGenericList mySeq [
                    ])
                  )
                )
              ])
            )
          )
        )
        (AstVarEtcDeclMost
          ident (AstIdent "b")
          type (AstType
            kwVar true
            ptrDim 0
            child (AstNamedType
              ident (AstIdent "Vec2")
              genericImpl (AstGenericList mySeq [
                (AstType
                  kwVar false
                  ptrDim 0
                  child (AstNamedType
                    ident (AstIdent "T")
                    genericImpl (AstGenericList mySeq [
                    ])
                  )
                )
              ])
            )
          )
        )
      ]
      returnType (AstType
        kwVar false
        ptrDim 0
        child (AstNamedType
          ident (AstIdent "Vec2")
          genericImpl (AstGenericList mySeq [
            (AstType
              kwVar false
              ptrDim 0
              child (AstNamedType
                ident (AstIdent "T")
                genericImpl (AstGenericList mySeq [
                ])
              )
            )
          ])
        )
      )
      stmtSeq [
        (AstVar
          child (AstVarEtcDeclMost
            ident (AstIdent "result")
            type (AstType
              kwVar false
              ptrDim 0
              child (AstNamedType
                ident (AstIdent "Vec2")
                genericImpl (AstGenericList mySeq [
                  (AstType
                    kwVar false
                    ptrDim 0
                    child (AstNamedType
                      ident (AstIdent "T")
                      genericImpl (AstGenericList mySeq [
                      ])
                    )
                  )
                ])
              )
            )
          )
          optExpr !isSome
        )
        (AstFor
          ident (AstIdent "idx")
          exprPre (AstU64Lit u64Val 0)
          exprPost (AstU64Lit u64Val 2)
          isUntil true
          stmtSeq [
            (AstAssignEtc
              kind assignEtcRegular
              left (AstFuncCall
                ident (AstIdent "at")
                genericImpl (AstGenericList mySeq [
                ])
                argImplSeq [
                  (AstIdent "result")
                  (AstIdent "idx")
                ]
              )
              right (AstBinop
                kind binopPlus
                left (AstFuncCall
                  ident (AstIdent "at")
                  genericImpl (AstGenericList mySeq [
                  ])
                  argImplSeq [
                    (AstIdent "a")
                    (AstIdent "idx")
                  ]
                )
                right (AstFuncCall
                  ident (AstIdent "at")
                  genericImpl (AstGenericList mySeq [
                  ])
                  argImplSeq [
                    (AstIdent "b")
                    (AstIdent "idx")
                  ]
                )
              )
            )
          ]
        )
        (AstReturn optExpr (AstIdent "result"))
      ]
    )
    (AstDef
      ident (AstIdent "times")
      genericDecl (AstGenericList mySeq [
        (AstIdent "T")
      ])
      argDeclSeq [
        (AstVarEtcDeclMost
          ident (AstIdent "a")
          type (AstType
            kwVar false
            ptrDim 0
            child (AstNamedType
              ident (AstIdent "T")
              genericImpl (AstGenericList mySeq [
              ])
            )
          )
        )
        (AstVarEtcDeclMost
          ident (AstIdent "b")
          type (AstType
            kwVar false
            ptrDim 0
            child (AstNamedType
              ident (AstIdent "T")
              genericImpl (AstGenericList mySeq [
              ])
            )
          )
        )
      ]
      returnType (AstType
        kwVar false
        ptrDim 0
        child (AstNamedType
          ident (AstIdent "T")
          genericImpl (AstGenericList mySeq [
          ])
        )
      )
      stmtSeq [
        (AstReturn optExpr (AstBinop
          kind binopMul
          left (AstIdent "a")
          right (AstIdent "b")
        ))
      ]
    )
    (AstDef
      ident (AstIdent "times")
      genericDecl (AstGenericList mySeq [
        (AstIdent "T")
      ])
      argDeclSeq [
        (AstVarEtcDeclMost
          ident (AstIdent "a")
          type (AstType
            kwVar false
            ptrDim 0
            child (AstNamedType
              ident (AstIdent "Vec2")
              genericImpl (AstGenericList mySeq [
                (AstType
                  kwVar false
                  ptrDim 0
                  child (AstNamedType
                    ident (AstIdent "T")
                    genericImpl (AstGenericList mySeq [
                    ])
                  )
                )
              ])
            )
          )
        )
        (AstVarEtcDeclMost
          ident (AstIdent "scale")
          type (AstType
            kwVar false
            ptrDim 0
            child (AstNamedType
              ident (AstIdent "T")
              genericImpl (AstGenericList mySeq [
              ])
            )
          )
        )
      ]
      returnType (AstType
        kwVar false
        ptrDim 0
        child (AstNamedType
          ident (AstIdent "Vec2")
          genericImpl (AstGenericList mySeq [
            (AstType
              kwVar false
              ptrDim 0
              child (AstNamedType
                ident (AstIdent "T")
                genericImpl (AstGenericList mySeq [
                ])
              )
            )
          ])
        )
      )
      stmtSeq [
        (AstVar
          child (AstVarEtcDeclMost
            ident (AstIdent "result")
            type (AstType
              kwVar false
              ptrDim 0
              child (AstNamedType
                ident (AstIdent "Vec2")
                genericImpl (AstGenericList mySeq [
                  (AstType
                    kwVar false
                    ptrDim 0
                    child (AstNamedType
                      ident (AstIdent "T")
                      genericImpl (AstGenericList mySeq [
                      ])
                    )
                  )
                ])
              )
            )
          )
          optExpr !isSome
        )
        (AstFor
          ident (AstIdent "idx")
          exprPre (AstU64Lit u64Val 0)
          exprPost (AstU64Lit u64Val 2)
          isUntil true
          stmtSeq [
            (AstAssignEtc
              kind assignEtcRegular
              left (AstFuncCall
                ident (AstIdent "at")
                genericImpl (AstGenericList mySeq [
                ])
                argImplSeq [
                  (AstIdent "result")
                  (AstIdent "idx")
                ]
              )
              right (AstFuncCall
                ident (AstIdent "times")
                genericImpl (AstGenericList mySeq [
                ])
                argImplSeq [
                  (AstFuncCall
                    ident (AstIdent "at")
                    genericImpl (AstGenericList mySeq [
                    ])
                    argImplSeq [
                      (AstIdent "a")
                      (AstIdent "idx")
                    ]
                  )
                  (AstIdent "scale")
                ]
              )
            )
          ]
        )
        (AstReturn optExpr (AstIdent "result"))
      ]
    )
    (AstDef
      ident (AstIdent "at")
      genericDecl (AstGenericList mySeq [
        (AstIdent "T")
      ])
      argDeclSeq [
        (AstVarEtcDeclMost
          ident (AstIdent "self")
          type (AstType
            kwVar true
            ptrDim 0
            child (AstNamedType
              ident (AstIdent "Vec2")
              genericImpl (AstGenericList mySeq [
                (AstType
                  kwVar false
                  ptrDim 0
                  child (AstNamedType
                    ident (AstIdent "T")
                    genericImpl (AstGenericList mySeq [
                    ])
                  )
                )
              ])
            )
          )
        )
        (AstVarEtcDeclMost
          ident (AstIdent "idx")
          type (AstType
            kwVar false
            ptrDim 0
            child (AstBasicType kind basicTypeU32)
          )
        )
      ]
      returnType (AstType
        kwVar true
        ptrDim 0
        child (AstNamedType
          ident (AstIdent "T")
          genericImpl (AstGenericList mySeq [
          ])
        )
      )
      stmtSeq [
        (AstIf
          expr (AstBinop
            kind binopCmpEq
            left (AstIdent "idx")
            right (AstU64Lit u64Val 0)
          )
          stmtSeq [
            (AstReturn optExpr (AstDot
              left (AstIdent "self")
              right (AstIdent "x")
            ))
          ]
          elifSeq [
          ]
          optElse (AstElse stmtSeq [
            (AstReturn optExpr (AstDot
              left (AstIdent "self")
              right (AstIdent "y")
            ))
          ])
        )
      ]
    )
    (AstDef
      ident (AstIdent "sum")
      genericDecl (AstGenericList mySeq [
        (AstIdent "T")
      ])
      argDeclSeq [
        (AstVarEtcDeclMost
          ident (AstIdent "toSum")
          type (AstType
            kwVar true
            ptrDim 0
            child (AstArray
              dim (AstBinop
                kind binopMul
                left (AstU64Lit u64Val 8)
                right (AstU64Lit u64Val 3)
              )
              elemType (AstType
                kwVar false
                ptrDim 0
                child (AstNamedType
                  ident (AstIdent "Vec2")
                  genericImpl (AstGenericList mySeq [
                    (AstType
                      kwVar false
                      ptrDim 0
                      child (AstNamedType
                        ident (AstIdent "T")
                        genericImpl (AstGenericList mySeq [
                        ])
                      )
                    )
                  ])
                )
              )
            )
          )
        )
      ]
      returnType (AstType
        kwVar false
        ptrDim 0
        child (AstNamedType
          ident (AstIdent "Vec2")
          genericImpl (AstGenericList mySeq [
            (AstType
              kwVar false
              ptrDim 0
              child (AstNamedType
                ident (AstIdent "T")
                genericImpl (AstGenericList mySeq [
                ])
              )
            )
          ])
        )
      )
      stmtSeq [
        (AstVar
          child (AstVarEtcDeclMost
            ident (AstIdent "result")
            type (AstType
              kwVar false
              ptrDim 0
              child (AstNamedType
                ident (AstIdent "Vec2")
                genericImpl (AstGenericList mySeq [
                  (AstType
                    kwVar false
                    ptrDim 0
                    child (AstNamedType
                      ident (AstIdent "T")
                      genericImpl (AstGenericList mySeq [
                      ])
                    )
                  )
                ])
              )
            )
          )
          optExpr !isSome
        )
        (AstFor
          ident (AstIdent "jdx")
          exprPre (AstU64Lit u64Val 0)
          exprPost (AstBinop
            kind binopMul
            left (AstU64Lit u64Val 8)
            right (AstU64Lit u64Val 3)
          )
          isUntil true
          stmtSeq [
            (AstIf
              expr (AstBinop
                kind binopCmpEq
                left (AstIdent "jdx")
                right (AstU64Lit u64Val 0)
              )
              stmtSeq [
                (AstFor
                  ident (AstIdent "idx")
                  exprPre (AstU64Lit u64Val 0)
                  exprPost (AstU64Lit u64Val 2)
                  isUntil true
                  stmtSeq [
                    (AstAssignEtc
                      kind assignEtcRegular
                      left (AstFuncCall
                        ident (AstIdent "at")
                        genericImpl (AstGenericList mySeq [
                        ])
                        argImplSeq [
                          (AstIdent "result")
                          (AstIdent "idx")
                        ]
                      )
                      right (AstFuncCall
                        ident (AstIdent "at")
                        genericImpl (AstGenericList mySeq [
                        ])
                        argImplSeq [
                          (AstFuncCall
                            ident (AstIdent "toSum")
                            genericImpl (AstGenericList mySeq [
                            ])
                            argImplSeq [
                              (AstU64Lit u64Val 0)
                            ]
                          )
                          (AstIdent "idx")
                        ]
                      )
                    )
                  ]
                )
              ]
              elifSeq [
              ]
              optElse (AstElse stmtSeq [
                (AstAssignEtc
                  kind assignEtcRegular
                  left (AstIdent "result")
                  right (AstFuncCall
                    ident (AstIdent "plus")
                    genericImpl (AstGenericList mySeq [
                    ])
                    argImplSeq [
                      (AstIdent "result")
                      (AstFuncCall
                        ident (AstIdent "toSum")
                        genericImpl (AstGenericList mySeq [
                        ])
                        argImplSeq [
                          (AstIdent "jdx")
                        ]
                      )
                    ]
                  )
                )
              ])
            )
          ]
        )
        (AstReturn optExpr (AstIdent "result"))
      ]
    )
  ]
  structDeclSeq [
    (AstStruct
      ident (AstIdent "Vec2")
      genericDecl (AstGenericList mySeq [
        (AstIdent "T")
      ])
      fieldSeq [
        (AstVarEtcDeclMost
          ident (AstIdent "x")
          type (AstType
            kwVar false
            ptrDim 0
            child (AstNamedType
              ident (AstIdent "T")
              genericImpl (AstGenericList mySeq [
              ])
            )
          )
        )
        (AstVarEtcDeclMost
          ident (AstIdent "y")
          type (AstType
            kwVar false
            ptrDim 0
            child (AstNamedType
              ident (AstIdent "T")
              genericImpl (AstGenericList mySeq [
              ])
            )
          )
        )
      ]
    )
    (AstStruct
      ident (AstIdent "Vec2Ptr")
      genericDecl (AstGenericList mySeq [
        (AstIdent "T")
      ])
      fieldSeq [
        (AstVarEtcDeclMost
          ident (AstIdent "x")
          type (AstType
            kwVar false
            ptrDim 1
            child (AstNamedType
              ident (AstIdent "T")
              genericImpl (AstGenericList mySeq [
              ])
            )
          )
        )
        (AstVarEtcDeclMost
          ident (AstIdent "y")
          type (AstType
            kwVar false
            ptrDim 1
            child (AstNamedType
              ident (AstIdent "T")
              genericImpl (AstGenericList mySeq [
              ])
            )
          )
        )
      ]
    )
    (AstStruct
      ident (AstIdent "Vec3Arr3Vec2")
      genericDecl (AstGenericList mySeq [
        (AstIdent "T")
      ])
      fieldSeq [
        (AstVarEtcDeclMost
          ident (AstIdent "x")
          type (AstType
            kwVar false
            ptrDim 0
            child (AstArray
              dim (AstU64Lit u64Val 3)
              elemType (AstType
                kwVar false
                ptrDim 0
                child (AstNamedType
                  ident (AstIdent "Vec2")
                  genericImpl (AstGenericList mySeq [
                    (AstType
                      kwVar false
                      ptrDim 0
                      child (AstNamedType
                        ident (AstIdent "T")
                        genericImpl (AstGenericList mySeq [
                        ])
                      )
                    )
                  ])
                )
              )
            )
          )
        )
        (AstVarEtcDeclMost
          ident (AstIdent "y")
          type (AstType
            kwVar false
            ptrDim 0
            child (AstArray
              dim (AstU64Lit u64Val 3)
              elemType (AstType
                kwVar false
                ptrDim 0
                child (AstNamedType
                  ident (AstIdent "Vec2")
                  genericImpl (AstGenericList mySeq [
                    (AstType
                      kwVar false
                      ptrDim 0
                      child (AstNamedType
                        ident (AstIdent "T")
                        genericImpl (AstGenericList mySeq [
                        ])
                      )
                    )
                  ])
                )
              )
            )
          )
        )
        (AstVarEtcDeclMost
          ident (AstIdent "z")
          type (AstType
            kwVar false
            ptrDim 0
            child (AstArray
              dim (AstU64Lit u64Val 3)
              elemType (AstType
                kwVar false
                ptrDim 0
                child (AstNamedType
                  ident (AstIdent "Vec2")
                  genericImpl (AstGenericList mySeq [
                    (AstType
                      kwVar false
                      ptrDim 0
                      child (AstNamedType
                        ident (AstIdent "T")
                        genericImpl (AstGenericList mySeq [
                        ])
                      )
                    )
                  ])
                )
              )
            )
          )
        )
      ]
    )
  ]
), sym: ..., tbl: {"Vec2": @[0], "Vec2Ptr": @[1], "Vec3Arr3Vec2": @[2], "dot": @[3], "plus": @[4, 5], "times": @[6, 7], "at": @[8], "sum": @[9]}, parent: ..., childSeq: ...)
curr: (ast: (AstDef
  ident (AstIdent "sum")
  genericDecl (AstGenericList mySeq [
    (AstIdent "T")
  ])
  argDeclSeq [
    (AstVarEtcDeclMost
      ident (AstIdent "toSum")
      type (AstType
        kwVar true
        ptrDim 0
        child (AstArray
          dim (AstBinop
            kind binopMul
            left (AstU64Lit u64Val 8)
            right (AstU64Lit u64Val 3)
          )
          elemType (AstType
            kwVar false
            ptrDim 0
            child (AstNamedType
              ident (AstIdent "Vec2")
              genericImpl (AstGenericList mySeq [
                (AstType
                  kwVar false
                  ptrDim 0
                  child (AstNamedType
                    ident (AstIdent "T")
                    genericImpl (AstGenericList mySeq [
                    ])
                  )
                )
              ])
            )
          )
        )
      )
    )
  ]
  returnType (AstType
    kwVar false
    ptrDim 0
    child (AstNamedType
      ident (AstIdent "Vec2")
      genericImpl (AstGenericList mySeq [
        (AstType
          kwVar false
          ptrDim 0
          child (AstNamedType
            ident (AstIdent "T")
            genericImpl (AstGenericList mySeq [
            ])
          )
        )
      ])
    )
  )
  stmtSeq [
    (AstVar
      child (AstVarEtcDeclMost
        ident (AstIdent "result")
        type (AstType
          kwVar false
          ptrDim 0
          child (AstNamedType
            ident (AstIdent "Vec2")
            genericImpl (AstGenericList mySeq [
              (AstType
                kwVar false
                ptrDim 0
                child (AstNamedType
                  ident (AstIdent "T")
                  genericImpl (AstGenericList mySeq [
                  ])
                )
              )
            ])
          )
        )
      )
      optExpr !isSome
    )
    (AstFor
      ident (AstIdent "jdx")
      exprPre (AstU64Lit u64Val 0)
      exprPost (AstBinop
        kind binopMul
        left (AstU64Lit u64Val 8)
        right (AstU64Lit u64Val 3)
      )
      isUntil true
      stmtSeq [
        (AstIf
          expr (AstBinop
            kind binopCmpEq
            left (AstIdent "jdx")
            right (AstU64Lit u64Val 0)
          )
          stmtSeq [
            (AstFor
              ident (AstIdent "idx")
              exprPre (AstU64Lit u64Val 0)
              exprPost (AstU64Lit u64Val 2)
              isUntil true
              stmtSeq [
                (AstAssignEtc
                  kind assignEtcRegular
                  left (AstFuncCall
                    ident (AstIdent "at")
                    genericImpl (AstGenericList mySeq [
                    ])
                    argImplSeq [
                      (AstIdent "result")
                      (AstIdent "idx")
                    ]
                  )
                  right (AstFuncCall
                    ident (AstIdent "at")
                    genericImpl (AstGenericList mySeq [
                    ])
                    argImplSeq [
                      (AstFuncCall
                        ident (AstIdent "toSum")
                        genericImpl (AstGenericList mySeq [
                        ])
                        argImplSeq [
                          (AstU64Lit u64Val 0)
                        ]
                      )
                      (AstIdent "idx")
                    ]
                  )
                )
              ]
            )
          ]
          elifSeq [
          ]
          optElse (AstElse stmtSeq [
            (AstAssignEtc
              kind assignEtcRegular
              left (AstIdent "result")
              right (AstFuncCall
                ident (AstIdent "plus")
                genericImpl (AstGenericList mySeq [
                ])
                argImplSeq [
                  (AstIdent "result")
                  (AstFuncCall
                    ident (AstIdent "toSum")
                    genericImpl (AstGenericList mySeq [
                    ])
                    argImplSeq [
                      (AstIdent "jdx")
                    ]
                  )
                ]
              )
            )
          ])
        )
      ]
    )
    (AstReturn optExpr (AstIdent "result"))
  ]
), sym: ..., tbl: {"T": @[0], "toSum": @[1], "<result>": @[2]}, parent: ..., childSeq: ...) 3
argSym.get(): (inputFname: "test.scone", name: "sum", kind: symFuncDecl, initValAst: none(AstNode), typeInfo: ...)
argSym.get().typeInfo: (main: (inputFname: "test.scone", name: none(string), funcVar: false, ptrDim: 0, arrDim: 0, ast: nil), kind: tiFunc, myFunc: (genericIdxSeq: @[], argIdxSeq: @[1], returnTypeIdx: 2))
----
gotoParentSymTbl: parent != nil: true
gotoParentSymTbl: parent != nil: true
nextSymTblPass(): 
----
----
    symbol: (inputFname: "test.scone", name: "Vec2", kind: symStructDecl, initValAst: none(AstNode), typeInfo: ...)
    typeInfo: (main: (inputFname: "test.scone", name: some("Vec2"), funcVar: false, ptrDim: 0, arrDim: 0, ast: nil), kind: tiStruct, myStruct: (genericIdxSeq: @[], fieldIdxSeq: @[]))

      symbol: (inputFname: "test.scone", name: "T", kind: symGenericDecl, initValAst: none(AstNode), typeInfo: ...)
      typeInfo: (main: (inputFname: "test.scone", name: none(string), funcVar: false, ptrDim: 0, arrDim: 0, ast: nil), kind: tiToResolve, myToResolve: ())

----
--------

      symbol: (inputFname: "test.scone", name: "x", kind: symVar, initValAst: none(AstNode), typeInfo: ...)
      typeInfo: (main: (inputFname: "test.scone", name: some("T"), funcVar: false, ptrDim: 0, arrDim: 0, ast: (AstNamedType
  ident (AstIdent "T")
  genericImpl (AstGenericList mySeq [
  ])
)), kind: tiToResolve, myToResolve: ())

----
--------

      symbol: (inputFname: "test.scone", name: "y", kind: symVar, initValAst: none(AstNode), typeInfo: ...)
      typeInfo: (main: (inputFname: "test.scone", name: some("T"), funcVar: false, ptrDim: 0, arrDim: 0, ast: (AstNamedType
  ident (AstIdent "T")
  genericImpl (AstGenericList mySeq [
  ])
)), kind: tiToResolve, myToResolve: ())

----
--------

----
--------

    symbol: (inputFname: "test.scone", name: "Vec2Ptr", kind: symStructDecl, initValAst: none(AstNode), typeInfo: ...)
    typeInfo: (main: (inputFname: "test.scone", name: some("Vec2Ptr"), funcVar: false, ptrDim: 0, arrDim: 0, ast: nil), kind: tiStruct, myStruct: (genericIdxSeq: @[], fieldIdxSeq: @[]))

      symbol: (inputFname: "test.scone", name: "T", kind: symGenericDecl, initValAst: none(AstNode), typeInfo: ...)
      typeInfo: (main: (inputFname: "test.scone", name: none(string), funcVar: false, ptrDim: 0, arrDim: 0, ast: nil), kind: tiToResolve, myToResolve: ())

----
--------

      symbol: (inputFname: "test.scone", name: "x", kind: symVar, initValAst: none(AstNode), typeInfo: ...)
      typeInfo: (main: (inputFname: "test.scone", name: some("T"), funcVar: false, ptrDim: 1, arrDim: 0, ast: (AstNamedType
  ident (AstIdent "T")
  genericImpl (AstGenericList mySeq [
  ])
)), kind: tiToResolve, myToResolve: ())

----
--------

      symbol: (inputFname: "test.scone", name: "y", kind: symVar, initValAst: none(AstNode), typeInfo: ...)
      typeInfo: (main: (inputFname: "test.scone", name: some("T"), funcVar: false, ptrDim: 1, arrDim: 0, ast: (AstNamedType
  ident (AstIdent "T")
  genericImpl (AstGenericList mySeq [
  ])
)), kind: tiToResolve, myToResolve: ())

----
--------

----
--------

    symbol: (inputFname: "test.scone", name: "Vec3Arr3Vec2", kind: symStructDecl, initValAst: none(AstNode), typeInfo: ...)
    typeInfo: (main: (inputFname: "test.scone", name: some("Vec3Arr3Vec2"), funcVar: false, ptrDim: 0, arrDim: 0, ast: nil), kind: tiStruct, myStruct: (genericIdxSeq: @[], fieldIdxSeq: @[]))

      symbol: (inputFname: "test.scone", name: "T", kind: symGenericDecl, initValAst: none(AstNode), typeInfo: ...)
      typeInfo: (main: (inputFname: "test.scone", name: none(string), funcVar: false, ptrDim: 0, arrDim: 0, ast: nil), kind: tiToResolve, myToResolve: ())

----
--------

      symbol: (inputFname: "test.scone", name: "x", kind: symVar, initValAst: none(AstNode), typeInfo: ...)
      typeInfo: (main: (inputFname: "test.scone", name: some("Vec2"), funcVar: false, ptrDim: 0, arrDim: 3, ast: (AstNamedType
  ident (AstIdent "Vec2")
  genericImpl (AstGenericList mySeq [
    (AstType
      kwVar false
      ptrDim 0
      child (AstNamedType
        ident (AstIdent "T")
        genericImpl (AstGenericList mySeq [
        ])
      )
    )
  ])
)), kind: tiToResolve, myToResolve: ())

----
--------

      symbol: (inputFname: "test.scone", name: "y", kind: symVar, initValAst: none(AstNode), typeInfo: ...)
      typeInfo: (main: (inputFname: "test.scone", name: some("Vec2"), funcVar: false, ptrDim: 0, arrDim: 3, ast: (AstNamedType
  ident (AstIdent "Vec2")
  genericImpl (AstGenericList mySeq [
    (AstType
      kwVar false
      ptrDim 0
      child (AstNamedType
        ident (AstIdent "T")
        genericImpl (AstGenericList mySeq [
        ])
      )
    )
  ])
)), kind: tiToResolve, myToResolve: ())

----
--------

      symbol: (inputFname: "test.scone", name: "z", kind: symVar, initValAst: none(AstNode), typeInfo: ...)
      typeInfo: (main: (inputFname: "test.scone", name: some("Vec2"), funcVar: false, ptrDim: 0, arrDim: 3, ast: (AstNamedType
  ident (AstIdent "Vec2")
  genericImpl (AstGenericList mySeq [
    (AstType
      kwVar false
      ptrDim 0
      child (AstNamedType
        ident (AstIdent "T")
        genericImpl (AstGenericList mySeq [
        ])
      )
    )
  ])
)), kind: tiToResolve, myToResolve: ())

----
--------

----
--------

    symbol: (inputFname: "test.scone", name: "dot", kind: symFuncDecl, initValAst: none(AstNode), typeInfo: ...)
    typeInfo: (main: (inputFname: "test.scone", name: none(string), funcVar: false, ptrDim: 0, arrDim: 0, ast: nil), kind: tiFunc, myFunc: (genericIdxSeq: @[], argIdxSeq: @[1, 2], returnTypeIdx: 3))

      symbol: (inputFname: "test.scone", name: "T", kind: symGenericDecl, initValAst: none(AstNode), typeInfo: ...)
      typeInfo: (main: (inputFname: "test.scone", name: none(string), funcVar: false, ptrDim: 0, arrDim: 0, ast: nil), kind: tiToResolve, myToResolve: ())

----
--------

      symbol: (inputFname: "test.scone", name: "a", kind: symVar, initValAst: none(AstNode), typeInfo: ...)
      typeInfo: (main: (inputFname: "test.scone", name: some("Vec2"), funcVar: true, ptrDim: 0, arrDim: 0, ast: (AstNamedType
  ident (AstIdent "Vec2")
  genericImpl (AstGenericList mySeq [
    (AstType
      kwVar false
      ptrDim 0
      child (AstNamedType
        ident (AstIdent "T")
        genericImpl (AstGenericList mySeq [
        ])
      )
    )
  ])
)), kind: tiToResolve, myToResolve: ())

----
--------

      symbol: (inputFname: "test.scone", name: "b", kind: symVar, initValAst: none(AstNode), typeInfo: ...)
      typeInfo: (main: (inputFname: "test.scone", name: some("Vec2"), funcVar: true, ptrDim: 0, arrDim: 0, ast: (AstNamedType
  ident (AstIdent "Vec2")
  genericImpl (AstGenericList mySeq [
    (AstType
      kwVar false
      ptrDim 0
      child (AstNamedType
        ident (AstIdent "T")
        genericImpl (AstGenericList mySeq [
        ])
      )
    )
  ])
)), kind: tiToResolve, myToResolve: ())

----
--------

      symbol: (inputFname: "test.scone", name: "<result>", kind: symVar, initValAst: none(AstNode), typeInfo: ...)
      typeInfo: (main: (inputFname: "test.scone", name: some("T"), funcVar: false, ptrDim: 0, arrDim: 0, ast: (AstNamedType
  ident (AstIdent "T")
  genericImpl (AstGenericList mySeq [
  ])
)), kind: tiToResolve, myToResolve: ())

----
--------

----
--------

    symbol: (inputFname: "test.scone", name: "plus", kind: symFuncDecl, initValAst: none(AstNode), typeInfo: ...)
    typeInfo: (main: (inputFname: "test.scone", name: none(string), funcVar: false, ptrDim: 0, arrDim: 0, ast: nil), kind: tiFunc, myFunc: (genericIdxSeq: @[], argIdxSeq: @[1, 2], returnTypeIdx: 3))

      symbol: (inputFname: "test.scone", name: "T", kind: symGenericDecl, initValAst: none(AstNode), typeInfo: ...)
      typeInfo: (main: (inputFname: "test.scone", name: none(string), funcVar: false, ptrDim: 0, arrDim: 0, ast: nil), kind: tiToResolve, myToResolve: ())

----
--------

      symbol: (inputFname: "test.scone", name: "a", kind: symVar, initValAst: none(AstNode), typeInfo: ...)
      typeInfo: (main: (inputFname: "test.scone", name: some("T"), funcVar: true, ptrDim: 0, arrDim: 0, ast: (AstNamedType
  ident (AstIdent "T")
  genericImpl (AstGenericList mySeq [
  ])
)), kind: tiToResolve, myToResolve: ())

----
--------

      symbol: (inputFname: "test.scone", name: "b", kind: symVar, initValAst: none(AstNode), typeInfo: ...)
      typeInfo: (main: (inputFname: "test.scone", name: some("T"), funcVar: true, ptrDim: 0, arrDim: 0, ast: (AstNamedType
  ident (AstIdent "T")
  genericImpl (AstGenericList mySeq [
  ])
)), kind: tiToResolve, myToResolve: ())

----
--------

      symbol: (inputFname: "test.scone", name: "<result>", kind: symVar, initValAst: none(AstNode), typeInfo: ...)
      typeInfo: (main: (inputFname: "test.scone", name: some("T"), funcVar: false, ptrDim: 0, arrDim: 0, ast: (AstNamedType
  ident (AstIdent "T")
  genericImpl (AstGenericList mySeq [
  ])
)), kind: tiToResolve, myToResolve: ())

----
--------

----
--------

    symbol: (inputFname: "test.scone", name: "plus", kind: symFuncDecl, initValAst: none(AstNode), typeInfo: ...)
    typeInfo: (main: (inputFname: "test.scone", name: none(string), funcVar: false, ptrDim: 0, arrDim: 0, ast: nil), kind: tiFunc, myFunc: (genericIdxSeq: @[], argIdxSeq: @[1, 2], returnTypeIdx: 3))

      symbol: (inputFname: "test.scone", name: "T", kind: symGenericDecl, initValAst: none(AstNode), typeInfo: ...)
      typeInfo: (main: (inputFname: "test.scone", name: none(string), funcVar: false, ptrDim: 0, arrDim: 0, ast: nil), kind: tiToResolve, myToResolve: ())

----
--------

      symbol: (inputFname: "test.scone", name: "a", kind: symVar, initValAst: none(AstNode), typeInfo: ...)
      typeInfo: (main: (inputFname: "test.scone", name: some("Vec2"), funcVar: true, ptrDim: 0, arrDim: 0, ast: (AstNamedType
  ident (AstIdent "Vec2")
  genericImpl (AstGenericList mySeq [
    (AstType
      kwVar false
      ptrDim 0
      child (AstNamedType
        ident (AstIdent "T")
        genericImpl (AstGenericList mySeq [
        ])
      )
    )
  ])
)), kind: tiToResolve, myToResolve: ())

----
--------

      symbol: (inputFname: "test.scone", name: "b", kind: symVar, initValAst: none(AstNode), typeInfo: ...)
      typeInfo: (main: (inputFname: "test.scone", name: some("Vec2"), funcVar: true, ptrDim: 0, arrDim: 0, ast: (AstNamedType
  ident (AstIdent "Vec2")
  genericImpl (AstGenericList mySeq [
    (AstType
      kwVar false
      ptrDim 0
      child (AstNamedType
        ident (AstIdent "T")
        genericImpl (AstGenericList mySeq [
        ])
      )
    )
  ])
)), kind: tiToResolve, myToResolve: ())

----
--------

      symbol: (inputFname: "test.scone", name: "<result>", kind: symVar, initValAst: none(AstNode), typeInfo: ...)
      typeInfo: (main: (inputFname: "test.scone", name: some("Vec2"), funcVar: false, ptrDim: 0, arrDim: 0, ast: (AstNamedType
  ident (AstIdent "Vec2")
  genericImpl (AstGenericList mySeq [
    (AstType
      kwVar false
      ptrDim 0
      child (AstNamedType
        ident (AstIdent "T")
        genericImpl (AstGenericList mySeq [
        ])
      )
    )
  ])
)), kind: tiToResolve, myToResolve: ())

----
--------

----
--------

    symbol: (inputFname: "test.scone", name: "times", kind: symFuncDecl, initValAst: none(AstNode), typeInfo: ...)
    typeInfo: (main: (inputFname: "test.scone", name: none(string), funcVar: false, ptrDim: 0, arrDim: 0, ast: nil), kind: tiFunc, myFunc: (genericIdxSeq: @[], argIdxSeq: @[1, 2], returnTypeIdx: 3))

      symbol: (inputFname: "test.scone", name: "T", kind: symGenericDecl, initValAst: none(AstNode), typeInfo: ...)
      typeInfo: (main: (inputFname: "test.scone", name: none(string), funcVar: false, ptrDim: 0, arrDim: 0, ast: nil), kind: tiToResolve, myToResolve: ())

----
--------

      symbol: (inputFname: "test.scone", name: "a", kind: symVar, initValAst: none(AstNode), typeInfo: ...)
      typeInfo: (main: (inputFname: "test.scone", name: some("T"), funcVar: false, ptrDim: 0, arrDim: 0, ast: (AstNamedType
  ident (AstIdent "T")
  genericImpl (AstGenericList mySeq [
  ])
)), kind: tiToResolve, myToResolve: ())

----
--------

      symbol: (inputFname: "test.scone", name: "b", kind: symVar, initValAst: none(AstNode), typeInfo: ...)
      typeInfo: (main: (inputFname: "test.scone", name: some("T"), funcVar: false, ptrDim: 0, arrDim: 0, ast: (AstNamedType
  ident (AstIdent "T")
  genericImpl (AstGenericList mySeq [
  ])
)), kind: tiToResolve, myToResolve: ())

----
--------

      symbol: (inputFname: "test.scone", name: "<result>", kind: symVar, initValAst: none(AstNode), typeInfo: ...)
      typeInfo: (main: (inputFname: "test.scone", name: some("T"), funcVar: false, ptrDim: 0, arrDim: 0, ast: (AstNamedType
  ident (AstIdent "T")
  genericImpl (AstGenericList mySeq [
  ])
)), kind: tiToResolve, myToResolve: ())

----
--------

----
--------

    symbol: (inputFname: "test.scone", name: "times", kind: symFuncDecl, initValAst: none(AstNode), typeInfo: ...)
    typeInfo: (main: (inputFname: "test.scone", name: none(string), funcVar: false, ptrDim: 0, arrDim: 0, ast: nil), kind: tiFunc, myFunc: (genericIdxSeq: @[], argIdxSeq: @[1, 2], returnTypeIdx: 3))

      symbol: (inputFname: "test.scone", name: "T", kind: symGenericDecl, initValAst: none(AstNode), typeInfo: ...)
      typeInfo: (main: (inputFname: "test.scone", name: none(string), funcVar: false, ptrDim: 0, arrDim: 0, ast: nil), kind: tiToResolve, myToResolve: ())

----
--------

      symbol: (inputFname: "test.scone", name: "a", kind: symVar, initValAst: none(AstNode), typeInfo: ...)
      typeInfo: (main: (inputFname: "test.scone", name: some("Vec2"), funcVar: false, ptrDim: 0, arrDim: 0, ast: (AstNamedType
  ident (AstIdent "Vec2")
  genericImpl (AstGenericList mySeq [
    (AstType
      kwVar false
      ptrDim 0
      child (AstNamedType
        ident (AstIdent "T")
        genericImpl (AstGenericList mySeq [
        ])
      )
    )
  ])
)), kind: tiToResolve, myToResolve: ())

----
--------

      symbol: (inputFname: "test.scone", name: "scale", kind: symVar, initValAst: none(AstNode), typeInfo: ...)
      typeInfo: (main: (inputFname: "test.scone", name: some("T"), funcVar: false, ptrDim: 0, arrDim: 0, ast: (AstNamedType
  ident (AstIdent "T")
  genericImpl (AstGenericList mySeq [
  ])
)), kind: tiToResolve, myToResolve: ())

----
--------

      symbol: (inputFname: "test.scone", name: "<result>", kind: symVar, initValAst: none(AstNode), typeInfo: ...)
      typeInfo: (main: (inputFname: "test.scone", name: some("Vec2"), funcVar: false, ptrDim: 0, arrDim: 0, ast: (AstNamedType
  ident (AstIdent "Vec2")
  genericImpl (AstGenericList mySeq [
    (AstType
      kwVar false
      ptrDim 0
      child (AstNamedType
        ident (AstIdent "T")
        genericImpl (AstGenericList mySeq [
        ])
      )
    )
  ])
)), kind: tiToResolve, myToResolve: ())

----
--------

----
--------

    symbol: (inputFname: "test.scone", name: "at", kind: symFuncDecl, initValAst: none(AstNode), typeInfo: ...)
    typeInfo: (main: (inputFname: "test.scone", name: none(string), funcVar: false, ptrDim: 0, arrDim: 0, ast: nil), kind: tiFunc, myFunc: (genericIdxSeq: @[], argIdxSeq: @[1, 2], returnTypeIdx: 3))

      symbol: (inputFname: "test.scone", name: "T", kind: symGenericDecl, initValAst: none(AstNode), typeInfo: ...)
      typeInfo: (main: (inputFname: "test.scone", name: none(string), funcVar: false, ptrDim: 0, arrDim: 0, ast: nil), kind: tiToResolve, myToResolve: ())

----
--------

      symbol: (inputFname: "test.scone", name: "self", kind: symVar, initValAst: none(AstNode), typeInfo: ...)
      typeInfo: (main: (inputFname: "test.scone", name: some("Vec2"), funcVar: true, ptrDim: 0, arrDim: 0, ast: (AstNamedType
  ident (AstIdent "Vec2")
  genericImpl (AstGenericList mySeq [
    (AstType
      kwVar false
      ptrDim 0
      child (AstNamedType
        ident (AstIdent "T")
        genericImpl (AstGenericList mySeq [
        ])
      )
    )
  ])
)), kind: tiToResolve, myToResolve: ())

----
--------

      symbol: (inputFname: "test.scone", name: "idx", kind: symVar, initValAst: none(AstNode), typeInfo: ...)
      typeInfo: (main: (inputFname: "test.scone", name: none(string), funcVar: false, ptrDim: 0, arrDim: 0, ast: (AstBasicType kind basicTypeU32)), kind: tiBasicType, myBasicType: (kind: basicTypeVoid))

----
--------

      symbol: (inputFname: "test.scone", name: "<result>", kind: symVar, initValAst: none(AstNode), typeInfo: ...)
      typeInfo: (main: (inputFname: "test.scone", name: some("T"), funcVar: true, ptrDim: 0, arrDim: 0, ast: (AstNamedType
  ident (AstIdent "T")
  genericImpl (AstGenericList mySeq [
  ])
)), kind: tiToResolve, myToResolve: ())

----
--------

----
--------

    symbol: (inputFname: "test.scone", name: "sum", kind: symFuncDecl, initValAst: none(AstNode), typeInfo: ...)
    typeInfo: (main: (inputFname: "test.scone", name: none(string), funcVar: false, ptrDim: 0, arrDim: 0, ast: nil), kind: tiFunc, myFunc: (genericIdxSeq: @[], argIdxSeq: @[1], returnTypeIdx: 2))

      symbol: (inputFname: "test.scone", name: "T", kind: symGenericDecl, initValAst: none(AstNode), typeInfo: ...)
      typeInfo: (main: (inputFname: "test.scone", name: none(string), funcVar: false, ptrDim: 0, arrDim: 0, ast: nil), kind: tiToResolve, myToResolve: ())

----
--------

      symbol: (inputFname: "test.scone", name: "toSum", kind: symVar, initValAst: none(AstNode), typeInfo: ...)
      typeInfo: (main: (inputFname: "test.scone", name: some("Vec2"), funcVar: true, ptrDim: 0, arrDim: 24, ast: (AstNamedType
  ident (AstIdent "Vec2")
  genericImpl (AstGenericList mySeq [
    (AstType
      kwVar false
      ptrDim 0
      child (AstNamedType
        ident (AstIdent "T")
        genericImpl (AstGenericList mySeq [
        ])
      )
    )
  ])
)), kind: tiToResolve, myToResolve: ())

----
--------

      symbol: (inputFname: "test.scone", name: "<result>", kind: symVar, initValAst: none(AstNode), typeInfo: ...)
      typeInfo: (main: (inputFname: "test.scone", name: some("Vec2"), funcVar: false, ptrDim: 0, arrDim: 0, ast: (AstNamedType
  ident (AstIdent "Vec2")
  genericImpl (AstGenericList mySeq [
    (AstType
      kwVar false
      ptrDim 0
      child (AstNamedType
        ident (AstIdent "T")
        genericImpl (AstGenericList mySeq [
        ])
      )
    )
  ])
)), kind: tiToResolve, myToResolve: ())

----
--------

----
--------

--------

--------


doAstSrcFile: pre mkScopeEtc
addChildSymTbl: childSeq.len(): 0
addChildSymTbl: post set parent: true 1
doAstSrcFile: post mkScopeEtc
gotoParentSymTbl: parent != nil: true
doAstSrcFile: pre mkScopeEtc
addChildSymTbl: childSeq.len(): 0
addChildSymTbl: post set parent: true 1
doAstSrcFile: post mkScopeEtc
gotoParentSymTbl: parent != nil: true
doAstSrcFile: pre mkScopeEtc
addChildSymTbl: childSeq.len(): 0
addChildSymTbl: post set parent: true 1
doAstSrcFile: post mkScopeEtc
gotoParentSymTbl: parent != nil: true
